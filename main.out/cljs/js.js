// Compiled by ClojureScript 1.10.312 {:static-fns true, :optimize-constants true}
goog.provide('cljs.js');
goog.require('cljs.core');
goog.require('cljs.core.constants');
goog.require('clojure.string');
goog.require('clojure.walk');
goog.require('cljs.env');
goog.require('cljs.spec.alpha');
goog.require('cljs.analyzer');
goog.require('cljs.compiler');
goog.require('cljs.tools.reader');
goog.require('cljs.tools.reader.reader_types');
goog.require('cljs.tagged_literals');
goog.require('goog.crypt.base64');
goog.require('cljs.source_map');
goog.require('goog.string.StringBuffer');
goog.require("cljs.core$macros");
cljs.js.debug_prn = (function cljs$js$debug_prn(var_args){
var args__4520__auto__ = [];
var len__4517__auto___9944 = arguments.length;
var i__4518__auto___9945 = (0);
while(true){
if((i__4518__auto___9945 < len__4517__auto___9944)){
args__4520__auto__.push((arguments[i__4518__auto___9945]));

var G__9946 = (i__4518__auto___9945 + (1));
i__4518__auto___9945 = G__9946;
continue;
} else {
}
break;
}

var argseq__4521__auto__ = ((((0) < args__4520__auto__.length))?(new cljs.core.IndexedSeq(args__4520__auto__.slice((0)),(0),null)):null);
return cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(argseq__4521__auto__);
});

cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic = (function (args){
var _STAR_print_fn_STAR_9943 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_fn_STAR_ = cljs.core._STAR_print_err_fn_STAR_;

try{return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.println,args);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_9943;
}});

cljs.js.debug_prn.cljs$lang$maxFixedArity = (0);

/** @this {Function} */
cljs.js.debug_prn.cljs$lang$applyTo = (function (seq9942){
var self__4505__auto__ = this;
return self__4505__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9942));
});

/**
 * Given a namespace as a symbol return the relative path sans extension
 */
cljs.js.ns__GT_relpath = (function cljs$js$ns__GT_relpath(ns_sym){
return clojure.string.replace(cljs.analyzer.munge_path(ns_sym),".","/");
});
cljs.js.file__GT_ns = (function cljs$js$file__GT_ns(file){
var lib_name = cljs.core.subs.cljs$core$IFn$_invoke$arity$3(clojure.string.replace(file,"/","."),(0),(cljs.core.count(file) - (5)));
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(lib_name));
});
cljs.js.drop_macros_suffix = (function cljs$js$drop_macros_suffix(ns_name){
if(cljs.core.truth_(ns_name)){
if(clojure.string.ends_with_QMARK_(ns_name,"$macros")){
return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(ns_name,(0),(cljs.core.count(ns_name) - (7)));
} else {
return ns_name;
}
} else {
return null;
}
});
cljs.js.elide_macros_suffix = (function cljs$js$elide_macros_suffix(sym){
return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(cljs.js.drop_macros_suffix(cljs.core.namespace(sym)),cljs.core.name(sym));
});
cljs.js.resolve_symbol = (function cljs$js$resolve_symbol(sym){
if(clojure.string.starts_with_QMARK_([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(''),".")){
return sym;
} else {
return cljs.js.elide_macros_suffix(cljs.analyzer.resolve_symbol(sym));
}
});
cljs.js.read = (function cljs$js$read(eof,rdr){
var _STAR_ns_STAR_9947 = cljs.core._STAR_ns_STAR_;
cljs.core._STAR_ns_STAR_ = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.js.drop_macros_suffix([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_ns_STAR_)].join('')));

try{return cljs.tools.reader.read.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$eof,eof,cljs.core.cst$kw$read_DASH_cond,cljs.core.cst$kw$allow,cljs.core.cst$kw$features,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs,null], null), null)], null),rdr);
}finally {cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_9947;
}});
cljs.js.atom_QMARK_ = (function cljs$js$atom_QMARK_(x){
return (x instanceof cljs.core.Atom);
});
cljs.js.valid_name_QMARK_ = (function cljs$js$valid_name_QMARK_(x){
return (((x == null)) || ((x instanceof cljs.core.Symbol)) || (typeof x === 'string'));
});
cljs.js.valid_opts_QMARK_ = (function cljs$js$valid_opts_QMARK_(x){
return (((x == null)) || (cljs.core.map_QMARK_(x)));
});
if((typeof cljs !== 'undefined') && (typeof cljs.js !== 'undefined') && (typeof cljs.js._STAR_load_fn_STAR_ !== 'undefined')){
} else {
/**
 * Each runtime environment provides a different way to load a library.
 *   Whatever function *load-fn* is bound to will be passed two arguments - a
 *   map and a callback function: The map will have the following keys:
 * 
 *   :name   - the name of the library (a symbol)
 *   :macros - modifier signaling a macros namespace load
 *   :path   - munged relative library path (a string)
 * 
 *   It is up to the implementor to correctly resolve the corresponding .cljs,
 *   .cljc, or .js resource (the order must be respected). If :macros is true
 *   resolution should only consider .clj or .cljc resources (the order must be
 *   respected). Upon resolution the callback should be invoked with a map
 *   containing the following keys:
 * 
 *   :lang       - the language, :clj or :js
 *   :source     - the source of the library (a string)
 *   :file       - optional, the file path, it will be added to AST's :file keyword
 *              (but not in :meta)
 *   :cache      - optional, if a :clj namespace has been precompiled to :js, can
 *              give an analysis cache for faster loads.
 *   :source-map - optional, if a :clj namespace has been precompiled to :js, can
 *              give a V3 source map JSON
 * 
 *   If the resource could not be resolved, the callback should be invoked with
 *   nil.
 */
cljs.js._STAR_load_fn_STAR_ = (function cljs$js$_STAR_load_fn_STAR_(m,cb){
throw (new Error("No *load-fn* set"));
});
}
if((typeof cljs !== 'undefined') && (typeof cljs.js !== 'undefined') && (typeof cljs.js._STAR_eval_fn_STAR_ !== 'undefined')){
} else {
/**
 * Each runtime environment provides various ways to eval JavaScript
 *   source. Whatever function *eval-fn* is bound to will be passed a map
 *   containing the following keys:
 * 
 *   :source - the source of the library (string)
 *   :name   - used to unique identify the script (symbol)
 *   :cache  - if the source was originally ClojureScript, will be given the
 *          analysis cache.
 * 
 *   The result of evaluation should be the return value.
 */
cljs.js._STAR_eval_fn_STAR_ = (function cljs$js$_STAR_eval_fn_STAR_(m){
throw (new Error("No *eval-fn* set"));
});
}
/**
 * A default JavaScript evaluation function.
 */
cljs.js.js_eval = (function cljs$js$js_eval(p__9948){
var map__9949 = p__9948;
var map__9949__$1 = ((((!((map__9949 == null)))?(((((map__9949.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9949.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9949):map__9949);
var resource = map__9949__$1;
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9949__$1,cljs.core.cst$kw$source);
return eval(source);
});
cljs.js.wrap_error = (function cljs$js$wrap_error(ex){
return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$error,ex], null);
});
/**
 * Construct an empty compiler state. Required to invoke analyze, compile,
 * eval and eval-str.
 */
cljs.js.empty_state = (function cljs$js$empty_state(var_args){
var G__9952 = arguments.length;
switch (G__9952) {
case 0:
return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0();

break;
case 1:
return cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0 = (function (){
var G__9953 = cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0();
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(G__9953,((function (G__9953){
return (function (state){
return cljs.core.assoc_in(state,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.core.cst$sym$cljs$core], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$rename_DASH_macros,cljs.core.cst$kw$renames,cljs.core.cst$kw$externs,cljs.core.cst$kw$use_DASH_macros,cljs.core.cst$kw$excludes,cljs.core.cst$kw$macros,cljs.core.cst$kw$name,cljs.core.cst$kw$imports,cljs.core.cst$kw$requires,cljs.core.cst$kw$uses,cljs.core.cst$kw$defs,cljs.core.cst$kw$require_DASH_macros,cljs.core.cst$kw$cljs$analyzer_SLASH_constants,cljs.core.cst$kw$doc],[cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentArrayMap.EMPTY,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$setTimeout,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$sym$process,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$hrtime,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.cst$sym$Java,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$type,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.cst$sym$Object,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$out,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$println,cljs.core.PersistentArrayMap.EMPTY], null),cljs.core.cst$sym$error,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$println,cljs.core.PersistentArrayMap.EMPTY], null)], null)], null),cljs.core.PersistentArrayMap.EMPTY,cljs.core.PersistentHashSet.EMPTY,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$unsafe_DASH_bit_DASH_and,cljs.core.cst$sym$macroexpand,cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,cljs.core.cst$sym$when_DASH_first,cljs.core.cst$sym$cond_DASH__GT__GT_,cljs.core.cst$sym$bit_DASH_set,cljs.core.cst$sym$import_DASH_macros,cljs.core.cst$sym$while,cljs.core.cst$sym$satisfies_QMARK_,cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,cljs.core.cst$sym$ns_DASH_unmap,cljs.core.cst$sym$import,cljs.core.cst$sym$bit_DASH_shift_DASH_right,cljs.core.cst$sym$aget,cljs.core.cst$sym$specify,cljs.core.cst$sym$vswap_BANG_,cljs.core.cst$sym$caching_DASH_hash,cljs.core.cst$sym$bit_DASH_shift_DASH_left,cljs.core.cst$sym$coercive_DASH_not,cljs.core.cst$sym$dec,cljs.core.cst$sym$unchecked_DASH_get,cljs.core.cst$sym$return_DASH_first,cljs.core.cst$sym$ns_DASH_publics,cljs.core.cst$sym$_LT_,cljs.core.cst$sym$this_DASH_as,cljs.core.cst$sym$$$,cljs.core.cst$sym$delay,cljs.core.cst$sym$some_QMARK_,cljs.core.cst$sym$unchecked_DASH_negate,cljs.core.cst$sym$simple_DASH_benchmark,cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,cljs.core.cst$sym$unchecked_DASH_set,cljs.core.cst$sym$js_DASH_str,cljs.core.cst$sym$bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,cljs.core.cst$sym$implements_QMARK_,cljs.core.cst$sym$goog_DASH_define,cljs.core.cst$sym$pos_QMARK_,cljs.core.cst$sym$specify_BANG_,cljs.core.cst$sym$if_DASH_not,cljs.core.cst$sym$alength,cljs.core.cst$sym$bit_DASH_xor,cljs.core.cst$sym$doseq,cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$unchecked_DASH_float,cljs.core.cst$sym$undefined_QMARK_,cljs.core.cst$sym$deftype,cljs.core.cst$sym$mask,cljs.core.cst$sym$when_DASH_let,cljs.core.cst$sym$divide,cljs.core.cst$sym$coercive_DASH_boolean,cljs.core.cst$sym$_LT__EQ_,cljs.core.cst$sym$if_DASH_some,cljs.core.cst$sym$_STAR_,cljs.core.cst$sym$min,cljs.core.cst$sym$lazy_DASH_seq,cljs.core.cst$sym$js_DASH_delete,cljs.core.cst$sym$truth_,cljs.core.cst$sym$defcurried,cljs.core.cst$sym$js_DASH_debugger,cljs.core.cst$sym$let,cljs.core.cst$sym$_DASH__GT_,cljs.core.cst$sym$coercive_DASH_not_EQ_,cljs.core.cst$sym$doto,cljs.core.cst$sym$areduce,cljs.core.cst$sym$double,cljs.core.cst$sym$bit_DASH_and_DASH_not,cljs.core.cst$sym$unchecked_DASH_add_DASH_int,cljs.core.cst$sym$fn,cljs.core.cst$sym$short,cljs.core.cst$sym$js_DASH_this,cljs.core.cst$sym$unchecked_DASH_double,cljs.core.cst$sym$string_QMARK_,cljs.core.cst$sym$js_DASH_arguments,cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,cljs.core.cst$sym$as_DASH__GT_,cljs.core.cst$sym$when_DASH_not,cljs.core.cst$sym$when,cljs.core.cst$sym$int,cljs.core.cst$sym$_GT_,cljs.core.cst$sym$keyword_QMARK_,cljs.core.cst$sym$use_DASH_macros,cljs.core.cst$sym$unchecked_DASH_multiply,cljs.core.cst$sym$gen_DASH_apply_DASH_to,cljs.core.cst$sym$some_DASH__GT__GT_,cljs.core.cst$sym$unchecked_DASH_dec,cljs.core.cst$sym$defn,cljs.core.cst$sym$float,cljs.core.cst$sym$js_DASH_in,cljs.core.cst$sym$es6_DASH_iterable,cljs.core.cst$sym$amap,cljs.core.cst$sym$use,cljs.core.cst$sym$declare,cljs.core.cst$sym$_DASH_,cljs.core.cst$sym$hash_DASH_set,cljs.core.cst$sym$or,cljs.core.cst$sym$extend_DASH_type,cljs.core.cst$sym$macroexpand_DASH_1,cljs.core.cst$sym$bit_DASH_test,cljs.core.cst$sym$defmethod,cljs.core.cst$sym$time,cljs.core.cst$sym$zero_QMARK_,cljs.core.cst$sym$require,cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,cljs.core.cst$sym$memfn,cljs.core.cst$sym$js_DASH_obj,cljs.core.cst$sym$nil_QMARK_,cljs.core.cst$sym$extend_DASH_protocol,cljs.core.cst$sym$cond_DASH__GT_,cljs.core.cst$sym$dotimes,cljs.core.cst$sym$bit_DASH_and,cljs.core.cst$sym$reify,cljs.core.cst$sym$instance_QMARK_,cljs.core.cst$sym$load_DASH_file_STAR_,cljs.core.cst$sym$defonce,cljs.core.cst$sym$unchecked_DASH_add,cljs.core.cst$sym$rfn,cljs.core.cst$sym$identical_QMARK_,cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,cljs.core.cst$sym$defn_DASH_,cljs.core.cst$sym$defprotocol,cljs.core.cst$sym$ns_DASH_special_DASH_form,cljs.core.cst$sym$unchecked_DASH_subtract,cljs.core.cst$sym$assert,cljs.core.cst$sym$true_QMARK_,cljs.core.cst$sym$array,cljs.core.cst$sym$letfn,cljs.core.cst$sym$_SLASH_,cljs.core.cst$sym$bitpos,cljs.core.cst$sym$bit_DASH_or,cljs.core.cst$sym$vector,cljs.core.cst$sym$_GT__EQ_,cljs.core.cst$sym$loop,cljs.core.cst$sym$bit_DASH_flip,cljs.core.cst$sym$js_DASH_mod,cljs.core.cst$sym$with_DASH_out_DASH_str,cljs.core.cst$sym$condp,cljs.core.cst$sym$cond,cljs.core.cst$sym$some_DASH__GT_,cljs.core.cst$sym$ns_DASH_interns,cljs.core.cst$sym$for,cljs.core.cst$sym$binding,cljs.core.cst$sym$array_DASH_map,cljs.core.cst$sym$unchecked_DASH_byte,cljs.core.cst$sym$ns_DASH_imports,cljs.core.cst$sym$defmacro,cljs.core.cst$sym$unchecked_DASH_short,cljs.core.cst$sym$inc,cljs.core.cst$sym$with_DASH_redefs,cljs.core.cst$sym$bit_DASH_clear,cljs.core.cst$sym$locking,cljs.core.cst$sym$list,cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$aset,cljs.core.cst$sym$defmulti,cljs.core.cst$sym$str,cljs.core.cst$sym$coercive_DASH__EQ_,cljs.core.cst$sym$hash_DASH_map,cljs.core.cst$sym$gen_DASH_apply_DASH_to_DASH_simple,cljs.core.cst$sym$if_DASH_let,cljs.core.cst$sym$false_QMARK_,cljs.core.cst$sym$case,cljs.core.cst$sym$exists_QMARK_,cljs.core.cst$sym$bit_DASH_not,cljs.core.cst$sym$byte,cljs.core.cst$sym$max,cljs.core.cst$sym$_EQ__EQ_,cljs.core.cst$sym$lazy_DASH_cat,cljs.core.cst$sym$comment,cljs.core.cst$sym$copy_DASH_arguments,cljs.core.cst$sym$when_DASH_assert,cljs.core.cst$sym$unsafe_DASH_cast,cljs.core.cst$sym$resolve,cljs.core.cst$sym$defrecord,cljs.core.cst$sym$make_DASH_array,cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,cljs.core.cst$sym$unchecked_DASH_inc,cljs.core.cst$sym$and,cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$js_DASH_comment,cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$when_DASH_some,cljs.core.cst$sym$unchecked_DASH_char,cljs.core.cst$sym$require_DASH_macros,cljs.core.cst$sym$_DASH__GT__GT_,cljs.core.cst$sym$js_DASH_inline_DASH_comment,cljs.core.cst$sym$refer_DASH_clojure],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1190,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsafe_DASH_bit_DASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted], null)),cljs.core.cst$kw$doc,"Repeatedly calls macroexpand-1 on form until it no longer\n  represents a macro form, then returns it.  Note neither\n  macroexpand-1 nor macroexpand expand macros in subforms.",cljs.core.cst$kw$line,2992,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_macroexpand,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1097,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_remainder_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => x xs\n\n  Roughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4444,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_first,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression and a set of test/form pairs. Threads expr (via ->>)\n  through each form for which the corresponding test expression\n  is true.  Note that, unlike cond branching, cond->> threading does not short circuit\n  after the first true test expression.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7257,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond_DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1230,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vars], null)], null)),cljs.core.cst$kw$line,64,cljs.core.cst$kw$column,4,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_import_DASH_macros,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Repeatedly executes body while test expression is true. Presumes\n  some side-effect will cause test to become false/nil. Returns nil",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,6087,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_while,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Returns true if x satisfies the protocol",cljs.core.cst$kw$line,2106,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_satisfies_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1103,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns,cljs.core.cst$sym$quoted_DASH_sym], null)),cljs.core.cst$kw$doc,"Removes the mappings for the symbol from the namespace.",cljs.core.cst$kw$line,2851,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_unmap,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$import_DASH_symbols_DASH_or_DASH_lists], null)),cljs.core.cst$kw$doc,"import-list => (closure-namespace constructor-name-symbols*)\n\n  For each name in constructor-name-symbols, adds a mapping from name to the\n  constructor named by closure-namespace to the current namespace. Use :import in the ns\n  macro in preference to calling this directly.",cljs.core.cst$kw$line,2955,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_import,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1221,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$line,1006,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_aget,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Identical to specify! but does not mutate its first argument. The first\n  argument must be an ICloneable instance.",cljs.core.cst$kw$line,1376,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_specify,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Non-atomically swaps the value of the volatile as if:\n   (apply f current-value-of-vol args). Returns the value that\n   was swapped in.",cljs.core.cst$kw$line,2863,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_vswap_BANG_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$hash_DASH_fn,cljs.core.cst$sym$hash_DASH_key], null)),cljs.core.cst$kw$line,1242,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_caching_DASH_hash,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1218,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_left,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,895,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1152,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_dec,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$doc,"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.",cljs.core.cst$kw$line,1033,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_get,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$line,729,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_return_DASH_first,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns], null)),cljs.core.cst$kw$doc,"Returns a map of the public intern mappings for the namespace.",cljs.core.cst$kw$line,2807,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_publics,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1127,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__LT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Defines a scope where JavaScript's implicit \"this\" is bound to the name provided.",cljs.core.cst$kw$line,1386,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_this_DASH_as,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$form], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$form,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$doc,"form => fieldName-symbol or (instanceMethodName-symbol args*)\n\n  Expands into a member access (.) of the first member on the first\n  argument, followed by the next member on the result, etc. For\n  instance:\n\n  (.. System (getProperties) (get \"os.name\"))\n\n  expands to:\n\n  (. (. System (getProperties)) (get \"os.name\"))\n\n  but is easier to write, read, and understand.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1568,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_$$,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Takes a body of expressions and yields a Delay object that will\n  invoke the body only the first time it is forced (with force or deref/@), and\n  will cache the result and return it on all subsequent force\n  calls.",cljs.core.cst$kw$line,2144,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_delay,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,892,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1091,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$expr,cljs.core.cst$sym$iterations,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$print_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$print_DASH_fn,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.cst$sym$println)], null)], null)], null)),cljs.core.cst$kw$doc,"Runs expr iterations times in the context of a let expression with\n  the given bindings, then prints out the bindings and the expr\n  followed by number of iterations and total time. The optional\n  argument print-fn, defaulting to println, sets function used to\n  print the result. expr's string representation will be produced\n  using pr-str in any case.",cljs.core.cst$kw$line,2709,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_benchmark,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1082,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$doc,"INTERNAL. Compiles to JavaScript property access using bracket notation. Does\n  not distinguish between object and array types and not subject to compiler\n  static analysis.",cljs.core.cst$kw$line,1040,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),cljs.core.cst$kw$line,2798,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1224,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"EXPERIMENTAL",cljs.core.cst$kw$line,2080,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_implements_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$default], null)),cljs.core.cst$kw$doc,"Defines a var using `goog.define`. Passed default value must be\n  string, number or boolean.\n\n  Default value can be overridden at compile time using the\n  compiler option `:closure-defines`.\n\n  Example:\n    (ns your-app.core)\n    (goog-define DEBUG! false)\n    ;; can be overridden with\n    :closure-defines {\"your_app.core.DEBUG_BANG_\" true}\n    or\n    :closure-defines {'your-app.core/DEBUG! true}",cljs.core.cst$kw$line,735,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_goog_DASH_define,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1161,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_pos_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Identical to reify but mutates its first argument.",cljs.core.cst$kw$line,1368,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_specify_BANG_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$then,cljs.core.cst$sym$else], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical false, evaluates and returns then expr, \n  otherwise else expr, if supplied, else nil.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,748,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a], null)),cljs.core.cst$kw$line,2590,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_alength,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1201,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_xor,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seq_DASH_exprs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Repeatedly executes body (presumably for side-effects) with\n  bindings and filtering as provided by \"for\".  Does not retain\n  the head of the sequence. Returns nil.",cljs.core.cst$kw$line,2424,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_doseq,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1227,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsigned_DASH_bit_DASH_shift_DASH_right,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1164,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_neg_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1061,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_float,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Return true if argument is identical to the JavaScript undefined value.",cljs.core.cst$kw$line,980,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_undefined_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$t,cljs.core.cst$sym$fields,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"(deftype name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The type will have the (by default, immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols/interfaces.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly. Fields can be qualified\n  with the metadata :mutable true at which point (set! afield aval) will be\n  supported in method bodies. Note well that mutable fields are extremely\n  difficult to use correctly, and are present only to facilitate the building\n  of higherlevel constructs, such as ClojureScript's reference types, in\n  ClojureScript itself. They are for experts only - if the semantics and\n  implications of :mutable are not immediately apparent to you, you should not\n  be using them.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for methods of Object. Note that\n  a parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls to the method\n  head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  One constructor will be defined, taking the designated fields.  Note\n  that the field names __meta and __extmap are currently reserved and\n  should not be used when defining your own types.\n\n  Given (deftype TypeName ...), a factory function called ->TypeName\n  will be defined, taking positional parameters for the fields",cljs.core.cst$kw$line,1714,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_deftype,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),cljs.core.cst$kw$line,1234,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_mask,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n  When test is true, evaluates body with binding-form bound to the value of test",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1769,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1122,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_divide,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,904,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_boolean,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1132,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__LT__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then,cljs.core.cst$sym$else,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$oldform], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n   If test is not nil, evaluates then with binding-form bound to the\n   value of test, if not, yields else",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1784,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_some,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1111,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1173,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_min,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Takes a body of expressions that returns an ISeq or nil, and yields\n  a ISeqable object that will invoke the body only the first time seq\n  is called, and will cache the result and return it on all subsequent\n  seq calls.",cljs.core.cst$kw$line,2136,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_seq,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$line,916,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_delete,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,909,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_truth_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[true,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc,cljs.core.cst$sym$meta,cljs.core.cst$sym$args,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),"Builds another arity of the fn that returns a fn awaiting the last\n  param",1260,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_defcurried,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$doc,"Emit JavaScript \"debugger;\" statement",cljs.core.cst$kw$line,922,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_debugger,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => binding-form init-expr\n\n  Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein.",cljs.core.cst$kw$line,770,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Threads the expr through the forms. Inserts x as the\n  second item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  second item in second form, etc.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1586,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$line,898,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH_not_EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Evaluates x then calls all of the methods and functions with the\n  value of x supplied at the front of the given arguments.  The forms\n  are evaluated in order.  Returns x.\n\n  (doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,3724,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_doto,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$idx,cljs.core.cst$sym$ret,cljs.core.cst$sym$init,cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Reduces an expression across an array a, using an index named idx,\n  and return value named ret, initialized to init, setting ret to the\n  evaluation of expr at each step, returning ret.",cljs.core.cst$kw$line,2611,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_areduce,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1056,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_double,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1205,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1067,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$sigs], null)),cljs.core.cst$kw$doc,"params => positional-params* , or positional-params* & next-param\n  positional-param => binding-form\n  next-param => binding-form\n  name => symbol\n\n  Defines a function",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4357,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_fn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1054,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_short,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,1383,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_this,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1062,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_double,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,960,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,913,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_arguments,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1088,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Binds name to expr, evaluates the first form in the lexical context\n  of that binding, then binds name to that result, repeating for each\n  successive form, returning the result of the last form.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7274,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_as_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical false, evaluates body in an implicit do.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,499,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$test,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates test. If logical true, evaluates body in an implicit do.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,493,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1198,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1137,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1003,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_keyword_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Similar to use but only for macros.",cljs.core.cst$kw$line,2950,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_use_DASH_macros,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1085,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,2740,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_gen_DASH_apply_DASH_to,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"When expr is not nil, threads it into the first form (via ->>),\n  and when that result is not nil, through the next etc",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7300,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1070,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$doc,"Same as (def name (core/fn [params* ] exprs*)) or (def\n    name (core/fn ([params* ] exprs*)+)) with any doc-string or attrs added\n    to the var metadata. prepost-map defines a map with optional keys\n    :pre and :post that contain collections of pre or post conditions.",cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$prepost_DASH_map_QMARK_,cljs.core.cst$sym$body], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$prepost_DASH_map_QMARK_,cljs.core.cst$sym$body),cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$attr_DASH_map_QMARK_], null)),cljs.core.cst$kw$line,3162,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1055,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_float,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$obj], null)),cljs.core.cst$kw$line,919,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_in,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)),cljs.core.cst$kw$line,2801,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterable,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$idx,cljs.core.cst$sym$ret,cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Maps an expression across an array a, using an index named idx, and\n  return value named ret, initialized to a clone of a, then setting\n  each element of ret to the evaluation of expr, returning the new\n  array ret.",cljs.core.cst$kw$line,2595,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_amap,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Like require, but referring vars specified by the mandatory\n  :only option.\n\n  Example:\n\n  The following would load the library clojure.set while referring\n  the intersection var.\n\n  (use '[clojure.set :only [intersection]])",cljs.core.cst$kw$line,2937,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_use,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$names], null)),cljs.core.cst$kw$doc,"defs the supplied var names with no bindings, useful for making forward declarations.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,2667,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_declare,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1106,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2547,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_set,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$next], null)),cljs.core.cst$kw$doc,"Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.",cljs.core.cst$kw$line,870,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_or,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type_DASH_sym,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"Extend a type to a series of protocols. Useful when you are\n  supplying the definitions explicitly inline. Propagates the\n  type as a type hint on the first argument of all fns.\n\n  type-sym may be\n\n   * default, meaning the definitions will apply for any value,\n     unless an extend-type exists for one of the more specific\n     cases below.\n   * nil, meaning the definitions will apply for the nil value.\n   * any of object, boolean, number, string, array, or function,\n     indicating the definitions will apply for values of the\n     associated base JavaScript types. Note that, for example,\n     string should be used instead of js/String.\n   * a JavaScript type not covered by the previous list, such\n     as js/RegExp.\n   * a type defined by deftype or defrecord.\n\n  (extend-type MyType\n    ICounted\n    (-count [c] ...)\n    Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y] ...) ...)",cljs.core.cst$kw$line,1604,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_type,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted], null)),cljs.core.cst$kw$doc,"If form represents a macro form, returns its expansion,\n  else returns form.",cljs.core.cst$kw$line,2981,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_macroexpand_DASH_1,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1215,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_test,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fn_DASH_tail], null)),cljs.core.cst$kw$doc,"Creates and installs a new method of multimethod associated with dispatch-value. ",cljs.core.cst$kw$line,2694,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmethod,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr], null)),cljs.core.cst$kw$doc,"Evaluates expr and prints the time it took. Returns the value of expr.",cljs.core.cst$kw$line,2699,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_time,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1158,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_zero_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Loads libs, skipping any that are already loaded. Each argument is\n  either a libspec that identifies a lib or a flag that modifies how all the identified\n  libs are loaded. Use :require in the ns macro in preference to calling this\n  directly.\n\n  Libs\n\n  A 'lib' is a named set of resources in classpath whose contents define a\n  library of ClojureScript code. Lib names are symbols and each lib is associated\n  with a ClojureScript namespace. A lib's name also locates its root directory\n  within classpath using Java's package name to classpath-relative path mapping.\n  All resources in a lib should be contained in the directory structure under its\n  root directory. All definitions a lib makes should be in its associated namespace.\n\n  'require loads a lib by loading its root resource. The root resource path\n  is derived from the lib name in the following manner:\n  Consider a lib named by the symbol 'x.y.z; it has the root directory\n  <classpath>/x/y/, and its root resource is <classpath>/x/y/z.clj. The root\n  resource should contain code to create the lib's namespace (usually by using\n  the ns macro) and load any additional lib resources.\n\n  Libspecs\n\n  A libspec is a lib name or a vector containing a lib name followed by\n  options expressed as sequential keywords and arguments.\n\n  Recognized options:\n  :as takes a symbol as its argument and makes that symbol an alias to the\n    lib's namespace in the current namespace.\n  :refer takes a list of symbols to refer from the namespace.\n  :refer-macros takes a list of macro symbols to refer from the namespace.\n  :include-macros true causes macros from the namespace to be required.\n  :rename specifies a map from referred var names to different\n    symbols (and can be used to prevent clashes)\n\n\n  Flags\n\n  A flag is a keyword.\n  Recognized flags: :reload, :reload-all, :verbose\n  :reload forces loading of all the identified libs even if they are\n    already loaded\n  :reload-all implies :reload and also forces loading of all libs that the\n    identified libs directly or indirectly load via require or use\n  :verbose triggers printing information about each load, alias, and refer\n\n  Example:\n\n  The following would load the library clojure.string :as string.\n\n  (require '[clojure.string :as string])",cljs.core.cst$kw$line,2877,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_require,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1073,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Expands into code that creates a fn that expects to be passed an\n  object and any args and calls the named instance method on the\n  object passing the args. Use when you want to treat a JavaScript\n  method as a first-class fn.",cljs.core.cst$kw$line,380,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_memfn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$line,2570,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_obj,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,889,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$specs], null)),cljs.core.cst$kw$doc,"Useful when you want to provide several implementations of the same\n  protocol all at once. Takes a single protocol and the implementation\n  of that protocol for one or more types. Expands into calls to\n  extend-type:\n\n  (extend-protocol Protocol\n    AType\n      (foo [x] ...)\n      (bar [x y] ...)\n    BType\n      (foo [x] ...)\n      (bar [x y] ...)\n    AClass\n      (foo [x] ...)\n      (bar [x y] ...)\n    nil\n      (foo [x] ...)\n      (bar [x y] ...))\n\n  expands into:\n\n  (do\n   (clojure.core/extend-type AType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type BType Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type AClass Protocol \n     (foo [x] ...) \n     (bar [x y] ...))\n   (clojure.core/extend-type nil Protocol \n     (foo [x] ...) \n     (bar [x y] ...)))",cljs.core.cst$kw$file,"clojure/core_deftype.clj",cljs.core.cst$kw$line,831,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_protocol,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression and a set of test/form pairs. Threads expr (via ->)\n  through each form for which the corresponding test\n  expression is true. Note that, unlike cond branching, cond-> threading does\n  not short circuit after the first true test expression.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7240,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => name n\n\n  Repeatedly executes body (presumably for side-effects) with name\n  bound to integers from 0 through n-1.",cljs.core.cst$kw$line,2623,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_dotimes,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1185,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"reify is a macro with the following structure:\n\n (reify options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of the protocol name followed by zero\n  or more method bodies:\n\n  protocol\n  (methodName [args+] body)*\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for Object methods. Note that\n  the first parameter must be supplied to correspond to the target object\n  ('this' in JavaScript parlance). Note also that recur calls\n  to the method head should *not* pass the target object, it will be supplied\n  automatically and can not be substituted.\n\n  recur works to method heads The method bodies of reify are lexical\n  closures, and can refer to the surrounding local scope:\n\n  (str (let [f \"foo\"]\n       (reify Object\n         (toString [this] f))))\n  == \"foo\"\n\n  (seq (let [f \"foo\"]\n       (reify ISeqable\n         (-seq [this] (seq f)))))\n  == (\"f\" \"o\" \"o\"))\n\n  reify always implements IMeta and IWithMeta and transfers meta\n  data of the form to the created object.\n\n  (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n  == {:k :v}",cljs.core.cst$kw$line,1308,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_reify,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,988,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_instance_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$line,2978,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_load_DASH_file_STAR_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$doc,"defs name to have the root value of init iff the named var has no root value,\n  else init is unevaluated",cljs.core.cst$kw$line,619,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defonce,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1064,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$k], null),cljs.core.cst$sym$fkv], null)),"Builds 3-arity reducing fn given names of wrapped fn and key, and k/v impl.",1277,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_rfn,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$line,985,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_identical_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1076,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_divide_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$decls], null)),cljs.core.cst$kw$doc,"same as defn, yielding non-public def",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4743,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defn_DASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$psym,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$doc_PLUS_methods], null)),cljs.core.cst$kw$doc,"A protocol is a named set of named methods and their signatures:\n\n  (defprotocol AProtocolName\n    ;optional doc string\n    \"A doc string for AProtocol abstraction\"\n\n  ;method signatures\n    (bar [this a b] \"bar docs\")\n    (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\n  No implementations are provided. Docs can be specified for the\n  protocol overall and for each method. The above yields a set of\n  polymorphic functions and a protocol object. All are\n  namespace-qualified by the ns enclosing the definition The resulting\n  functions dispatch on the type of their first argument, which is\n  required and corresponds to the implicit target object ('this' in\n  JavaScript parlance). defprotocol is dynamic, has no special compile-time\n  effect, and defines no new types.\n\n  (defprotocol P\n    (foo [this])\n    (bar-me [this] [this y]))\n\n  (deftype Foo [a b c]\n    P\n    (foo [this] a)\n    (bar-me [this] b)\n    (bar-me [this y] (+ c y)))\n\n  (bar-me (Foo. 1 2 3) 42)\n  => 45\n\n  (foo\n    (let [x 42]\n      (reify P\n        (foo [this] 17)\n        (bar-me [this] x)\n        (bar-me [this y] x))))\n  => 17",cljs.core.cst$kw$line,1961,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defprotocol,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$line,2875,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_special_DASH_form,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,1100,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$message], null)),cljs.core.cst$kw$doc,"Evaluates expr and throws an exception if it does not evaluate to\n  logical true.",cljs.core.cst$kw$line,2324,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_assert,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,954,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_true_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$line,2480,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_array,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$fnspecs,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"fnspec ==> (fname [params*] exprs) or (fname ([params*] exprs)+)\n\n  Takes a vector of function specs and a body, and generates a set of\n  bindings of functions to their names. All of the names are available\n  in all of the definitions of the functions, as well as the body.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,6297,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_letfn,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1117,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__SLASH_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),cljs.core.cst$kw$line,1238,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bitpos,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1194,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_or,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2516,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_vector,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1142,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__GT__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates the exprs in a lexical context in which the symbols in\n  the binding-forms are bound to their respective init-exprs or parts\n  therein. Acts as a recur target.",cljs.core.cst$kw$line,782,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_loop,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1212,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_flip,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$num,cljs.core.cst$sym$div], null)),cljs.core.cst$kw$line,1179,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_mod,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Evaluates exprs in a context in which *print-fn* is bound to .append\n  on a fresh StringBuffer.  Returns the string created by any nested\n  printing calls.",cljs.core.cst$kw$line,2778,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_with_DASH_out_DASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$added,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$file,cljs.core.cst$kw$name,cljs.core.cst$kw$ns,cljs.core.cst$kw$macro],[cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),"Takes a binary predicate, an expression, and a set of clauses.\n  Each clause can take the form of either:\n\n  test-expr result-expr\n\n  test-expr :>> result-fn\n\n  Note :>> is an ordinary keyword.\n\n  For each clause, (pred test-expr expr) is evaluated. If it returns\n  logical true, the clause is a match. If a binary clause matches, the\n  result-expr is returned, if a ternary clause matches, its result-fn,\n  which must be a unary function, is called with the result of the\n  predicate as its argument, the result of that call being the return\n  value of condp. A single default expression can follow the clauses,\n  and its value will be returned if no clause matches. If no default\n  expression is provided and no clause matches, an Error is thrown.","1.0",2187,1,"cljs/core.cljc",cljs.core.cst$sym$cljs$core_SLASH_condp,cljs.core.cst$sym$cljs$core,true]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes a set of test/expr pairs. It evaluates each test one at a\n  time.  If a test returns logical true, cond evaluates and returns\n  the value of the corresponding expr and doesn't evaluate any of the\n  other tests or exprs. (cond) returns nil.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,580,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_cond,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$expr,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"When expr is not nil, threads it into the first form (via ->),\n  and when that result is not nil, through the next etc",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,7286,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_some_DASH__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns], null)),cljs.core.cst$kw$doc,"Returns a map of the intern mappings for the namespace.",cljs.core.cst$kw$line,2837,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_interns,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seq_DASH_exprs,cljs.core.cst$sym$body_DASH_expr], null)),cljs.core.cst$kw$doc,"List comprehension. Takes a vector of one or more\n   binding-form/collection-expr pairs, each followed by zero or more\n   modifiers, and yields a lazy sequence of evaluations of expr.\n   Collections are iterated in a nested fashion, rightmost fastest,\n   and nested coll-exprs can refer to bindings created in prior\n   binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n   :while test, :when test.\n\n  (take 100 (for [x (range 100000000) y (range 1000000) :while (< y x)]  [x y]))",cljs.core.cst$kw$line,2337,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_for,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => var-symbol init-expr\n\n  Creates new bindings for the (already-existing) vars, with the\n  supplied initial values, executes the exprs in an implicit do, then\n  re-establishes the bindings that existed before.  The new bindings\n  are made in parallel (unlike let); all init-exprs are evaluated\n  before the vars are bound to their new values.",cljs.core.cst$kw$line,2174,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_binding,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$line,2527,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1058,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_byte,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_ns], null)),cljs.core.cst$kw$doc,"Returns a map of the import mappings for the namespace.",cljs.core.cst$kw$line,2823,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_imports,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$body], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$doc_DASH_string_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$params_STAR_], null),cljs.core.cst$sym$body),cljs.core.cst$sym$_PLUS_,cljs.core.cst$sym$attr_DASH_map_QMARK_], null)),cljs.core.cst$kw$doc,"Like defn, but the resulting function name is declared as a\n  macro and will be used as a macro by the compiler when it is\n  called.",cljs.core.cst$kw$line,3238,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmacro,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1060,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_short,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1155,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_inc,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"binding => var-symbol temp-value-expr\n\n  Temporarily redefines vars while executing the body.  The\n  temp-value-exprs will be evaluated and each resulting value will\n  replace in parallel the root value of its var.  After the body is\n  executed, the root values of all the vars will be set back to their\n  old values. Useful for mocking out functions during testing.",cljs.core.cst$kw$line,2152,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_with_DASH_redefs,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$line,1209,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_clear,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$line,2870,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_locking,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,2507,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_list,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1047,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__PLUS_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$line,1019,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_aset,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$docstring_QMARK_,cljs.core.cst$sym$attr_DASH_map_QMARK_,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$options], null)),cljs.core.cst$kw$doc,"Creates a new multimethod with the associated dispatch function.\n  The docstring and attribute-map are optional.\n\n  Options are key-value pairs and may be one of:\n    :default    the default dispatch value, defaults to :default\n    :hierarchy  the isa? hierarchy to use for dispatching\n                defaults to the global hierarchy",cljs.core.cst$kw$line,2647,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defmulti,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$line,832,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_str,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$line,901,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_coercive_DASH__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$line,2537,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$num_DASH_args,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$line,2774,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_gen_DASH_apply_DASH_to_DASH_simple,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$then,cljs.core.cst$sym$else,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$oldform], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n  If test is true, evaluates then with binding-form bound to the value of \n  test, if not, yields else",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1749,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_if_DASH_let,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,957,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_false_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$clauses], null)),cljs.core.cst$kw$doc,"Takes an expression, and a set of clauses.\n\n  Each clause can take the form of either:\n\n  test-constant result-expr\n\n  (test-constant1 ... test-constantN)  result-expr\n\n  The test-constants are not evaluated. They must be compile-time\n  literals, and need not be quoted.  If the expression is equal to a\n  test-constant, the corresponding result-expr is returned. A single\n  default expression can follow the clauses, and its value will be\n  returned if no clause matches. If no default expression is provided\n  and no clause matches, an Error is thrown.\n\n  Unlike cond and condp, case does a constant-time dispatch, the\n  clauses are not considered sequentially.  All manner of constant\n  expressions are acceptable in case, including numbers, strings,\n  symbols, keywords, and (ClojureScript) composites thereof. Note that since\n  lists are used to group multiple constants that map to the same\n  expression, a vector can be used to match a list if needed. The\n  test-constants need not be all of the same type.",cljs.core.cst$kw$line,2250,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_case,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"Return true if argument exists, analogous to usage of typeof operator\n   in JavaScript.",cljs.core.cst$kw$line,963,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_exists_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1182,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_not,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1053,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_byte,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1167,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_max,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$line,1147,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__EQ__EQ_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$doc,"Expands to code which yields a lazy sequence of the concatenation\n  of the supplied colls.  Each coll expr is not evaluated until it is\n  needed.\n\n  (lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))",cljs.core.cst$kw$line,2789,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_lazy_DASH_cat,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"Ignores body, yields nil",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,4555,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$dest], null)),cljs.core.cst$kw$line,3050,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_copy_DASH_arguments,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,2321,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_assert,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$t,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$doc,"EXPERIMENTAL: Subject to change. Unsafely cast a value to a different type.",cljs.core.cst$kw$line,943,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unsafe_DASH_cast,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$quoted_DASH_sym], null)),cljs.core.cst$kw$doc,"Returns the var to which a symbol will be resolved in the namespace else nil.",cljs.core.cst$kw$line,3284,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_resolve,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rsym,cljs.core.cst$sym$fields,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$impls], null)),cljs.core.cst$kw$doc,"(defrecord name [fields*]  options* specs*)\n\n  Currently there are no options.\n\n  Each spec consists of a protocol or interface name followed by zero\n  or more method bodies:\n\n  protocol-or-Object\n  (methodName [args*] body)*\n\n  The record will have the (immutable) fields named by\n  fields, which can have type hints. Protocols and methods\n  are optional. The only methods that can be supplied are those\n  declared in the protocols.  Note that method bodies are\n  not closures, the local environment includes only the named fields,\n  and those fields can be accessed directly.\n\n  Method definitions take the form:\n\n  (methodname [args*] body)\n\n  The argument and return types can be hinted on the arg and\n  methodname symbols. If not supplied, they will be inferred, so type\n  hints should be reserved for disambiguation.\n\n  Methods should be supplied for all methods of the desired\n  protocol(s). You can also define overrides for\n  methods of Object. Note that a parameter must be supplied to\n  correspond to the target object ('this' in JavaScript parlance). Note also\n  that recur calls to the method head should *not* pass the target object, it\n  will be supplied automatically and can not be substituted.\n\n  In the method bodies, the (unqualified) name can be used to name the\n  class (for calls to new, instance? etc).\n\n  The type will have implementations of several ClojureScript\n  protocol generated automatically: IMeta/IWithMeta (metadata support) and\n  IMap, etc.\n\n  In addition, defrecord will define type-and-value-based =,\n  and will define ClojureScript IHash and IEquiv.\n\n  Two constructors will be defined, one taking the designated fields\n  followed by a metadata map (nil for none) and an extension field\n  map (nil for none), and one taking only the fields (using nil for\n  meta and extension fields). Note that the field names __meta\n  and __extmap are currently reserved and should not be used when\n  defining your own records.\n\n  Given (defrecord TypeName ...), two factory functions will be\n  defined: ->TypeName, taking positional parameters for the fields,\n  and map->TypeName, taking a map of keywords to field values.",cljs.core.cst$kw$line,1892,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_defrecord,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$line,2489,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_make_DASH_array,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1094,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate_DASH_int,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$cljs$analyzer_SLASH_numeric,true,cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1079,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$next], null)),cljs.core.cst$kw$doc,"Evaluates exprs one at a time, from left to right. If a form\n  returns logical false (nil or false), and returns that value and\n  doesn't evaluate any of the other expressions, otherwise it returns\n  the value of the last expr. (and) returns true.",cljs.core.cst$kw$line,851,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_and,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,997,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_number_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comment], null)),cljs.core.cst$kw$doc,"Emit a top-level JavaScript multi-line comment. New lines will create a\n  new comment line. Comment block will be preceded and followed by a newline",cljs.core.cst$kw$line,929,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1000,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_symbol_QMARK_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bindings,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$body], null)),cljs.core.cst$kw$doc,"bindings => binding-form test\n\n   When test is not nil, evaluates body with binding-form bound to the\n   value of test",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1804,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_when_DASH_some,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$line,1059,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_char,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Similar to require but only for macros.",cljs.core.cst$kw$line,2932,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_require_DASH_macros,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$forms], null)),cljs.core.cst$kw$doc,"Threads the expr through the forms. Inserts x as the\n  last item in the first form, making a list of it if it is not a\n  list already. If there are more forms, inserts the first form as the\n  last item in second form, etc.",cljs.core.cst$kw$file,"clojure/core.clj",cljs.core.cst$kw$line,1602,cljs.core.cst$kw$column,4,cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT__GT_,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comment], null)),cljs.core.cst$kw$doc,"Emit an inline JavaScript comment.",cljs.core.cst$kw$line,949,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_inline_DASH_comment,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$doc,"Refers to all the public vars of `cljs.core`, subject to\n  filters.\n  Filters can include at most one each of:\n\n  :exclude list-of-symbols\n  :rename map-of-fromsymbol-tosymbol\n\n  Filters can be used to select a subset, via exclusion, or to provide a mapping\n  to a symbol different from the var's name, in order to prevent clashes.",cljs.core.cst$kw$line,2964,cljs.core.cst$kw$column,1,cljs.core.cst$kw$file,"cljs/core.cljc",cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_refer_DASH_clojure,cljs.core.cst$kw$ns,cljs.core.cst$sym$cljs$core,cljs.core.cst$kw$macro,true], null)]),cljs.core.cst$sym$cljs$core,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$StringBuffer,cljs.core.cst$sym$goog$string$StringBuffer], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$sym$gstring,cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$Uri,cljs.core.cst$sym$garray,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$math$Integer,cljs.core.cst$sym$StringBuffer,cljs.core.cst$sym$gobject,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$math$Long],[cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$string,cljs.core.cst$sym$goog$Uri,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$math$Integer,cljs.core.cst$sym$goog$string$StringBuffer,cljs.core.cst$sym$goog$object,cljs.core.cst$sym$goog$array,cljs.core.cst$sym$goog$math$Long]),null,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentHashSet,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentHashSet."], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$sort_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientAssociative,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding associativity to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_meta_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_hash_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),cljs.core.cst$kw$doc,"Support so that collections can implement toString without\n   loading all the printing machinery."], null)),cljs.core.with_meta(cljs.core.cst$sym$eduction,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform_STAR_,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_remainder_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$uuid,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."], null)),cljs.core.with_meta(cljs.core.cst$sym$Volatile,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$IUUID,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"A marker protocol for UUIDs",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.cst$sym$INIT,cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$contains_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."], null)),cljs.core.with_meta(cljs.core.cst$sym$every_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if (pred x) is logical true for every x in coll, else\n  false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6IteratorSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ES6IteratorSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$Var,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keep_DASH_indexed,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueueSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentQueueSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$subs,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IFind,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for implementing entry finding in collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$set,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a set of the distinct elements of coll."], null)),cljs.core.cst$sym$MODULE_URIS,cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_indexed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Compare indexed collection.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_last,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."], null)),cljs.core.with_meta(cljs.core.cst$sym$IndexedSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_set,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Set bit at index n"], null)),cljs.core.cst$sym$string_DASH_hash_DASH_cache_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Eduction,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Eduction."], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_add,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6SetEntriesIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ES6SetEntriesIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_cache,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMapIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentArrayMapIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMapIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$butlast,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a seq of all but the last item in coll, in linear time"], null)),cljs.core.with_meta(cljs.core.cst$sym$tail_DASH_off,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_subtract_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$kw$doc,"Returns an iterator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_namespace_DASH_maps_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true."], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_nth,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$native_DASH_satisfies_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeq"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_global_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$UUID,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$println_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"println to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),cljs.core.cst$kw$doc,"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"], null)),cljs.core.with_meta(cljs.core.cst$sym$linear_DASH_traversal_DASH_nth,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$iterate,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",cljs.core.cst$kw$added,"1.0"], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aget_SINGLEQUOTE_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$goog_SLASH_isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$newline,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a newline using *print-fn*",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ILookup,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for looking up a value in a data structure.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$write_DASH_all,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$fn_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Return true if f is a JavaScript function or satisfies the Fn protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$doall,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two keywords are identical."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_err_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_aset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prefers,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of preferred value -> set of other values"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$LazySeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$dedupe,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_editable_DASH_array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6Iterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ES6Iterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$VectorNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$dissoc,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$atom,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null))),cljs.core.cst$kw$doc,"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right"], null)),cljs.core.with_meta(cljs.core.cst$sym$MapEntry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.cst$sym$_STAR_clojurescript_DASH_version_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$peek,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$IKVReduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$iter_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$aget,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$doc,"Returns the value at the index/indices. Works on JavaScript arrays.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeMapSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Writes s with writer and returns the result.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$mk_DASH_bound_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$last,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return the last item in coll, in linear time"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_seq_DASH_push,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the namespace String of a symbol or keyword, or nil if not present."], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_DASH_unordered_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new object map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICollection,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$NodeSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_EQ_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding mapping functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$push_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$take,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vector_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IVector"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_equiv_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bitmap_DASH_indexed_DASH_node_DASH_index,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$boolean,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to boolean"], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunk,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the items of a chunk.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift left"], null)),cljs.core.with_meta(cljs.core.cst$sym$random_DASH_uuid,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$any_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if given any argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$rand_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random integer between 0 (inclusive) and n (exclusive)."], null)),cljs.core.with_meta(cljs.core.cst$sym$aclone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$doc,"Returns a javascript array, cloned from the passed in array"], null)),cljs.core.with_meta(cljs.core.cst$sym$BlackNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$vreset_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$UNREALIZED_DASH_SEED,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$dec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than num."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransformerIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/TransformerIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$APersistentVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$juxt,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueueIter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentQueueIter."], null)),cljs.core.with_meta(cljs.core.cst$sym$_LT_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_eval_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated.",cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$inode_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map_DASH__GT_hash_DASH_map,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$test,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_data,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMapSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$isa_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$boolean_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Boolean"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,cljs.core.cst$kw$doc,"Creates a clone of value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$munge,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_DASH_ordered_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$DEMUNGE_MAP,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6IteratorSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NeverEquiv,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/NeverEquiv."], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive matches of re in s."], null)),cljs.core.with_meta(cljs.core.cst$sym$char_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string of length one."], null)),cljs.core.with_meta(cljs.core.cst$sym$make_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Creates a hierarchy object for use with derive, isa? etc."], null)),cljs.core.with_meta(cljs.core.cst$sym$Symbol,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.cst$sym$PROTOCOL_SENTINEL,cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_push_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReduce,cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ICounted,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_DASH_vals_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.",cljs.core.cst$kw$added,"1.9",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keep,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$char,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to char"], null)),cljs.core.with_meta(cljs.core.cst$sym$mapcat,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$added,"1.0",cljs.core.cst$kw$static,true,cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_long,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null)),cljs.core.cst$sym$m3_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$some_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is not nil, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_negate,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_tap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Remove f from the tap set."], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two symbols are identical."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_command_DASH_line_DASH_args_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"A sequence of the supplied command line arguments, or nil if\n  none were supplied"], null)),cljs.core.with_meta(cljs.core.cst$sym$reverse,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reverse order. Not lazy."], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies Inst"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core3354,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta3355], null))),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/t_cljs$core3354."], null)),cljs.core.with_meta(cljs.core.cst$sym$range,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Counts the number of bits set in n"], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_node,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sort,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MetaFn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/MetaFn."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_inc_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IComparable,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$map_DASH_indexed,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_list,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$rand_DASH_nth,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."], null)),cljs.core.with_meta(cljs.core.cst$sym$comp,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_chunk,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's dispatch-fn."], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"DEPRECATED: Bitwise shift right with zero fill"], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dorun,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_sequential_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$accumulating_DASH_seq_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IIndexed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide indexed-based access to their items.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$disj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$MultiIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$IPrintWithWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_UUID,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/UUID."], null)),cljs.core.with_meta(cljs.core.cst$sym$IVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding vector functionality to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IIterable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for iterating over a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MultiIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/MultiIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_2,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$eval,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$form], null))),cljs.core.cst$kw$doc,"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core/*eval* for that environment."], null)),cljs.core.with_meta(cljs.core.cst$sym$Eduction,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_clone_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$cons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeSet,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashSetIter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/HashSetIter."], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_lookup,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$floats,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientVector,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pos_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is greater than zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$fnil,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null))),cljs.core.cst$kw$doc,"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$merge_DASH_with,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$nthrest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth rest of coll, coll when n is 0."], null)),cljs.core.cst$sym$_STAR_warn_DASH_on_DASH_infer_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IFind,cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sequential_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISequential"], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_replace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aset_SINGLEQUOTE_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$goog_SLASH_isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_mix_DASH_H1,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RecordIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientArrayMap,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/TransientArrayMap."], null)),cljs.core.with_meta(cljs.core.cst$sym$prim_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_level_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$shuffle,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random permutation of coll"], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkedSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_keyword,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$find,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),cljs.core.with_meta(cljs.core.cst$sym$alength,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),cljs.core.cst$kw$doc,"Returns the length of the array. Works on arrays of all types."], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_xor,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise exclusive or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_IndexedSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/IndexedSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$ObjMap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unsigned_DASH_bit_DASH_shift_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right with zero fill"], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6SetEntriesIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$neg_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is less than zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$Cons,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_StringIter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/StringIter."], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_invoke,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_List,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/List."], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_mix_DASH_K1,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Iterate,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_float,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$undefined_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x identical to the JavaScript undefined value."], null)),cljs.core.with_meta(cljs.core.cst$sym$IMeta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the metadata of an object.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduced_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),cljs.core.cst$kw$doc,"Returns true if x is the result of a call to reduced"], null)),cljs.core.with_meta(cljs.core.cst$sym$apply_DASH_to,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$disj_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ILookup,cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$float_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$ICloneable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for cloning a value.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IEncodeClojure,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$booleans,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayList,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ArrayList."], null)),cljs.core.with_meta(cljs.core.cst$sym$RSeq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$mask,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$int_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_and_DASH_cache_DASH_best_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ISet"], null)),cljs.core.with_meta(cljs.core.cst$sym$iterable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x implements IIterable protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$cat,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ES6EntriesIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ES6EntriesIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$divide,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved_DASH_arr,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_from_DASH_indexed_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$maybe_DASH_init_DASH_tapset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$take_DASH_while,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vary_DASH_meta,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$INext,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the next items of a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$is_proto_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$START,cljs.core.with_meta(cljs.core.cst$sym$ICounted,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to count a collection in constant time.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IMapEntry,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for examining a map entry.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_LT__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.cst$sym$MODULE_INFOS,cljs.core.with_meta(cljs.core.cst$sym$conj_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_identical_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$repeatedly,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$zipmap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Returns a map with the keys mapped to the corresponding vals."], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_vals_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.",cljs.core.cst$kw$added,"1.9"], null)),cljs.core.with_meta(cljs.core.cst$sym$IStack,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IVolatile,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding volatile functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$remove,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_BitmapIndexedNode,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/BitmapIndexedNode."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_pattern,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns an instance of RegExp which has compiled the provided string."], null)),cljs.core.with_meta(cljs.core.cst$sym$min,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the least of the nums.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_append,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$_STAR_unchecked_DASH_arrays_STAR_,cljs.core.with_meta(cljs.core.cst$sym$prn_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr-str followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IReversible,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for reversing a seq.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reversible_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies? IReversible."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPending,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$conj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$flatten1,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"], null)),cljs.core.with_meta(cljs.core.cst$sym$transduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISwap,cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args).",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_length_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_delete,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$truth_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MultiFn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/MultiFn."], null)),cljs.core.with_meta(cljs.core.cst$sym$key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IEncodeJS,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$new_DASH_path,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_and_DASH_set_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_copy_DASH_downward,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pack_DASH_array_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$interleave,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the first item in each coll, then the second etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$map_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IMap"], null)),cljs.core.cst$sym$m3_DASH_C1,cljs.core.with_meta(cljs.core.cst$sym$get,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$identity,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns its argument."], null)),cljs.core.with_meta(cljs.core.cst$sym$into,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null))),cljs.core.cst$kw$doc,"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$long,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null)),cljs.core.with_meta(cljs.core.cst$sym$double,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$volatile_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a volatile."], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkBuffer,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$HashSetIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the key of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nfirst,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (first x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$StringBufferWriter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the metadata of obj, returns nil if there is no metadata."], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_editable_DASH_tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IHash,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding hashing functionality to a type.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_and_DASH_not,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and with complement",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$var_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if v is of type cljs.core.Var"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the comparator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_add_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_ordered_DASH_coll,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$extend_DASH_object_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),cljs.core.cst$kw$doc,"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."], null)),cljs.core.with_meta(cljs.core.cst$sym$do_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_DASH_meta_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Atomically resets the metadata for an atom"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_KeySeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/KeySeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$IEquiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding value comparison functionality to a type.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$cycle,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!) sequence of repetitions of the items in coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$kw$doc,"Returns the value of the reference o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer_DASH_ex_DASH_info,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$empty_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$TaggedLiteral,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$short,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Returns the first chunk in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$add_DASH_tap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap"], null)),cljs.core.with_meta(cljs.core.cst$sym$filterv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TaggedLiteral,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/TaggedLiteral."], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_editable_DASH_root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."], null)),cljs.core.with_meta(cljs.core.cst$sym$quot,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"quot[ient] of dividing numerator by denominator."], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_interns_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),cljs.core.cst$kw$doc,"Returns a map of the intern mappings for the namespace.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_double,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_target_STAR_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.",cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkedCons,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ChunkedCons."], null)),cljs.core.with_meta(cljs.core.cst$sym$ranged_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientVector,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding vector functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$longs,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not_EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Same as (not (= obj1 obj2))",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_print_DASH_err_DASH_fn_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-err-fn* to f."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string."], null)),cljs.core.with_meta(cljs.core.cst$sym$uri_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true x is a goog.Uri instance.",cljs.core.cst$kw$added,"1.9"], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_iterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$Delay,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$munge_DASH_str,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects to a string, observing all the\n  options given in opts"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RecordIter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/RecordIter."], null)),cljs.core.cst$sym$m3_DASH_C2,cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Symbol,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Symbol."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_newline_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_multiply_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tapset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_all_DASH_methods,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Removes all of the methods of multimethod."], null)),cljs.core.with_meta(cljs.core.cst$sym$trampoline,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$double_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_1,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$vec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Cycle,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$all,cljs.core.cst$sym$prev,cljs.core.with_meta(cljs.core.cst$sym$current,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Cycle."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_meta_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$MultiFn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$NONE,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ValSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ValSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$map_DASH_entry_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies IMapEntry"], null)),cljs.core.with_meta(cljs.core.cst$sym$rand,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$second,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns_DASH_obj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$IEditableCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections which can transformed to transients.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_combine,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_GT_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$kw$doc,"Returns the name String of x.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$replace,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Subvec,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Subvec."], null)),cljs.core.with_meta(cljs.core.cst$sym$associative_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements IAssociative"], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),cljs.core.cst$kw$doc,"Return the JavaScript keys for an object."], null)),cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6EntriesIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Keyword"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$force,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"], null)),cljs.core.with_meta(cljs.core.cst$sym$group_DASH_by,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReversible,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr followed by (newline).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_pop_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's default-dispatch-val."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Atom,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Atom."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentHashMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_multiply,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the product of nums. (*) returns 1.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNodeSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$even_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is even, throws an exception if n is not an integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_iterator_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_dec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null)),cljs.core.with_meta(cljs.core.cst$sym$Inst,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_collision_DASH_node_DASH_find_DASH_index,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$persistent_DASH_array_DASH_map_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RangeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$tagged_DASH_literal_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if the value is the data representation of a tagged literal"], null)),cljs.core.with_meta(cljs.core.cst$sym$double_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_ns,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Create a new namespace named by the symbol. Bootstrap only.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_EmptyList,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/EmptyList."], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$spread,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$rseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),cljs.core.cst$kw$doc,"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_cause,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$IReset,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding resetting functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IEmptyableCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for creating an empty collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map_DASH_index_DASH_of,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_message,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NodeIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/NodeIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_fn_DASH_bodies_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-fns-bodies* controls whether functions print their source or\n    only their names."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_DASH_print,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$float,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IRecord,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a record object",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_str,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first_DASH_array_DASH_for_DASH_longvec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_set_DASH_entries_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$concat,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null))),cljs.core.cst$kw$doc,"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_reserved,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IDerefWithTimeout,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Symbol with the given namespace and name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$to_DASH_array_DASH_2d,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."], null)),cljs.core.with_meta(cljs.core.cst$sym$Subvec,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ExceptionInfo,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$mod,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ISet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding set functionality to a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."], null)),cljs.core.with_meta(cljs.core.cst$sym$IPending,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the key for entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$CHAR_MAP,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pop_DASH_tail,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"Returns a transient map that doesn't contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reductions,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$indexed_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements nth in constant time"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Cycle,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RangeIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/RangeIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNode,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ArrayNode."], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$reduce_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."], null)),cljs.core.with_meta(cljs.core.cst$sym$reset_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval without regard for the\n  current value. Returns new-value."], null)),cljs.core.with_meta(cljs.core.cst$sym$name,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RedNode,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/RedNode."], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Fn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ffirst,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (first x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNodeIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ArrayNodeIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects using string-print, observing all\n  the options given in opts"], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentTreeMap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$strip_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeMap,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentTreeMap."], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_reduce,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$counted_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements count in constant time"], null)),cljs.core.with_meta(cljs.core.cst$sym$tagged_DASH_literal,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),cljs.core.cst$kw$doc,"Construct a data representation of a tagged literal from a\n  tag symbol and a form."], null)),cljs.core.with_meta(cljs.core.cst$sym$println,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as print followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc_DASH_in,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentHashSet,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_test,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Test bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Namespace,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Namespace."], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientHashMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentHashMap,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentHashMap."], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_extend_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ISwap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding swapping functionality.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ChunkedCons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$memoize,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."], null)),cljs.core.with_meta(cljs.core.cst$sym$alter_DASH_meta_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_StringBufferWriter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/StringBufferWriter."], null)),cljs.core.with_meta(cljs.core.cst$sym$zero_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is zero, else false"], null)),cljs.core.with_meta(cljs.core.cst$sym$tv_DASH_ensure_DASH_editable,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_indexOf,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_main_DASH_cli_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVector,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_dec_DASH_int,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_imap,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$dominates,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_print_DASH_fn_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-fn* to f."], null)),cljs.core.with_meta(cljs.core.cst$sym$nnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$Box,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_right,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$throw_DASH_no_DASH_method_DASH_error,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge_DASH_str,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$add_DASH_watch,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_every_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for every x in\n  coll, else true."], null)),cljs.core.with_meta(cljs.core.cst$sym$rem,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"remainder of dividing numerator by denominator."], null)),cljs.core.with_meta(cljs.core.cst$sym$ifind_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements IFind"], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_sb_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashMapIter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/HashMapIter."], null)),cljs.core.with_meta(cljs.core.cst$sym$BitmapIndexedNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_NodeSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/NodeSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$some,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"], null)),cljs.core.with_meta(cljs.core.cst$sym$INamed,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding a name.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Box,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Box."], null)),cljs.core.with_meta(cljs.core.cst$sym$IReduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$neg_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is negative."], null)),cljs.core.with_meta(cljs.core.cst$sym$drop,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$NodeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_obj,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientCollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding basic functionality to transient collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Atom,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISorted"], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is nil, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$split_DASH_at,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take n coll) (drop n coll)]"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_t_cljs$core1394,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta1395], null))),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/t_cljs$core1394."], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientHashSet,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_e,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl"], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map_DASH_extend_DASH_kv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$prn_DASH_str_DASH_with_DASH_opts,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Same as pr-str-with-opts followed by (newline)"], null)),cljs.core.cst$sym$not_DASH_native,cljs.core.with_meta(cljs.core.cst$sym$random_DASH_sample,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$select_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),cljs.core.cst$kw$doc,"Returns a map containing only those entries in map whose key is in keys"], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_and,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bounded_DASH_count,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",cljs.core.cst$kw$added,"1.9"], null)),cljs.core.with_meta(cljs.core.cst$sym$update,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$gensym_counter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_macros_DASH_ns,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$list_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_keyword_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Keyword,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Keyword."], null)),cljs.core.with_meta(cljs.core.cst$sym$update_DASH_in,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),cljs.core.cst$kw$doc,"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_symbol,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ensure_DASH_reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is already reduced?, returns it, else returns (reduced x)"], null)),cljs.core.with_meta(cljs.core.cst$sym$edit_DASH_and_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMap,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentArrayMap."], null)),cljs.core.with_meta(cljs.core.cst$sym$instance_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$mix_DASH_collection_DASH_hash,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),cljs.core.cst$kw$doc,"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_find,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."], null)),cljs.core.with_meta(cljs.core.cst$sym$run_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$char_DASH_escapes,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ES6Iterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_add,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$transformer_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is logical false, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$fn_DASH__GT_comparator,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."], null)),cljs.core.with_meta(cljs.core.cst$sym$with_DASH_meta,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unreduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is reduced?, returns (deref x), else returns x"], null)),cljs.core.with_meta(cljs.core.cst$sym$record_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IRecord"], null)),cljs.core.with_meta(cljs.core.cst$sym$type,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return x's constructor."], null)),cljs.core.with_meta(cljs.core.cst$sym$identical_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Tests if 2 arguments are the same object"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$kw$doc,"Returns the namespace String of x.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_divide_DASH_int,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ns_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Returns the name of the namespace, a Namespace object.\n  Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_DASH_global_DASH_hierarchy_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$max_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is greatest.\n  \n  If there are multiple such xs, the last one is returned.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeSet,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentTreeSet."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_out_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkBuffer,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ChunkBuffer."], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_string,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ValSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$set_DASH_validator_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."], null)),cljs.core.with_meta(cljs.core.cst$sym$ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMeta,cljs.core.cst$kw$doc,"Returns the metadata of object o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$RedNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_IndexedSeqIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/IndexedSeqIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_left_DASH_del,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$swap_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$vals,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$Repeat,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Single,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_subtract,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$tap_GT_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value."], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_pair,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IMap,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding mapping functionality to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_SeqIter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/SeqIter."], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_set_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentVector,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 24, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$cloneable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if x implements ICloneable protocol."], null)),cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_string_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$key_DASH_test,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$true_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value true, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$find_DASH_ns_DASH_obj_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null)),cljs.core.with_meta(cljs.core.cst$sym$array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),cljs.core.cst$kw$doc,"Creates a new javascript array.\n@param {...*} var_args"], null)),cljs.core.with_meta(cljs.core.cst$sym$print,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ISeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for collections to provide access to their items as sequences.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll, or nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Removes the method of multimethod associated with dispatch-value."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueueSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$balance_DASH_right_DASH_del,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$volatile_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_SLASH_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$bitpos,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Many,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_or,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_fmix,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$vector,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_coll,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$clone_DASH_and_DASH_set,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH__GT_transient_DASH_hash_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_GT__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientHashSet,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/TransientHashSet."], null)),cljs.core.with_meta(cljs.core.cst$sym$drop_DASH_last,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a lazy sequence of all but the last n (default 1) items in coll",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayIter,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ArrayIter."], null)),cljs.core.with_meta(cljs.core.cst$sym$object_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x's constructor is Object"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayNodeSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ArrayNodeSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$lift_DASH_ns,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Returns [lifted-ns lifted-map] or nil if m can't be lifted."], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_append,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is empty, returns nil, else coll"], null)),cljs.core.with_meta(cljs.core.cst$sym$distinct,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partition,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IMultiFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,null,cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Many,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Many."], null)),cljs.core.cst$sym$DEMUNGE_PATTERN,cljs.core.with_meta(cljs.core.cst$sym$fix,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$EmptyList,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$HashMapIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$IAssociative,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding associativity to collections.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Single,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Single."], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_flip,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Flip bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$long_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$descendants,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$imul,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Delay,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Delay."], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_for,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$merge,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ISeqable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to a type to be transformed into a sequence.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Empty,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$js_DASH_mod,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"], null)),cljs.core.with_meta(cljs.core.cst$sym$integer_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is a JavaScript number with no decimal part."], null)),cljs.core.with_meta(cljs.core.cst$sym$MetaFn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$NS_CACHE,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$mapv,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$infinite_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for Infinity and -Infinity values."], null)),cljs.core.with_meta(cljs.core.cst$sym$partition_DASH_all,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partition_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ISequential,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a persistent collection of sequential items",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_LazySeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/LazySeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$equiv_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Test map equivalence. Returns true if x equals y, otherwise returns false."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Volatile,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Volatile."], null)),cljs.core.with_meta(cljs.core.cst$sym$object_DASH_array,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$Keyword,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$derive,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$seq_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Empty,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Empty."], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunkedSeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing a collection as sequential chunks.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$special_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x names a special form"], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_keywords,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ancestors,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$subseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$gensym,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null))),cljs.core.cst$kw$doc,"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_INext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_HashCollisionNode,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/HashCollisionNode."], null)),cljs.core.with_meta(cljs.core.cst$sym$delay_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"returns true if x is a Delay created with delay"], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_inode_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$flatten,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMap,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$doubles,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$halt_DASH_when,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null))),cljs.core.cst$kw$doc,"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.",cljs.core.cst$kw$added,"1.9",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$kw$doc,"Returns true if k is a key in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Removes a watch (set by add-watch) from a reference"], null)),cljs.core.with_meta(cljs.core.cst$sym$ex_DASH_info,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),cljs.core.cst$kw$doc,"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ifn_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns true if f returns true for fn? or satisfies IFn."], null)),cljs.core.with_meta(cljs.core.cst$sym$IAtom,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol indicating an atom.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentQueue,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentQueue."], null)),cljs.core.with_meta(cljs.core.cst$sym$nat_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is a natural integer value."], null)),cljs.core.with_meta(cljs.core.cst$sym$IWatchable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for types that can be watched. Currently only implemented by Atom.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_fresh_DASH_node,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$subvec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core3354,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$partial,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunked_DASH_seq_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is satisfies IChunkedSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$replicate,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueue,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$min_DASH_key,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_iset,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Wraps x in a way such that a reduce will terminate with the value x"], null)),cljs.core.with_meta(cljs.core.cst$sym$re_DASH_matches,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the result of (re-find re s) if re fully matches s."], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer_DASH_impl,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new array map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ITransientSet,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding set functionality to a transient collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)])], null)], null)),cljs.core.cst$sym$ITER_SYMBOL,cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_byte,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNode,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ChunkedSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ChunkedSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$every_DASH_pred,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$keys,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$missing_DASH_protocol,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$load_DASH_file,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentArrayMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$distinct_QMARK_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns true if no two of the arguments are =",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pos_DASH_int_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is positive."], null)),cljs.core.with_meta(cljs.core.cst$sym$never_DASH_equiv,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_short,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Range,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Range."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_MapEntry,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/MapEntry."], null)),cljs.core.with_meta(cljs.core.cst$sym$apply_DASH_to_DASH_simple,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null))),cljs.core.cst$kw$doc,"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$methods,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of dispatch values -> dispatch fns"], null)),cljs.core.with_meta(cljs.core.cst$sym$odd_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is odd, throws an exception if n is not an integer"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ArrayChunk,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ArrayChunk."], null)),cljs.core.with_meta(cljs.core.cst$sym$ci_DASH_reduce,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$doc,"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_3,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Var,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Var."], null)),cljs.core.with_meta(cljs.core.cst$sym$frequencies,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map from distinct items in coll to the number of times\n  they appear."], null)),cljs.core.with_meta(cljs.core.cst$sym$reduceable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies IReduce"], null)),cljs.core.cst$sym$string_DASH_hash_DASH_cache,cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Iterate,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$f,cljs.core.cst$sym$prev_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$seed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Iterate."], null)),cljs.core.with_meta(cljs.core.cst$sym$rsubseq,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$inc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one greater than num."], null)),cljs.core.with_meta(cljs.core.cst$sym$type_DASH__GT_str,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_method,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"], null)),cljs.core.with_meta(cljs.core.cst$sym$uuid_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$vector_DASH_index_DASH_out_DASH_of_DASH_bounds,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$es6_DASH_entries_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_clear,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Clear bit at index n"], null)),cljs.core.with_meta(cljs.core.cst$sym$Range,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$filter,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentTreeMapSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentTreeMapSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_array_DASH_node_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IWithMeta,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding metadata to an object.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$list,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_PLUS_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the sum of nums. (+) returns 0.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IndexedSeqIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$split_DASH_with,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_VectorNode,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/VectorNode."], null)),cljs.core.with_meta(cljs.core.cst$sym$aset,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$doc,"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$int_DASH_rotate_DASH_left,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$keyword,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Cons,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Cons."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_ns_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the current namespace. Only used for bootstrapping.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_assert_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$create_DASH_tree_DASH_map_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ICollection,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding to a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null))),cljs.core.cst$kw$doc,"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"], null)),cljs.core.with_meta(cljs.core.cst$sym$ASeq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker protocol indicating an array sequence.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_seq_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$SeqIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$IFn,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$regexp_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript RegExp instance."], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_exec_DASH_tap_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$doc,"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise.",cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$underive,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_copy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$obj_DASH_map_DASH_compare_DASH_keys,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$kw$doc,"Sets the value of o to new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$false_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value false, false otherwise."], null)),cljs.core.with_meta(cljs.core.cst$sym$RangedIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_readably_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"], null)),cljs.core.with_meta(cljs.core.cst$sym$ints,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$some_DASH_fn,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge_DASH_pattern,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$maybe_DASH_enable_DASH_print_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_flush_DASH_on_DASH_newline_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."], null)),cljs.core.with_meta(cljs.core.cst$sym$to_DASH_array,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$build_DASH_subvec,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$maybe_DASH_warn,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$Namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$list_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x implements IList"], null)),cljs.core.with_meta(cljs.core.cst$sym$tree_DASH_map_DASH_remove,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$PersistentQueueIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$HashCollisionNode,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$array_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript array."], null)),cljs.core.with_meta(cljs.core.cst$sym$prefers_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$simple_DASH_ident_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword without a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Clone the supplied value which must implement ICloneable."], null)),cljs.core.with_meta(cljs.core.cst$sym$scan_DASH_array,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$demunge,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bit_DASH_not,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Bitwise complement"], null)),cljs.core.with_meta(cljs.core.cst$sym$quote_DASH_string,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$byte,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$max,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the greatest of the nums.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Repeat,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Repeat."], null)),cljs.core.with_meta(cljs.core.cst$sym$IComparable,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for values that can be compared.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_EQ__EQ_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$parents,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,cljs.core.cst$kw$doc,"Returns tcoll without v.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_loaded_DASH_libs_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$EMPTY,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientHashMap,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/TransientHashMap."], null)),cljs.core.with_meta(cljs.core.cst$sym$array_DASH_index_DASH_of_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayChunk,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_map_DASH_by,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$apply,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_global_DASH_hierarchy,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)),cljs.core.with_meta(cljs.core.cst$sym$add_DASH_to_DASH_string_DASH_hash_DASH_cache,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$TransientArrayMap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$t_cljs$core1394,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_TransientVector,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/TransientVector."], null)),cljs.core.with_meta(cljs.core.cst$sym$IChunkedNext,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for accessing the chunks of a collection.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$interpose,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$TransformerIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_BlackNode,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/BlackNode."], null)),cljs.core.with_meta(cljs.core.cst$sym$deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$pv_DASH_aget,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$assoc,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISet,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_cons,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$comparator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),cljs.core.cst$kw$doc,"Returns an JavaScript compatible comparator based upon pred."], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_prefix_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$sorted_DASH_map,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$drop_DASH_while,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$IWriter,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for writing. Currently only implemented by StringBufferWriter.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$KeySeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$realized_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if a value has been produced for a delay or lazy sequence."], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_fn_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null)),cljs.core.with_meta(cljs.core.cst$sym$compare,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$complement,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."], null)),cljs.core.with_meta(cljs.core.cst$sym$lookup_DASH_sentinel,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$private,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_STAR_print_DASH_dup_STAR_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."], null)),cljs.core.with_meta(cljs.core.cst$sym$string_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$IDeref,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for adding dereference functionality to a reference.",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$sequence,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$constantly,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a function that takes any number of arguments and returns x."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RangedIterator,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null,cljs.core.cst$kw$doc,"Positional factory function for cljs.core/RangedIterator."], null)),cljs.core.with_meta(cljs.core.cst$sym$chunked_DASH_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$ISorted,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Protocol for a collection which can represent their items\n  in a sorted manner. ",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$make_DASH_array,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null))),cljs.core.cst$kw$doc,"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$checked_DASH_aget,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$shorts,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.cst$sym$_STAR_unchecked_DASH_if_STAR_,cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_RSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/RSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$enable_DASH_console_DASH_print_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Set *print-fn* to console.log"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Flush writer.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_lastIndexOf,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$completing,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null))),cljs.core.cst$kw$doc,"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_negate_DASH_int,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentVector,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 24, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentVector."], null)),cljs.core.with_meta(cljs.core.cst$sym$equiv_DASH_sequential,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$hash_DASH_unordered_DASH_coll,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."], null)),cljs.core.with_meta(cljs.core.cst$sym$repeat,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_inc,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$nthnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth next of coll, (seq coll) when n is 0."], null)),cljs.core.with_meta(cljs.core.cst$sym$preserving_DASH_reduced,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_validator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),cljs.core.cst$kw$doc,"Gets the validator-fn for a var/ref/agent/atom."], null)),cljs.core.with_meta(cljs.core.cst$sym$StringIter,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$number_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript number."], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_PersistentArrayMapSeq,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/PersistentArrayMapSeq."], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayList,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$print_DASH_str,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"print to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$not_DASH_any_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for any x in coll,\n  else true."], null)),cljs.core.with_meta(cljs.core.cst$sym$into_DASH_array,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$kw$doc,"Returns the hash code of o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$qualified_DASH_symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol with a namespace"], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_Reduced,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/Reduced."], null)),cljs.core.with_meta(cljs.core.cst$sym$chunk_DASH_buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$seqable_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if the seq function is supported for s"], null)),cljs.core.with_meta(cljs.core.cst$sym$symbol_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Symbol"], null)),cljs.core.with_meta(cljs.core.cst$sym$m3_DASH_hash_DASH_unencoded_DASH_chars,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$unchecked_DASH_char,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$system_DASH_time,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Returns highest resolution time offered by host in milliseconds."], null)),cljs.core.with_meta(cljs.core.cst$sym$NeverEquiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)], null)),cljs.core.with_meta(cljs.core.cst$sym$chunkIteratorSeq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$coll_QMARK_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ICollection"], null)),cljs.core.with_meta(cljs.core.cst$sym$get_DASH_in,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$added,"1.2",cljs.core.cst$kw$static,true,cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."], null)),cljs.core.with_meta(cljs.core.cst$sym$fnext,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null)),cljs.core.with_meta(cljs.core.cst$sym$IList,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$doc,"Marker interface indicating a persistent list",cljs.core.cst$kw$protocol_DASH_symbol,true,cljs.core.cst$kw$jsdoc,cljs.core.list("@interface"),cljs.core.cst$kw$protocol_DASH_info,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)], null)),cljs.core.with_meta(cljs.core.cst$sym$ArrayNodeIterator,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,null], null)),cljs.core.with_meta(cljs.core.cst$sym$List,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$declared,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the value of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$bytes,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH__GT_ObjMap,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/ObjMap."], null)),cljs.core.with_meta(cljs.core.cst$sym$compare_DASH_symbols,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null))],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,9042,9042,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentHashSet."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentHashSet,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9042,9042,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentHashSet."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10558,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10558,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH__GT_clj,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10558,10558,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$opts], null)),"Recursively transforms JavaScript arrays into ClojureScript\n  vectors, and JavaScript objects into ClojureScript maps.  With\n  option ':keywordize-keys true' will convert object fields from\n  strings to keywords."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2428,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2428,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sort_DASH_by,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2428,2428,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyfn,cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll, where the sort\n   order is determined by comparing (keyfn item).  Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",793,14,793,35,"Protocol for adding associativity to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,"cljs/core.cljs",35,1,793,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)], null)])], null),null,793,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null], null), null),"Protocol for adding associativity to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3596,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3596,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_first,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3596,3596,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9901,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9901,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_meta_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,9901,cljs.core.cst$sym$boolean,9901,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts,cljs.core.cst$sym$obj], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,929,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,929,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_hash_DASH_int,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)),null,cljs.core.list(null,null),1,929,cljs.core.cst$sym$number,929,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,877,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,877,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),cljs.core.cst$kw$doc,"Support so that collections can implement toString without\n   loading all the printing machinery."], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str_STAR_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null)),null,cljs.core.list(null,null),1,877,877,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$obj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null))], null))),"Support so that collections can implement toString without\n   loading all the printing machinery."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10493,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10493,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform_STAR_,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_eduction,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xforms)], null),null,cljs.core.list(null),1,10493,10493,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xforms], null)),"Returns a reducible/iterable application of the transducers\n  to the items in coll. Transducers are applied in order as if\n  combined with comp. Note that these applications will be\n  performed every time reduce/iterator is called."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5136,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5136,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."], null),cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_seq,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null)),null,cljs.core.list(null,null),1,5136,5136,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$branch_QMARK_,cljs.core.cst$sym$children,cljs.core.cst$sym$root], null))),"Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n  branch? must be a fn of one arg that returns true if passed a node\n  that can have children (but may not).  children must be a fn of one\n  arg that returns a sequence of the children. Will only be called on\n  nodes for which branch? returns true. Root is the root node of the\n  tree."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2755,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2755,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_remainder_DASH_int,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2755,2755,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11088,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11088,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_uuid,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,11088,11088,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1202,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1202,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."], null),cljs.core.cst$sym$cljs$core_SLASH_seq,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1202,cljs.core.cst$sym$seq,1202,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq on the collection. If the collection is\n  empty, returns nil.  (seq nil) returns nil. seq also works on\n  Strings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Volatile,"cljs/core.cljs",18,true,10,4518,false,4518,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2485,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2485,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_reduce,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2485,2485,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),"f should be a function of 2 arguments. If val is not supplied,\n  returns the result of applying f to the first 2 items in coll, then\n  applying f to that result and the 3rd item, etc. If coll contains no\n  items, f must accept no arguments as well, and reduce returns the\n  result of calling f with no arguments.  If coll has only 1 item, it\n  is returned and f is not called.  If val is supplied, returns the\n  result of applying f to val and the first item in coll, then\n  applying f to that result and the 2nd item, etc. If coll contains no\n  items, returns val and f is not called."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",11060,14,11060,19,"A marker protocol for UUIDs",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IUUID,"cljs/core.cljs",19,1,11060,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,11060,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_UUID,null], null), null),"A marker protocol for UUIDs",cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_INIT,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3991,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,3991,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3991,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,3991,cljs.core.cst$kw$end_DASH_column,10], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11453,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11453,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,11453,11453,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Returns the namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2317,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2317,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."], null),cljs.core.cst$sym$cljs$core_SLASH_contains_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,2317,cljs.core.cst$sym$boolean,2317,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),"Returns true if key is present in the given collection, otherwise\n  returns false.  Note that for numerically indexed collections like\n  vectors and arrays, this tests if the numeric key is within the\n  range of indexes. 'contains?' operates constant or logarithmic time;\n  it will not perform a linear search for a value.  See also 'some'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4178,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4178,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if (pred x) is logical true for every x in coll, else\n  false."], null),cljs.core.cst$sym$cljs$core_SLASH_every_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4178,cljs.core.cst$sym$boolean,4178,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns true if (pred x) is logical true for every x in coll, else\n  false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),"cljs/core.cljs",24,10,cljs.core.cst$kw$positional,1293,1293,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),"Positional factory function for cljs.core/ES6IteratorSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6IteratorSeq,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1293,1293,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),"Positional factory function for cljs.core/ES6IteratorSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Var,"cljs/core.cljs",13,true,10,1110,false,1110,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4540,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4540,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keep_DASH_indexed,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4540,4540,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f index item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a stateful transducer when no collection is\n  provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"cljs/core.cljs",28,10,cljs.core.cst$kw$positional,6121,6121,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/PersistentQueueSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueueSeq,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6121,6121,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/PersistentQueueSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2951,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2951,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subs,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,2951,2951,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns the substring of s beginning at start inclusive, and ending\n  at end (defaults to length of string), exclusive."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",634,14,634,19,"Protocol for implementing entry finding in collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IFind,"cljs/core.cljs",19,1,634,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_find,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null),null,634,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for implementing entry finding in collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9298,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9298,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a set of the distinct elements of coll."], null),cljs.core.cst$sym$cljs$core_SLASH_set,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9298,9298,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a set of the distinct elements of coll."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_MODULE_URIS,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,39,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,39,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,39,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,39,cljs.core.cst$kw$end_DASH_column,17], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2382,17,2382,32,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null))),"Compare indexed collection.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_indexed,false,"cljs/core.cljs",32,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2382,2382,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xs,cljs.core.cst$sym$ys,cljs.core.cst$sym$len,cljs.core.cst$sym$n], null)),"Compare indexed collection."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4758,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4758,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_last,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4758,4758,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"Returns a seq of the last n items in coll.  Depending on the type\n  of coll may be no better than linear time.  For vectors, see also subvec."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1185,cljs.core.cst$kw$column,29,cljs.core.cst$kw$end_DASH_line,1185,cljs.core.cst$kw$end_DASH_column,39,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,"cljs/core.cljs",20,true,10,1568,false,true,1568,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2866,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2866,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Set bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_set,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2866,2866,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Set bit at index n"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_DASH_hash_DASH_cache_DASH_count,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,956,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,956,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,956,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,956,cljs.core.cst$kw$end_DASH_column,29], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3356,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3356,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_keyword_QMARK_,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3356,cljs.core.cst$sym$boolean,3356,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a keyword with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",18,10,cljs.core.cst$kw$positional,10463,10463,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Eduction."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Eduction,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10463,10463,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Eduction."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8527,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8527,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_add,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)),null,cljs.core.list(null,null),1,8527,8527,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$found], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",31,10,cljs.core.cst$kw$positional,6464,6464,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ES6SetEntriesIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6SetEntriesIterator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6464,6464,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ES6SetEntriesIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",686,9,686,19,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,"Returns a new object with value of o and metadata meta added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,cljs.core.cst$sym$cljs$core_SLASH__DASH_with_DASH_meta,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,684,cljs.core.cst$sym$clj,686,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),"Returns a new object with value of o and metadata meta added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10768,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10768,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_cache,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)),null,cljs.core.list(null,null),1,10768,10768,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$hierarchy], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",36,10,cljs.core.cst$kw$positional,6724,6724,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null))),null,"Positional factory function for cljs.core/PersistentArrayMapIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMapIterator,false,"cljs/core.cljs",36,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6724,6724,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null))),null,"Positional factory function for cljs.core/PersistentArrayMapIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapIterator,"cljs/core.cljs",36,true,10,6724,false,6724,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9376,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9376,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a seq of all but the last item in coll, in linear time"], null),cljs.core.cst$sym$cljs$core_SLASH_butlast,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9376,9376,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return a seq of all but the last item in coll, in linear time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5309,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5309,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tail_DASH_off,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)),null,cljs.core.list(null,null),1,5309,5309,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2765,15,2765,37,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract_DASH_int,true,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2765,cljs.core.cst$sym$number,2765,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,867,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,867,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$kw$doc,"Returns an iterator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IIterable,cljs.core.cst$sym$cljs$core_SLASH__DASH_iterator,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,865,867,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an iterator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,138,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,138,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_namespace_DASH_maps_STAR_,"cljs/core.cljs",25,1,true,132,138,cljs.core.cst$sym$boolean,"*print-namespace-maps* controls whether the printer will print\n  namespace map literal syntax.\n\n  Defaults to false, but the REPL binds it to true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9637,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9637,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_nth,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9637,9637,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of every nth item in coll.  Returns a stateful\n  transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1225,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1225,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_first,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1225,1225,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first item in the collection. Calls seq on its\n  argument. If coll is nil, returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,280,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,280,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null),cljs.core.cst$sym$cljs$core_SLASH_native_DASH_satisfies_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,280,cljs.core.cst$sym$boolean,280,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p,cljs.core.cst$sym$x], null))),"Internal - do not use!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2212,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2212,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if s satisfies ISeq"], null),cljs.core.cst$sym$cljs$core_SLASH_seq_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2212,cljs.core.cst$sym$boolean,2212,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return true if s satisfies ISeq"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10658,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10658,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_global_DASH_hierarchy,"cljs/core.cljs",20,1,10655,10658,cljs.core.cst$sym$clj_DASH_nil,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_UUID,"cljs/core.cljs",14,true,10,11062,false,11062,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",738,9,738,25,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_sorted_DASH_seq_DASH_from,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)),null,cljs.core.list(null,null),1,733,cljs.core.cst$sym$clj,738,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null))),"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10086,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10086,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"println to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_println_DASH_str,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,10086,10086,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"println to a string, returning it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1384,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1384,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),cljs.core.cst$kw$doc,"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"], null),cljs.core.cst$sym$cljs$core_SLASH_inst_DASH_ms,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)),null,cljs.core.list(null,null),1,1384,1384,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),"Return the number of milliseconds since January 1, 1970, 00:00:00 GMT"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1821,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1821,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_linear_DASH_traversal_DASH_nth,false,"cljs/core.cljs",28,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1821,1821,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5032,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5032,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects",cljs.core.cst$kw$added,"1.0"], null),"1.0",cljs.core.cst$sym$cljs$core_SLASH_iterate,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,5032,5032,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null))),"Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,480,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,480,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$goog_SLASH_isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aget_SINGLEQUOTE_,true,"cljs/core.cljs",21,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,480,480,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,577,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,577,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_empty,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,575,577,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10041,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10041,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a newline using *print-fn*",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_newline,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10041,10041,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$opts], null)),"Prints a newline using *print-fn*"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",619,14,619,21,"Protocol for looking up a value in a data structure.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ILookup,"cljs/core.cljs",21,1,619,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_lookup,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)], null)])], null),null,619,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9888,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for looking up a value in a data structure.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,831,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,831,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_rest,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,827,831,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a new collection of coll with the first chunk removed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9869,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9869,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_write_DASH_all,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$writer,cljs.core.cst$sym$ss)], null),null,cljs.core.list(null),1,9869,9869,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ss], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1990,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1990,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Return true if f is a JavaScript function or satisfies the Fn protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_fn_QMARK_,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,1990,cljs.core.cst$sym$boolean,1990,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Return true if f is a JavaScript function or satisfies the Fn protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10827,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10827,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_prefer_DASH_method,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)),null,cljs.core.list(null,null),1,10823,10827,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",630,9,630,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"Returns a new collection of coll with a mapping from key k to\n     value v added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,625,cljs.core.cst$sym$clj,630,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null))),"Returns a new collection of coll with a mapping from key k to\n     value v added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9778,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9778,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_doall,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9778,9778,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. doall can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, retains the head and returns it, thus causing the entire\n  seq to reside in memory at one time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3307,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3307,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two keywords are identical."], null),cljs.core.cst$sym$cljs$core_SLASH_keyword_DASH_identical_QMARK_,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,3307,cljs.core.cst$sym$boolean,3307,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Efficient test to determine that two keywords are identical."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,84,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,84,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_err_DASH_fn_STAR_,"cljs/core.cljs",17,1,true,80,84,cljs.core.cst$sym$clj_DASH_nil,"Each runtime environment provides a different way to print error output.\n  Whatever function *print-err-fn* is bound to will be passed any\n  Strings which should be printed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5303,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5303,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_aset,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,5303,5303,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11047,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11047,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of preferred value -> set of other values"], null),cljs.core.cst$sym$cljs$core_SLASH_prefers,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,11047,11047,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, returns a map of preferred value -> set of other values"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10556,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10556,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,cljs.core.cst$sym$cljs$core_SLASH__DASH_js_DASH__GT_clj,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)),null,cljs.core.list(null,null),1,10555,10556,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null))),"Transforms JavaScript values to Clojure"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_LazySeq,"cljs/core.cljs",17,true,10,3384,false,3384,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10436,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10436,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dedupe,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10436,10436,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence removing consecutive duplicates in coll.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5957,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5957,cljs.core.cst$kw$end_DASH_column,36,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_editable_DASH_array_DASH_for,false,"cljs/core.cljs",36,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,5957,5957,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",21,10,cljs.core.cst$kw$positional,1277,1277,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ES6Iterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6Iterator,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1277,1277,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ES6Iterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH_VectorNode,"cljs/core.cljs",20,true,10,5295,false,5295,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1976,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1976,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dissoc,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null,null),1,1976,1976,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\n  that does not contain a mapping for key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4404,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4404,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null))),cljs.core.cst$kw$doc,"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_atom,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4404,4404,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$validator], null)], null)], null)),"Creates and returns an Atom with an initial value of x and zero or\n  more options (in any order):\n\n  :meta metadata-map\n\n  :validator validate-fn\n\n  If metadata-map is supplied, it will be come the metadata on the\n  atom. validate-fn must be nil or a side-effect-free fn of one\n  argument, which will be passed the intended new state on any state\n  change. If the new state is unacceptable, the validate-fn should\n  return false or throw an Error.  If either of these error conditions\n  occur, then the value of the atom will not change."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2880,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2880,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2880,2880,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift right"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1959,cljs.core.cst$kw$column,47,cljs.core.cst$kw$end_DASH_line,1959,cljs.core.cst$kw$end_DASH_column,55,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MapEntry,"cljs/core.cljs",18,true,10,6555,false,true,6555,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_clojurescript_DASH_version_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,19,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,19,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,19,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,19,cljs.core.cst$kw$end_DASH_column,29], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$string], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,603,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,603,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_first,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,601,603,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first item in the collection coll. Used by cljs.core/first."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2064,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2064,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_peek,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2064,2064,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",697,14,697,23,"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,"cljs/core.cljs",23,1,697,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_kv_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)], null)])], null),null,697,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null], null), null),"Protocol for associative types that can reduce themselves\n  via a function of key and val. Called by cljs.core/reduce-kv.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2462,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2462,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_iter_DASH_reduce,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,2462,2462,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,496,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,496,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$doc,"Returns the value at the index/indices. Works on JavaScript arrays.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_aget,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,496,496,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),"Returns the value at the index/indices. Works on JavaScript arrays."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,"cljs/core.cljs",30,true,10,8066,false,8066,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,752,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,752,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Writes s with writer and returns the result.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_write,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,750,752,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null))),"Writes s with writer and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4015,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4015,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_iter,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4015,4015,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9484,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9484,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_mk_DASH_bound_DASH_fn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,9484,9484,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1761,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1761,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return the last item in coll, in linear time"], null),cljs.core.cst$sym$cljs$core_SLASH_last,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,1761,1761,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return the last item in coll, in linear time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10831,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10831,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_default_DASH_dispatch_DASH_val,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10823,10831,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10059,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10059,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_pr,true,"cljs/core.cljs",9,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,10059,10059,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Prints the object(s) using string-print.  Prints the\n  object(s), separated by spaces if there is more than one.\n  By default, pr and prn print in a way that objects can be\n  read by the reader"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8059,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8059,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_seq_DASH_push,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)),null,cljs.core.list(null,null),1,8059,8059,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null))], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3325,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3325,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the namespace String of a symbol or keyword, or nil if not present."], null),cljs.core.cst$sym$cljs$core_SLASH_namespace,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3325,3325,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the namespace String of a symbol or keyword, or nil if not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_empty_DASH_unordered_DASH_hash,"cljs/core.cljs",1351,1,1351,36,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1351,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1351,cljs.core.cst$kw$end_DASH_column,36,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$number]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8806,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8806,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new object map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8806,8806,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new object map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Reduced,"cljs/core.cljs",17,true,10,1417,false,1417,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",583,9,583,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ICollection,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_conj,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,581,cljs.core.cst$sym$clj,583,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null))),"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,"cljs/core.cljs",17,true,10,7610,false,7610,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",1258,16,1258,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__EQ_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,1258,cljs.core.cst$sym$boolean,1258,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Equality. Returns true if x equals y, false if not. Compares\n  numbers and collections in a type-independent manner.  Clojure's immutable data\n  structures define -equiv (and thus =) as a value, not an identity,\n  comparison."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",799,14,799,27,"Protocol for adding mapping functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,"cljs/core.cljs",27,1,799,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new transient collection of tcoll without the mapping for key."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)], null)])], null),null,799,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null], null), null),"Protocol for adding mapping functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5325,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5325,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_push_DASH_tail,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)),null,cljs.core.list(null,null),1,5325,5325,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tailnode], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4701,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4701,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4701,4701,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the first n items in coll, or all items if\n  there are fewer than n.  Returns a stateful transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2145,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2145,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IVector"], null),cljs.core.cst$sym$cljs$core_SLASH_vector_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2145,cljs.core.cst$sym$boolean,2145,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IVector"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6514,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6514,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_equiv_QMARK_,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6514,6514,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7072,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7072,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_bitmap_DASH_indexed_DASH_node_DASH_index,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)),null,cljs.core.list(null,null),1,7072,7072,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$bitmap,cljs.core.cst$sym$bit], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2227,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2227,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to boolean"], null),cljs.core.cst$sym$cljs$core_SLASH_boolean,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2227,cljs.core.cst$sym$boolean,2227,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to boolean"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",822,14,822,20,"Protocol for accessing the items of a chunk.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunk,"cljs/core.cljs",20,1,822,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_drop_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,822,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null], null), null),"Protocol for accessing the items of a chunk.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2876,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2876,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift left"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_left,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2876,2876,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift left"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11092,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11092,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_random_DASH_uuid,false,"cljs/core.cljs",18,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,11092,11092,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,275,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,275,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if given any argument."], null),cljs.core.cst$sym$cljs$core_SLASH_any_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,275,cljs.core.cst$sym$boolean,275,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if given any argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10628,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10628,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random integer between 0 (inclusive) and n (exclusive)."], null),cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_int,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,10628,10628,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns a random integer between 0 (inclusive) and n (exclusive)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,426,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,426,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),cljs.core.cst$kw$doc,"Returns a javascript array, cloned from the passed in array"], null),cljs.core.cst$sym$cljs$core_SLASH_aclone,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,426,426,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null))),"Returns a javascript array, cloned from the passed in array"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8138,cljs.core.cst$kw$column,18,cljs.core.cst$kw$end_DASH_line,8138,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_BlackNode,"cljs/core.cljs",19,true,10,8238,false,true,8238,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4535,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4535,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."], null),cljs.core.cst$sym$cljs$core_SLASH_vreset_BANG_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,4535,4535,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vol,cljs.core.cst$sym$newval], null))),"Sets the value of volatile to newval without regard for the\n   current value. Returns newval."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3593,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3593,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,3593,3593,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_UNREALIZED_DASH_SEED,"cljs/core.cljs",4974,1,4974,31,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4974,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4974,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2658,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2658,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than num."], null),cljs.core.cst$sym$cljs$core_SLASH_dec,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2658,2658,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than num."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",29,10,cljs.core.cst$kw$positional,4097,4097,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null))),null,"Positional factory function for cljs.core/TransformerIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransformerIterator,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4097,4097,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null))),null,"Positional factory function for cljs.core/TransformerIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",5430,14,5430,31,"Marker protocol",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,"cljs/core.cljs",31,1,5430,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,5430,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null], null), null),"Marker protocol",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4654,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4654,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_map,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),null,cljs.core.list(null,null,null,null,null),1,4654,4654,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy sequence consisting of the result of applying f to\n  the set of first items of each coll, followed by applying f to the\n  set of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments. Returns a transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9729,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9729,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_juxt,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),null,cljs.core.list(null,null,null,null),1,9729,9729,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the juxtaposition\n  of those fns.  The returned fn takes a variable number of args, and\n  returns a vector containing the result of applying each fn to the\n  args (left-to-right).\n  ((juxt a b c) x) => [(a x) (b x) (c x)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",29,10,cljs.core.cst$kw$positional,6106,6106,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null))),null,"Positional factory function for cljs.core/PersistentQueueIter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueueIter,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6106,6106,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null))),null,"Positional factory function for cljs.core/PersistentQueueIter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2610,16,2610,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__LT_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2610,cljs.core.cst$sym$boolean,2610,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically increasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11524,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,11524,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$doc,"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated.",cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_eval_STAR_,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_], null)),null,cljs.core.List.EMPTY,1,true,11520,11524,1,true,null,"Runtime environments may provide a way to evaluate ClojureScript\n  forms. Whatever function *eval* is bound to will be passed any forms which\n  should be evaluated."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7089,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7089,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_inode_DASH_kv_DASH_reduce,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,7089,7089,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6297,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6297,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map_DASH__GT_hash_DASH_map,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6297,6297,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11193,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11193,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"], null),cljs.core.cst$sym$cljs$core_SLASH_test,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,11193,11193,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"test [v] finds fn at key :test in var metadata and calls it,\n  presuming failure will throw exception"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1236,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1236,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."], null),cljs.core.cst$sym$cljs$core_SLASH_rest,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1236,cljs.core.cst$sym$seq,1236,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11157,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11157,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_data,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,11157,11157,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns exception data (a map) if ex is an ExceptionInfo.\n  Otherwise returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,"cljs/core.cljs",31,true,10,6655,false,6655,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,824,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,824,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$kw$doc,"Return a new chunk of coll with the first item removed.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunk,cljs.core.cst$sym$cljs$core_SLASH__DASH_drop_DASH_first,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,822,824,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a new chunk of coll with the first item removed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",10668,16,10668,20,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null))),"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_isa_QMARK_,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,10668,cljs.core.cst$sym$boolean,10668,3,cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$child,cljs.core.cst$sym$parent], null)),"Returns true if (= child parent), or child is directly or indirectly derived from\n  parent, either via a JavaScript type inheritance relationship or a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2203,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2203,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Boolean"], null),cljs.core.cst$sym$cljs$core_SLASH_boolean_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2203,cljs.core.cst$sym$boolean,2203,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Boolean"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",567,9,567,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,"Creates a clone of value.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICloneable,cljs.core.cst$sym$cljs$core_SLASH__DASH_clone,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,565,cljs.core.cst$sym$clj,567,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Creates a clone of value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11302,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11302,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_munge,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,11302,11302,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_empty_DASH_ordered_DASH_hash,"cljs/core.cljs",1336,1,1336,34,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1336,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1336,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$number]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_DEMUNGE_MAP,"cljs/core.cljs",362,1,363,14,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,363,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,363,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,"cljs/core.cljs",24,true,10,1293,false,1293,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",20,10,cljs.core.cst$kw$positional,6246,6246,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null),"Positional factory function for cljs.core/NeverEquiv."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NeverEquiv,false,"cljs/core.cljs",20,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6246,6246,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null),"Positional factory function for cljs.core/NeverEquiv."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9825,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9825,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive matches of re in s."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_seq,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9825,9825,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns a lazy sequence of successive matches of re in s."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,270,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,270,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string of length one."], null),cljs.core.cst$sym$cljs$core_SLASH_char_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,270,cljs.core.cst$sym$boolean,270,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript string of length one."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10651,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10651,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Creates a hierarchy object for use with derive, isa? etc."], null),cljs.core.cst$sym$cljs$core_SLASH_make_DASH_hierarchy,false,"cljs/core.cljs",21,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10651,10651,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Creates a hierarchy object for use with derive, isa? etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,952,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,952,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Symbol,"cljs/core.cljs",16,true,10,1060,false,true,1060,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_PROTOCOL_SENTINEL,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,37,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,37,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,37,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,37,cljs.core.cst$kw$end_DASH_column,27], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5931,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5931,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_push_DASH_tail,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)),null,cljs.core.list(null,null),1,5931,5931,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$parent,cljs.core.cst$sym$tail_DASH_node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",692,4,692,11,cljs.core.cst$sym$cljs$core_SLASH_IReduce,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IReduce,cljs.core.cst$sym$cljs$core_SLASH__DASH_reduce,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,689,692,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)),"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",572,12,572,18,cljs.core.cst$sym$number,cljs.core.cst$sym$cljs$core_SLASH_ICounted,"Calculates the count of coll in constant time. Used by cljs.core/count.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ICounted,cljs.core.cst$sym$cljs$core_SLASH__DASH_count,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,570,cljs.core.cst$sym$number,572,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Calculates the count of coll in constant time. Used by cljs.core/count."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$added,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",4476,7,4476,17,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap.","1.9",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),"1.9",cljs.core.cst$sym$cljs$core_SLASH_swap_DASH_vals_BANG_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,4476,4476,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.\n  Returns [old new], the value of the atom before and after the swap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4341,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4341,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keep,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4341,4341,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the non-nil results of (f item). Note,\n  this means false return values will be included.  f must be free of\n  side-effects.  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2678,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2678,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to char"], null),cljs.core.cst$sym$cljs$core_SLASH_char,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2678,2678,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to char"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],["1.0","cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),7,5089,5089,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"]),"1.0",cljs.core.cst$sym$cljs$core_SLASH_mapcat,true,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,5089,5089,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns the result of applying concat to the result of applying map\n  to f and colls.  Thus function f should return a collection. Returns\n  a transducer when no collections are provided"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2792,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2792,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_long,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2792,2792,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to long by stripping decimal places. Identical to `int'."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_seed,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,910,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,910,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,910,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,910,cljs.core.cst$kw$end_DASH_column,13], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,254,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,254,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is not nil, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_some_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,254,cljs.core.cst$sym$boolean,254,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is not nil, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2747,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2747,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2747,2747,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11351,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11351,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Remove f from the tap set."], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_tap,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,11351,11351,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Remove f from the tap set."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3316,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3316,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Efficient test to determine that two symbols are identical."], null),cljs.core.cst$sym$cljs$core_SLASH_symbol_DASH_identical_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,3316,cljs.core.cst$sym$boolean,3316,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Efficient test to determine that two symbols are identical."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH__STAR_command_DASH_line_DASH_args_STAR_,"cljs/core.cljs",300,1,303,22,"A sequence of the supplied command line arguments, or nil if\n  none were supplied",new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,303,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,303,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$doc,"A sequence of the supplied command line arguments, or nil if\n  none were supplied"], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3170,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3170,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reverse order. Not lazy."], null),cljs.core.cst$sym$cljs$core_SLASH_reverse,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3170,3170,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items in coll in reverse order. Not lazy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1389,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1389,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies Inst"], null),cljs.core.cst$sym$cljs$core_SLASH_inst_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1389,cljs.core.cst$sym$boolean,1389,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies Inst"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta3355], null))),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/t_cljs$core3354.",cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core3354,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta3355], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3961,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta3355], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/t_cljs$core3354."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9628,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9628,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_range,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),null,cljs.core.list(null,null,null,null),1,9628,9628,3,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),"Returns a lazy seq of nums from start (inclusive) to end\n   (exclusive), by step, where start defaults to 0, step to 1,\n   and end to infinity."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2892,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2892,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Counts the number of bits set in n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_count,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,2892,2892,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"Counts the number of bits set in n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7592,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7592,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,7,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_node,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,7,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null)),null,cljs.core.list(null,null),1,7592,7592,7,true,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$shift,cljs.core.cst$sym$key1,cljs.core.cst$sym$val1,cljs.core.cst$sym$key2hash,cljs.core.cst$sym$key2,cljs.core.cst$sym$val2], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2414,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2414,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sort,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2414,2414,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$coll], null)),"Returns a sorted sequence of the items in coll. Comp can be\n   boolean-valued comparison function, or a -/0/+ valued comparator.\n   Comp defaults to compare."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,1995,1995,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/MetaFn."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MetaFn,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1995,1995,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/MetaFn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2730,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2730,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc_DASH_int,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2730,2730,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",818,12,818,20,cljs.core.cst$sym$number,cljs.core.cst$sym$cljs$core_SLASH_IComparable,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IComparable,cljs.core.cst$sym$cljs$core_SLASH__DASH_compare,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,816,cljs.core.cst$sym$number,818,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4313,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4313,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_map_DASH_indexed,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4313,4313,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence consisting of the result of applying f to 0\n  and the first item of coll, followed by applying f to 1 and the second\n  item in coll, etc, until coll is exhausted. Thus function f should\n  accept 2 arguments, index and item. Returns a stateful transducer when\n  no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9431,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9431,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_list,false,"cljs/core.cljs",17,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9431,9431,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10632,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10632,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."], null),cljs.core.cst$sym$cljs$core_SLASH_rand_DASH_nth,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10632,10632,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a random element of the (sequential) collection. Will have\n  the same performance characteristics as nth for the given\n  collection."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4230,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4230,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null))),cljs.core.cst$kw$doc,"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_comp,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null)),null,cljs.core.list(null,null,null,null,null),1,4230,4230,(3),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f1,cljs.core.cst$sym$f2,cljs.core.cst$sym$f3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$fs], null)),"Takes a set of functions and returns a fn that is the composition\n  of those fns.  The returned fn takes a variable number of args,\n  applies the rightmost of fns to the args, the next\n  fn (right-to-left) to the result, etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3505,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3505,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_chunk,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null,null),1,3505,3505,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11055,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11055,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's dispatch-fn."], null),cljs.core.cst$sym$cljs$core_SLASH_dispatch_DASH_fn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,11055,11055,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, return it's dispatch-fn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2884,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2884,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"DEPRECATED: Bitwise shift right with zero fill"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_shift_DASH_right_DASH_zero_DASH_fill,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2884,2884,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"DEPRECATED: Bitwise shift right with zero fill"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11267,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11267,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,11267,11267,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",783,9,783,22,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,"Returns a new, transient version of the collection, in constant time.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_as_DASH_transient,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,781,cljs.core.cst$sym$clj,783,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new, transient version of the collection, in constant time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9765,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9765,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dorun,false,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9765,9765,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"When lazy sequences are produced via functions that have side\n  effects, any effects other than those needed to produce the first\n  element in the seq do not occur until the seq is consumed. dorun can\n  be used to force any effects. Walks through the successive nexts of\n  the seq, does not retain the head and returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9846,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9846,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_sequential_DASH_writer,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9846,9846,7,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$begin,cljs.core.cst$sym$sep,cljs.core.cst$sym$end,cljs.core.cst$sym$opts,cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3344,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3344,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_symbol_QMARK_,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3344,cljs.core.cst$sym$boolean,3344,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1794,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1794,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_accumulating_DASH_seq_DASH_count,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1794,1794,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",592,14,592,22,"Protocol for collections to provide indexed-based access to their items.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,"cljs/core.cljs",22,1,592,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_nth,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)], null)])], null),null,592,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for collections to provide indexed-based access to their items.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2079,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2079,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_disj,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null,null),1,2079,2079,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"disj[oin]. Returns a new set of the same (hashed/sorted) type, that\n  does not contain key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MultiIterator,"cljs/core.cljs",23,true,10,4070,false,4070,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",757,14,757,30,"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,"cljs/core.cljs",30,1,757,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_pr_DASH_writer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)], null)])], null),null,757,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 43, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Volatile,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ExceptionInfo,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_TransformerIterator,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"The old IPrintable protocol's implementation consisted of building a giant\n   list of strings to concatenate.  This involved lots of concat calls,\n   intermediate vectors, and lazy-seqs, and was very slow in some older JS\n   engines.  IPrintWithWriter implements printing via the IWriter protocol, so it\n   be implemented efficiently in terms of e.g. a StringBuffer append.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),"cljs/core.cljs",14,10,cljs.core.cst$kw$positional,11062,11062,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null),"Positional factory function for cljs.core/UUID."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null,cljs.core.cst$sym$cljs$core_SLASH_IUUID,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_UUID,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,11062,11062,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IComparable,null], null), null),"Positional factory function for cljs.core/UUID."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",666,14,666,21,"Protocol for adding vector functionality to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IVector,"cljs/core.cljs",21,1,666,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new vector with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null)])], null),null,666,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding vector functionality to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",865,14,865,23,"Protocol for iterating over a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IIterable,"cljs/core.cljs",23,1,865,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_iterator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an iterator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,865,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNode,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_HashCollisionNode,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_BitmapIndexedNode,null], null), null),"Protocol for iterating over a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",23,10,cljs.core.cst$kw$positional,4070,4070,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null))),null,"Positional factory function for cljs.core/MultiIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MultiIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4070,4070,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iters], null))),null,"Positional factory function for cljs.core/MultiIterator."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,203,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,205,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,205,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,205,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the second most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11528,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11528,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$form], null))),cljs.core.cst$kw$doc,"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core/*eval* for that environment."], null),cljs.core.cst$sym$cljs$core_SLASH_eval,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$form], null)),null,cljs.core.list(null,null),1,11528,11528,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$form], null))),"Evaluates the form data structure (not text!) and returns the result.\n  Delegates to cljs.core/*eval*. Intended for use in self-hosted ClojureScript,\n  which sets up an implementation of cljs.core/*eval* for that environment."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Eduction,"cljs/core.cljs",18,true,10,10463,false,10463,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5306,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5306,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_clone_DASH_node,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5306,5306,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3251,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3251,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new seq where x is the first element and coll is the rest."], null),cljs.core.cst$sym$cljs$core_SLASH_cons,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3251,3251,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$coll], null))),"Returns a new seq where x is the first element and coll is the rest."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,"cljs/core.cljs",27,true,10,9197,false,9197,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",21,10,cljs.core.cst$kw$positional,9032,9032,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),null,"Positional factory function for cljs.core/HashSetIter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashSetIter,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9032,9032,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),null,"Positional factory function for cljs.core/HashSetIter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11372,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11372,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),true,cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_lookup,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,11372,11372,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj,cljs.core.cst$sym$k], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2802,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2802,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_floats,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2802,2802,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5427,cljs.core.cst$kw$column,44,cljs.core.cst$kw$end_DASH_line,5427,cljs.core.cst$kw$end_DASH_column,59,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientVector,"cljs/core.cljs",25,true,10,5973,false,true,5973,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2912,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2912,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is greater than zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_pos_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2912,cljs.core.cst$sym$boolean,2912,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is greater than zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4288,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4288,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null))),cljs.core.cst$kw$doc,"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_fnil,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),null,cljs.core.list(null,null,null),1,4288,4288,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),"Takes a function f, and returns a function that calls f, replacing\n  a nil first argument to f with the supplied value x. Higher arity\n  versions can replace arguments in the second and third\n  positions (y, z). Note that the function f can take any number of\n  arguments, not just the one(s) being nil-patched."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8998,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8998,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_merge_DASH_with,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$maps)], null),null,cljs.core.list(null),1,8998,8998,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping(s)\n  from the latter (left-to-right) will be combined with the mapping in\n  the result by calling (f val-in-result val-in-latter)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1909,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1909,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth rest of coll, coll when n is 0."], null),cljs.core.cst$sym$cljs$core_SLASH_nthrest,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,1909,1909,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),"Returns the nth rest of coll, coll when n is 0."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_warn_DASH_on_DASH_infer_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,33,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,33,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,33,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,33,cljs.core.cst$kw$end_DASH_column,21], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,636,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,636,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IFind,cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IFind,cljs.core.cst$sym$cljs$core_SLASH__DASH_find,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,634,636,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns the map entry for key, or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2121,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2121,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISequential"], null),cljs.core.cst$sym$cljs$core_SLASH_sequential_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2121,cljs.core.cst$sym$boolean,2121,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies ISequential"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8625,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8625,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_replace,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,8625,8625,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,488,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,488,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$or,cljs.core.list(cljs.core.cst$sym$array_QMARK_,cljs.core.cst$sym$array),cljs.core.list(cljs.core.cst$sym$goog_SLASH_isArrayLike,cljs.core.cst$sym$array)),cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$idx),cljs.core.list(cljs.core.cst$sym$not,cljs.core.list(cljs.core.cst$sym$neg_QMARK_,cljs.core.cst$sym$idx)),cljs.core.list(cljs.core.cst$sym$_LT_,cljs.core.cst$sym$idx,cljs.core.list(cljs.core.cst$sym$alength,cljs.core.cst$sym$array))], null)], null)),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aset_SINGLEQUOTE_,true,"cljs/core.cljs",21,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,488,488,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,917,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,917,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_mix_DASH_H1,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)),null,cljs.core.list(null,null),1,917,cljs.core.cst$sym$number,917,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$k1], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RecordIter,"cljs/core.cljs",20,true,10,6438,false,6438,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,6953,6953,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientArrayMap."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientArrayMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6953,6953,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientArrayMap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1656,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1656,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null))),cljs.core.cst$kw$doc,"Create seq from a primitive JavaScript Array-like.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prim_DASH_seq,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,1656,1656,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prim,cljs.core.cst$sym$i], null)),"Create seq from a primitive JavaScript Array-like."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,163,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,163,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_level_STAR_,"cljs/core.cljs",16,1,true,152,163,cljs.core.cst$sym$clj_DASH_nil,"*print-level* controls how many levels deep the printer will\n  print nested objects. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  level to print. Each argument to print is at level 0; if an argument is a\n  collection, its items are at level 1; and so on. If an object is a\n  collection and is at a level greater than or equal to the value bound to\n  *print-level*, the printer prints '#' to represent it. The root binding\n  is nil indicating no limit.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2455,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2455,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Return a random permutation of coll"], null),cljs.core.cst$sym$cljs$core_SLASH_shuffle,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2455,2455,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Return a random permutation of coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2149,cljs.core.cst$kw$column,22,cljs.core.cst$kw$end_DASH_line,2149,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$declared,true], null),6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,"cljs/core.cljs",20,true,10,5667,false,true,5667,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3259,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3259,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_keyword,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,3259,3259,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2328,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2328,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),cljs.core.cst$kw$doc,"Returns the map entry for key, or nil if key not present."], null),cljs.core.cst$sym$cljs$core_SLASH_find,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,2328,2328,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns the map entry for key, or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,511,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,511,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),cljs.core.cst$kw$doc,"Returns the length of the array. Works on arrays of all types."], null),cljs.core.cst$sym$cljs$core_SLASH_alength,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null)),null,cljs.core.list(null,null),1,511,cljs.core.cst$sym$number,511,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null))),"Returns the length of the array. Works on arrays of all types."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2828,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2828,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise exclusive or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_xor,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2828,2828,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise exclusive or"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",20,10,cljs.core.cst$kw$positional,1568,1568,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/IndexedSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_IndexedSeq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1568,1568,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/IndexedSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ObjMap,"cljs/core.cljs",16,true,10,6321,false,6321,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2888,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2888,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Bitwise shift right with zero fill"], null),cljs.core.cst$sym$cljs$core_SLASH_unsigned_DASH_bit_DASH_shift_DASH_right,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2888,2888,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Bitwise shift right with zero fill"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6SetEntriesIterator,"cljs/core.cljs",31,true,10,6464,false,6464,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2921,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2921,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is less than zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_neg_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2921,cljs.core.cst$sym$boolean,2921,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is less than zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Cons,"cljs/core.cljs",14,true,10,3194,false,3194,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10826,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10826,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_remove_DASH_method,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10823,10826,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",20,10,cljs.core.cst$kw$positional,3967,3967,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/StringIter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_StringIter,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3967,3967,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/StringIter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,526,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,526,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_invoke,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,526,526,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$s,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Invoke JavaScript object method via string. Needed when the\n  string is not a valid unquoted property name."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",14,10,cljs.core.cst$kw$positional,3017,3017,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/List."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_List,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3017,3017,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/List."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,914,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,914,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_mix_DASH_K1,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)),null,cljs.core.list(null,null),1,914,cljs.core.cst$sym$number,914,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k1], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Iterate,"cljs/core.cljs",17,true,10,4976,false,4976,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2693,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2693,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_float,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2693,cljs.core.cst$sym$number,2693,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2207,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2207,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x identical to the JavaScript undefined value."], null),cljs.core.cst$sym$cljs$core_SLASH_undefined_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2207,cljs.core.cst$sym$boolean,2207,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x identical to the JavaScript undefined value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",679,14,679,19,"Protocol for accessing the metadata of an object.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMeta,"cljs/core.cljs",19,1,679,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns the metadata of object o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,679,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 51, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9881,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9909,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9905,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9559,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9536,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9617,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9643,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9631,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9888,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9550,null,cljs.core.cst$sym$function,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9472,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer5970,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9522,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core3354,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for accessing the metadata of an object.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1426,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1426,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),cljs.core.cst$kw$doc,"Returns true if x is the result of a call to reduced"], null),cljs.core.cst$sym$cljs$core_SLASH_reduced_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null)),null,cljs.core.list(null,null),1,1426,cljs.core.cst$sym$boolean,1426,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$r], null))),"Returns true if x is the result of a call to reduced"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$file,"cljs/core.cljs"], null),cljs.core.cst$sym$cljs$core_SLASH_apply_DASH_to,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null),1,3845,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$argc,cljs.core.cst$sym$args], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3830,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3830,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_disj_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,3830,3830,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),"disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\n  does not contain key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",621,4,621,11,cljs.core.cst$sym$cljs$core_SLASH_ILookup,"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_ILookup,cljs.core.cst$sym$cljs$core_SLASH__DASH_lookup,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,619,621,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),"Use k to look up a value in o. If not-found is supplied and k is not\n     a valid value that can be used for look up, not-found is returned."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2301,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2301,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_float_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2301,cljs.core.cst$sym$boolean,2301,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true for JavaScript numbers, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",565,14,565,24,"Protocol for cloning a value.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,"cljs/core.cljs",24,1,565,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clone,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a clone of value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)], null)])], null),null,565,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null], null), null),"Protocol for cloning a value.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10555,14,10555,28,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEncodeClojure,"cljs/core.cljs",28,1,10555,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_js_DASH__GT_clj,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms JavaScript values to Clojure"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$options], null)], null)])], null),null,10555,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2797,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2797,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_booleans,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2797,2797,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",19,10,cljs.core.cst$kw$positional,9423,9423,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ArrayList."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayList,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9423,9423,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ArrayList."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1515,cljs.core.cst$kw$column,40,cljs.core.cst$kw$end_DASH_line,1515,cljs.core.cst$kw$end_DASH_column,44,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RSeq,"cljs/core.cljs",14,true,10,1673,false,true,1673,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7054,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7054,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_mask,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),null,cljs.core.list(null,null),1,7054,7054,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3630,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3630,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_int_DASH_array,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3630,3630,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of ints. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10795,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10795,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_find_DASH_and_DASH_cache_DASH_best_DASH_method,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10795,10795,8,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$default_DASH_dispatch_DASH_val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2106,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2106,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ISet"], null),cljs.core.cst$sym$cljs$core_SLASH_set_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2106,cljs.core.cst$sym$boolean,2106,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x satisfies ISet"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1187,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1187,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x implements IIterable protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_iterable_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1187,cljs.core.cst$sym$boolean,1187,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x implements IIterable protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10400,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10400,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null))),cljs.core.cst$kw$doc,"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction.",cljs.core.cst$kw$added,"1.7"], null),"1.7",cljs.core.cst$sym$cljs$core_SLASH_cat,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)),null,cljs.core.list(null,null),1,10400,10400,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null))),"A transducer which concatenates the contents of each input, which must be a\n  collection, into the reduction."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",28,10,cljs.core.cst$kw$positional,6451,6451,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ES6EntriesIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ES6EntriesIterator,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6451,6451,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ES6EntriesIterator."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_divide,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2601,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,2601,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$declared,true,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2601,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,2601,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$declared,true], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11248,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,11248,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved_DASH_arr,"cljs/core.cljs",18,1,11245,11248,cljs.core.cst$sym$array,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,763,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,763,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_pr_DASH_writer,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,757,763,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9879,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9879,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_flush,false,"cljs/core.cljs",12,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9879,9879,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9292,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9292,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_from_DASH_indexed_DASH_seq,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)),null,cljs.core.list(null,null),1,9292,9292,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iseq], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11339,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11339,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_maybe_DASH_init_DASH_tapset,false,"cljs/core.cljs",25,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,11339,11339,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9465,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9465,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_take_DASH_while,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9465,9465,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of successive items from coll while\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3933,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3933,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_vary_DASH_meta,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null,null,null,null,null),1,3933,3933,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Returns an object of the same type and value as obj, with\n  (apply f (meta obj) args) as its metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",611,14,611,19,"Protocol for accessing the next items of a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_INext,"cljs/core.cljs",19,1,611,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_next,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,611,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null], null), null),"Protocol for accessing the next items of a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,290,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,290,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_is_proto_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,290,290,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_START,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3992,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,3992,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3992,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,3992,cljs.core.cst$kw$end_DASH_column,11], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",570,14,570,22,"Protocol for adding the ability to count a collection in constant time.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICounted,"cljs/core.cljs",22,1,570,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_count,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Calculates the count of coll in constant time. Used by cljs.core/count."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,570,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 27, [null,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkBuffer,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to count a collection in constant time.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",644,14,644,23,"Protocol for examining a map entry.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,"cljs/core.cljs",23,1,644,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the map entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,644,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for examining a map entry.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5411,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5411,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_reduce,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,5411,5411,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2622,16,2622,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__LT__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2622,cljs.core.cst$sym$boolean,2622,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-decreasing order,\n  otherwise false."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_MODULE_INFOS,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,40,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,40,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,40,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,40,cljs.core.cst$kw$end_DASH_column,18], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3789,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3789,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_conj_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null,null,null),1,3789,3789,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$vals], null)),"Adds val to the transient collection, and return tcoll. The 'addition'\n  may happen at different 'places' depending on the concrete type."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",662,9,662,13,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IStack,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$sym$cljs$core_SLASH__DASH_pop,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,656,cljs.core.cst$sym$clj,662,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6506,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6506,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_identical_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6506,6506,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4967,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4967,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_repeatedly,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4967,4967,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$f], null)),"Takes a function of no args, presumably with side effects, and\n  returns an infinite (or length n if supplied) lazy sequence of calls\n  to it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9393,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9393,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),cljs.core.cst$kw$doc,"Returns a map with the keys mapped to the corresponding vals."], null),cljs.core.cst$sym$cljs$core_SLASH_zipmap,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null)),null,cljs.core.list(null,null),1,9393,9393,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keys,cljs.core.cst$sym$vals], null))),"Returns a map with the keys mapped to the corresponding vals."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4439,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4439,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset.",cljs.core.cst$kw$added,"1.9"], null),"1.9",cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_vals_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,4439,4439,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of atom to newval. Returns [old new], the value of the\n   atom before and after the reset."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",656,14,656,20,"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IStack,"cljs/core.cljs",20,1,656,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_peek,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new stack without the item on top of the stack. Is used\n     by cljs.core/pop."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,656,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for collections to provide access to their items as stacks. The top\n  of the stack should be accessed in the most efficient way for the different\n  data structures.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,778,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,778,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_remove_DASH_watch,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,771,778,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null))),"Removes watcher that corresponds to key from this."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",859,14,859,23,"Protocol for adding volatile functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,"cljs/core.cljs",23,1,859,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_vreset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null),null,859,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Volatile,null], null), null),"Protocol for adding volatile functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5128,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5128,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_remove,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5128,5128,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns false. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,7145,7145,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"Positional factory function for cljs.core/BitmapIndexedNode."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_BitmapIndexedNode,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7145,7145,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"Positional factory function for cljs.core/BitmapIndexedNode."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2594,15,2594,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__STAR_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2594,cljs.core.cst$sym$number,2594,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9835,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9835,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns an instance of RegExp which has compiled the provided string."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_pattern,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9835,9835,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Returns an instance of RegExp which has compiled the provided string."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2669,15,2669,18,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the least of the nums.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_min,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2669,cljs.core.cst$sym$number,2669,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the least of the nums."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6478,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6478,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_nil_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,6478,6478,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",790,9,790,21,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"Creates a persistent data structure from tcoll and returns it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_persistent_BANG_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,786,cljs.core.cst$sym$clj,790,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Creates a persistent data structure from tcoll and returns it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",594,4,594,8,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IIndexed,cljs.core.cst$sym$cljs$core_SLASH__DASH_nth,false,"cljs/core.cljs",8,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,592,594,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value at the index n in the collection coll.\n     Returns not-found if index n is out of bounds and not-found is supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3824,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3824,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"], null),cljs.core.cst$sym$cljs$core_SLASH_pop_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,3824,3824,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Removes the last item from a transient vector. If\n  the collection is empty, throws an exception. Returns tcoll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3590,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3590,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_append,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3590,3590,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$b,cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_unchecked_DASH_arrays_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,30,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,30,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,30,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,30,cljs.core.cst$kw$end_DASH_column,24], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10054,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10054,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr-str followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prn_DASH_str,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,10054,10054,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as pr-str followed by (newline)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",728,14,728,25,"Protocol for reversing a seq.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReversible,"cljs/core.cljs",25,1,728,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_rseq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a seq of the items in coll in reversed order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,728,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for reversing a seq.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3159,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3159,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies? IReversible."], null),cljs.core.cst$sym$cljs$core_SLASH_reversible_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3159,cljs.core.cst$sym$boolean,3159,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns true if coll satisfies? IReversible."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",768,13,768,23,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IPending,"Returns true if a value for x has been produced, false otherwise.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IPending,cljs.core.cst$sym$cljs$core_SLASH__DASH_realized_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,765,cljs.core.cst$sym$boolean,768,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if a value for x has been produced, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,775,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,775,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_add_DASH_watch,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,771,775,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,677,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,677,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,cljs.core.cst$sym$cljs$core_SLASH__DASH_deref_DASH_with_DASH_timeout,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)),null,cljs.core.list(null,null),1,676,677,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1773,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1773,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_conj,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null,null,null),1,1773,1773,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"conj[oin]. Returns a new collection with the xs\n  'added'. (conj nil item) returns (item).  The 'addition' may\n  happen at different 'places' depending on the concrete type."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",736,9,736,20,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"Returns a sorted seq from coll in either ascending or descending order.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_sorted_DASH_seq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)),null,cljs.core.list(null,null),1,733,cljs.core.cst$sym$clj,736,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null))),"Returns a sorted seq from coll in either ascending or descending order."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5075,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5075,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"], null),true,cljs.core.cst$sym$cljs$core_SLASH_flatten1,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null)),null,cljs.core.list(null,null),1,5075,5075,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$colls], null))),"Take a collection of collections, and return a lazy seq\n  of items from the inner collection"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2561,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2561,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_transduce,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2561,2561,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"reduce with a transformation of f (xf). If init is not\n  supplied, (f) will be called to produce it. f should be a reducing\n  step function that accepts both 1 and 2 arguments, if it accepts\n  only 2 you can add the arity-1 with 'completing'. Returns the result\n  of applying (the transformed) xf to init and the first item in coll,\n  then applying xf to that result and the 2nd item, etc. If coll\n  contains no items, returns init and f is not called. Note that\n  certain transforms may inject or skip items."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",856,4,856,10,cljs.core.cst$sym$cljs$core_SLASH_ISwap,"Swaps the value of o to be (apply f current-value-of-atom args).",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_ISwap,cljs.core.cst$sym$cljs$core_SLASH__DASH_swap_BANG_,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),null,cljs.core.list(null,null,null,null),1,854,856,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)),"Swaps the value of o to be (apply f current-value-of-atom args)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,150,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,150,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_length_STAR_,"cljs/core.cljs",17,1,true,140,150,cljs.core.cst$sym$clj_DASH_nil,"*print-length* controls how many items of each collection the\n  printer will print. If it is bound to logical false, there is no\n  limit. Otherwise, it must be bound to an integer indicating the maximum\n  number of items of each collection to print. If a collection contains\n  more items, the printer will print items up to the limit followed by\n  '...' to represent the remaining items. The root binding is nil\n  indicating no limit.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|number}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2169,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2169,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_delete,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,2169,2169,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$key], null))),"Delete a property from a JavaScript object.\n  Returns true upon success, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,215,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,215,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Internal - do not use!"], null),cljs.core.cst$sym$cljs$core_SLASH_truth_,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,215,215,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Internal - do not use!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6522,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6522,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6522,6522,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,10837,10837,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),"Positional factory function for cljs.core/MultiFn."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MultiFn,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10837,10837,8,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),"Positional factory function for cljs.core/MultiFn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10516,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10516,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_key_DASH__GT_js,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null)),null,cljs.core.list(null,null),1,10516,10516,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$primitive_DASH_fn], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10509,14,10509,23,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,"cljs/core.cljs",23,1,10509,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_clj_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_key_DASH__GT_js,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null),null,10509,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5315,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5315,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_new_DASH_path,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5315,5315,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4491,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4491,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),cljs.core.cst$kw$doc,"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."], null),cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_and_DASH_set_BANG_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,4491,4491,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$a,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),"Atomically sets the value of atom to newval if and only if the\n  current value of the atom is equal to oldval. Returns true if\n  set happened, else false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1664,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1664,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null))),cljs.core.cst$kw$doc,"Create a seq from a JavaScript array.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_seq,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,1664,1664,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$i], null)),"Create a seq from a JavaScript array."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2183,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2183,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_copy_DASH_downward,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,2183,2183,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7347,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7347,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pack_DASH_array_DASH_node,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,7347,7347,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array_DASH_node,cljs.core.cst$sym$edit,cljs.core.cst$sym$idx], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5037,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5037,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the first item in each coll, then the second etc.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_interleave,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null)),null,cljs.core.list(null,null,null,null),1,5037,5037,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a lazy seq of the first item in each coll, then the second etc."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10130,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10130,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_map,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10130,10130,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2133,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2133,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IMap"], null),cljs.core.cst$sym$cljs$core_SLASH_map_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2133,cljs.core.cst$sym$boolean,2133,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IMap"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_C1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,911,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,911,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,911,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,911,cljs.core.cst$kw$end_DASH_column,11], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1917,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1917,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value mapped to key, not-found or nil if key not present.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_get,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1917,1917,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$k,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value mapped to key, not-found or nil if key not present."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2546,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2546,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns its argument."], null),cljs.core.cst$sym$cljs$core_SLASH_identity,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2546,2546,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns its argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5159,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5159,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null))),cljs.core.cst$kw$doc,"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_into,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),null,cljs.core.list(null,null,null,null),1,5159,5159,3,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$from], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$to,cljs.core.cst$sym$xform,cljs.core.cst$sym$from], null)),"Returns a new coll consisting of to-coll with all of the items of\n  from-coll conjoined. A transducer may be supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2787,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2787,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to long by stripping decimal places. Identical to `int'."], null),cljs.core.cst$sym$cljs$core_SLASH_long,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2787,2787,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to long by stripping decimal places. Identical to `int'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2688,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2688,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_double,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2688,cljs.core.cst$sym$number,2688,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4531,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4531,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a volatile."], null),cljs.core.cst$sym$cljs$core_SLASH_volatile_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4531,cljs.core.cst$sym$boolean,4531,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a volatile."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkBuffer,"cljs/core.cljs",21,true,10,3464,false,3464,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashSetIter,"cljs/core.cljs",21,true,10,9032,false,9032,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,646,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,646,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the key of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$sym$cljs$core_SLASH__DASH_key,false,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,644,646,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the key of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1746,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1746,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (first x))"], null),cljs.core.cst$sym$cljs$core_SLASH_nfirst,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1746,1746,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (next (first x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_StringBufferWriter,"cljs/core.cljs",28,true,10,872,false,872,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2057,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2057,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the metadata of obj, returns nil if there is no metadata."], null),cljs.core.cst$sym$cljs$core_SLASH_meta,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,2057,2057,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the metadata of obj, returns nil if there is no metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5926,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5926,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_editable_DASH_tail,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)),null,cljs.core.list(null,null),1,5926,5926,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tl], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,700,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,700,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$kw$doc,"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,cljs.core.cst$sym$cljs$core_SLASH__DASH_kv_DASH_reduce,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,697,700,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null))),"Reduces an associative collection and returns the result. f should be\n     a function that takes three arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",709,14,709,19,"Protocol for adding hashing functionality to a type.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IHash,"cljs/core.cljs",19,1,709,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the hash code of o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,709,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 39, [cljs.core.cst$sym$cljs$core_SLASH_Namespace,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$default,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding hashing functionality to a type.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2846,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2846,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and with complement",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and_DASH_not,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2846,2846,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and with complement"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1178,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1178,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Returns true if v is of type cljs.core.Var"], null),cljs.core.cst$sym$cljs$core_SLASH_var_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,1178,cljs.core.cst$sym$boolean,1178,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v], null))),"Returns true if v is of type cljs.core.Var"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,747,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,747,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the comparator for coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_comparator,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,733,747,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the comparator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2703,15,2703,32,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add_DASH_int,true,"cljs/core.cljs",32,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2703,cljs.core.cst$sym$number,2703,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1325,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1325,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_ordered_DASH_coll,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1325,cljs.core.cst$sym$number,1325,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the hash code, consistent with =, for an external ordered\n   collection implementing Iterable.\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3005,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,3005,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),cljs.core.cst$kw$doc,"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."], null),true,cljs.core.cst$sym$cljs$core_SLASH_extend_DASH_object_BANG_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null)),null,cljs.core.list(null,null),1,3005,3005,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$fn_DASH_map], null))),"Takes a JavaScript object and a map of names to functions and\n  attaches said functions as methods on the object.  Any references to\n  JavaScript's implicit this (via the this-as macro) will resolve to the\n  object that the function is attached."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5368,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5368,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_do_DASH_assoc,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,5368,5368,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10313,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10313,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Atomically resets the metadata for an atom"], null),cljs.core.cst$sym$cljs$core_SLASH_reset_DASH_meta_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,10313,10313,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$m], null))),"Atomically resets the metadata for an atom"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,8838,8838,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/KeySeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_KeySeq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8838,8838,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/KeySeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",704,14,704,20,"Protocol for adding value comparison functionality to a type.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,"cljs/core.cljs",20,1,704,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_equiv,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if o and other are equal, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)], null)])], null),null,704,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 41, [cljs.core.cst$sym$cljs$core_SLASH_Namespace,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$js_SLASH_Date,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,null,cljs.core.cst$sym$number,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$default,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding value comparison functionality to a type.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8225,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8225,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_kv_DASH_reduce,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)),null,cljs.core.list(null,null),1,8225,8225,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$f,cljs.core.cst$sym$init], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4850,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4850,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!) sequence of repetitions of the items in coll."], null),cljs.core.cst$sym$cljs$core_SLASH_cycle,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4850,4850,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a lazy (infinite!) sequence of repetitions of the items in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,673,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,673,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$kw$doc,"Returns the value of the reference o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IDeref,cljs.core.cst$sym$cljs$core_SLASH__DASH_deref,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,671,673,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the value of the reference o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11110,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11110,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer_DASH_ex_DASH_info,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,11110,11110,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2093,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2093,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"], null),cljs.core.cst$sym$cljs$core_SLASH_empty_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2093,cljs.core.cst$sym$boolean,2093,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns true if coll has no items - same as (not (seq coll)).\n  Please use the idiom (seq x) rather than (not (empty? x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TaggedLiteral,"cljs/core.cljs",23,true,10,11203,false,11203,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2686,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2686,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_short,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2686,cljs.core.cst$sym$number,2686,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10510,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10510,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Recursively transforms clj values to JavaScript",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$sym$cljs$core_SLASH__DASH_clj_DASH__GT_js,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10509,10510,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Recursively transforms clj values to JavaScript"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,829,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,829,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$kw$doc,"Returns the first chunk in coll.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_first,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,827,829,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the first chunk in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11343,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11343,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap"], null),cljs.core.cst$sym$cljs$core_SLASH_add_DASH_tap,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,11343,11343,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Adds f, a fn of one argument, to the tap set. This function will be called with\n  anything sent via tap>. Remember f in order to remove-tap"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5191,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5191,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."], null),cljs.core.cst$sym$cljs$core_SLASH_filterv,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5191,5191,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns a vector of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",23,10,cljs.core.cst$kw$positional,11203,11203,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TaggedLiteral."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TaggedLiteral,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,11203,11203,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TaggedLiteral."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5923,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5923,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_editable_DASH_root,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5923,5923,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,987,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,987,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."], null),cljs.core.cst$sym$cljs$core_SLASH_hash,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,987,987,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the hash code of its argument. Note this is the hash code\n   consistent with =."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2816,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2816,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"quot[ient] of dividing numerator by denominator."], null),cljs.core.cst$sym$cljs$core_SLASH_quot,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2816,2816,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"quot[ient] of dividing numerator by denominator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11433,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11433,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),cljs.core.cst$kw$doc,"Returns a map of the intern mappings for the namespace.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_interns_STAR_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)),null,cljs.core.list(null,null),1,11433,11433,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null))),"Returns a map of the intern mappings for the namespace.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2694,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2694,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_double,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2694,cljs.core.cst$sym$number,2694,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$doc,cljs.core.cst$kw$tag,cljs.core.cst$kw$declared],["cljs/core.cljs",48,3,48,11,true,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option.",cljs.core.cst$sym$string,true]),cljs.core.cst$sym$cljs$core_SLASH__STAR_target_STAR_,"cljs/core.cljs",11,1,true,42,true,48,cljs.core.cst$sym$string,"Var bound to the name value of the compiler build :target option.\n  For example, if the compiler build :target is :nodejs, *target* will be bound\n  to \"nodejs\". *target* is a Google Closure define and can be set by compiler\n  :closure-defines option."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"cljs/core.cljs",21,10,cljs.core.cst$kw$positional,3513,3513,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/ChunkedCons."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkedCons,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3513,3513,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/ChunkedCons."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5404,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5404,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ranged_DASH_iterator,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,5404,5404,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",804,14,804,30,"Protocol for adding vector functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"cljs/core.cljs",30,1,804,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc_DASH_n_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with value val added at position n."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_pop_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll with the last item removed from it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null),null,804,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null], null), null),"Protocol for adding vector functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8909,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8909,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),cljs.core.cst$kw$doc,"Returns the key of the map entry."], null),cljs.core.cst$sym$cljs$core_SLASH_key,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),null,cljs.core.list(null,null),1,8909,8909,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),"Returns the key of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2804,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2804,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_longs,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2804,2804,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",3949,16,3949,20,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Same as (not (= obj1 obj2))",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_not_EQ_,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,3949,cljs.core.cst$sym$boolean,3949,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Same as (not (= obj1 obj2))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,90,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,90,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-err-fn* to f."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_print_DASH_err_DASH_fn_BANG_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,90,90,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Set *print-err-fn* to f."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,265,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,265,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript string."], null),cljs.core.cst$sym$cljs$core_SLASH_string_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,265,cljs.core.cst$sym$boolean,265,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript string."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11493,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11493,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true x is a goog.Uri instance.",cljs.core.cst$kw$added,"1.9"], null),"1.9",cljs.core.cst$sym$cljs$core_SLASH_uri_QMARK_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,11493,11493,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true x is a goog.Uri instance."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1286,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1286,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterator,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1286,1286,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"EXPERIMENTAL: Return a ES2015 compatible iterator for coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Delay,"cljs/core.cljs",15,true,10,10365,false,10365,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11290,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11290,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_munge_DASH_str,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,11290,11290,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10018,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10018,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects to a string, observing all the\n  options given in opts"], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str_DASH_with_DASH_opts,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10018,10018,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Prints a sequence of objects to a string, observing all the\n  options given in opts"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",20,10,cljs.core.cst$kw$positional,6438,6438,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null))),null,"Positional factory function for cljs.core/RecordIter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RecordIter,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6438,6438,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null))),null,"Positional factory function for cljs.core/RecordIter."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_C2,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,912,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,912,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,912,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,912,cljs.core.cst$kw$end_DASH_column,11], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$number], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,1060,1060,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/Symbol."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Symbol,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1060,1060,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/Symbol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,106,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,106,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_newline_STAR_,"cljs/core.cljs",18,1,true,101,106,cljs.core.cst$sym$boolean,"When set to logical false will drop newlines from printing calls.\n  This is to work around the implicit newlines emitted by standard JavaScript\n  console objects."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2740,15,2740,37,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply_DASH_int,true,"cljs/core.cljs",37,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2740,cljs.core.cst$sym$number,2740,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11337,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,11337,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),cljs.core.cst$kw$private,true], null),true,cljs.core.cst$sym$cljs$core_SLASH_tapset,"cljs/core.cljs",9,1,11336,11337,cljs.core.cst$sym$clj_DASH_nil,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3599,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3599,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_rest,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3599,3599,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11022,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11022,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Removes all of the methods of multimethod."], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_all_DASH_methods,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,11022,11022,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Removes all of the methods of multimethod."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10606,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10606,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_trampoline,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,10606,10606,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"trampoline can be used to convert algorithms requiring mutual\n  recursion without stack consumption. Calls f with supplied args, if\n  any. If f returns a fn, calls that fn with no arguments, and\n  continues to repeat, until the return value is not a fn, then\n  returns that non-fn value. Note that if you want to return a fn as a\n  final value, you must wrap it in some data structure and unpack it\n  after trampoline returns."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2306,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2306,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for JavaScript numbers, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_double_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2306,cljs.core.cst$sym$boolean,2306,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true for JavaScript numbers, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,176,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,176,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_opts,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,176,176,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_1,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,199,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,201,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,201,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,201,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5647,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5647,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified."], null),cljs.core.cst$sym$cljs$core_SLASH_vec,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5647,5647,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Creates a new vector containing the contents of coll. JavaScript arrays\n  will be aliased and should not be modified."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",15,10,cljs.core.cst$kw$positional,4792,4792,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$all,cljs.core.cst$sym$prev,cljs.core.with_meta(cljs.core.cst$sym$current,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Cycle."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Cycle,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$all,cljs.core.cst$sym$prev,cljs.core.with_meta(cljs.core.cst$sym$current,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4792,4792,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$all,cljs.core.cst$sym$prev,cljs.core.with_meta(cljs.core.cst$sym$current,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Cycle."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,122,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,122,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_meta_STAR_,"cljs/core.cljs",15,1,true,116,122,cljs.core.cst$sym$boolean,"If set to logical true, when printing an object, its metadata will also\n  be printed in a form that can be read back by the reader.\n\n  Defaults to false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,773,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,773,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWatchable,cljs.core.cst$sym$cljs$core_SLASH__DASH_notify_DASH_watches,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)),null,cljs.core.list(null,null),1,771,773,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null))),"Calls all watchers with this, oldval and newval."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[8,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MultiFn,"cljs/core.cljs",17,true,10,10837,false,10837,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_NONE,"cljs/core.cljs",4036,1,4036,20,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4036,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4036,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2777,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2777,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null),cljs.core.cst$sym$cljs$core_SLASH_int,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2777,2777,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to int by stripping decimal places."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,8914,8914,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ValSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ValSeq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8914,8914,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ValSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6650,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,6650,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies IMapEntry"], null),cljs.core.cst$sym$cljs$core_SLASH_map_DASH_entry_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,6650,cljs.core.cst$sym$boolean,6650,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x satisfies IMapEntry"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10622,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10622,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_rand,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,10622,10622,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),"Returns a random floating point number between 0 (inclusive) and\n  n (default 1) (exclusive)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1736,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1736,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_second,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1736,1736,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11410,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11410,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns_DASH_obj,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,11410,11410,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",781,14,781,33,"Protocol for collections which can transformed to transients.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,"cljs/core.cljs",33,1,781,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_as_DASH_transient,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,781,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null], null), null),"Protocol for collections which can transformed to transients.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1023,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1023,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_combine,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)),null,cljs.core.list(null,null),1,1023,1023,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$seed,cljs.core.cst$sym$hash], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2634,16,2634,17,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__GT_,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2634,cljs.core.cst$sym$boolean,2634,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically decreasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",841,12,841,17,cljs.core.cst$sym$string,cljs.core.cst$sym$cljs$core_SLASH_INamed,"Returns the name String of x.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$sym$cljs$core_SLASH__DASH_name,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,839,cljs.core.cst$sym$string,841,1,cljs.core.cst$sym$string,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the name String of x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9333,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9333,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_replace,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9333,9333,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$smap,cljs.core.cst$sym$coll], null)),"Given a map of replacement pairs and a vector/collection, returns a\n  vector/seq with any elements = a key in smap replaced with the\n  corresponding val in smap.  Returns a transducer when no collection\n  is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2248,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2248,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long."], null),cljs.core.cst$sym$cljs$core_SLASH_int_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2248,cljs.core.cst$sym$boolean,2248,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies integer? or is an instance of goog.math.Integer\n   or goog.math.Long."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,5759,5759,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Subvec."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Subvec,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5759,5759,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Subvec."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2113,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2113,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements IAssociative"], null),cljs.core.cst$sym$cljs$core_SLASH_associative_QMARK_,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2113,cljs.core.cst$sym$boolean,2113,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements IAssociative"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2782,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2782,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Coerce to int by stripping decimal places."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_int,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2782,2782,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Coerce to int by stripping decimal places."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2164,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2164,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),cljs.core.cst$kw$doc,"Return the JavaScript keys for an object."], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_keys,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,2164,2164,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj], null))),"Return the JavaScript keys for an object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1378,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,1378,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_Inst,cljs.core.cst$sym$cljs$core_SLASH_inst_DASH_ms_STAR_,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)),null,cljs.core.list(null,null),1,1377,1378,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6EntriesIterator,"cljs/core.cljs",28,true,10,6451,false,6451,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3302,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3302,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Keyword"], null),cljs.core.cst$sym$cljs$core_SLASH_keyword_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3302,cljs.core.cst$sym$boolean,3302,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Keyword"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3988,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3988,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_iter,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3988,3988,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10381,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10381,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"], null),cljs.core.cst$sym$cljs$core_SLASH_force,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10381,10381,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is a Delay, returns the (possibly cached) value of its expression, else returns x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10639,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10639,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."], null),cljs.core.cst$sym$cljs$core_SLASH_group_DASH_by,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10639,10639,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),"Returns a map of the elements of coll keyed by the result of\n  f on each element. The value at each key will be a vector of the\n  corresponding elements, in the order they appeared in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",730,9,730,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IReversible,"Returns a seq of the items in coll in reversed order.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IReversible,cljs.core.cst$sym$cljs$core_SLASH__DASH_rseq,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,728,cljs.core.cst$sym$clj,730,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items in coll in reversed order."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10091,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10091,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as pr followed by (newline).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_prn,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,10091,10091,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as pr followed by (newline)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5943,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5943,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_pop_DASH_tail,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5943,5943,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11051,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11051,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, return it's default-dispatch-val."], null),cljs.core.cst$sym$cljs$core_SLASH_default_DASH_dispatch_DASH_val,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,11051,11051,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, return it's default-dispatch-val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"cljs/core.cljs",14,10,cljs.core.cst$kw$positional,4375,4375,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Atom."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Atom,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4375,4375,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Atom."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1959,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,1959,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,"cljs/core.cljs",27,true,10,7767,false,true,7767,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2733,15,2733,33,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the product of nums. (*) returns 1.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_multiply,true,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2733,cljs.core.cst$sym$number,2733,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the product of nums. (*) returns 1."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,"cljs/core.cljs",22,true,10,7688,false,7688,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4206,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4206,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is even, throws an exception if n is not an integer"], null),cljs.core.cst$sym$cljs$core_SLASH_even_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,4206,cljs.core.cst$sym$boolean,4206,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is even, throws an exception if n is not an integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1303,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1303,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),cljs.core.cst$kw$doc,"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_iterator_DASH_seq,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,1303,1303,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null))),"EXPERIMENTAL: Given an ES2015 compatible iterator return a seq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2710,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2710,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2710,2710,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than x, an int."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",1377,14,1377,18,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_Inst,"cljs/core.cljs",18,1,1377,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$inst_DASH_ms_STAR_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inst], null)], null)])], null),null,1377,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$js_SLASH_Date,null], null), null),null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7481,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7481,cljs.core.cst$kw$end_DASH_column,38,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_collision_DASH_node_DASH_find_DASH_index,false,"cljs/core.cljs",38,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,7481,7481,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$cnt,cljs.core.cst$sym$key], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6718,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6718,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_persistent_DASH_array_DASH_map_DASH_seq,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,6718,6718,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RangeIterator,"cljs/core.cljs",23,true,10,9520,false,9520,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11233,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,11233,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if the value is the data representation of a tagged literal"], null),cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,11233,cljs.core.cst$sym$boolean,11233,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Return true if the value is the data representation of a tagged literal"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3674,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3674,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_double_DASH_array,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3674,3674,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of doubles. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11446,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11446,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Create a new namespace named by the symbol. Bootstrap only.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_create_DASH_ns,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),null,cljs.core.list(null,null),1,11446,11446,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym,cljs.core.cst$sym$ns_DASH_obj], null)),"Create a new namespace named by the symbol. Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",19,10,cljs.core.cst$kw$positional,3091,3091,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/EmptyList."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_EmptyList,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3091,3091,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/EmptyList."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2439,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2439,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_seq_DASH_reduce,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2439,2439,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$coll], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3730,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3730,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_spread,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)),null,cljs.core.list(null,null),1,3730,3730,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arglist], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8140,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8140,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_left,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,8140,8140,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$ins,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3164,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,3164,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),cljs.core.cst$kw$doc,"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_rseq,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null)),null,cljs.core.list(null,null),1,3164,cljs.core.cst$sym$seq,3164,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rev], null))),"Returns, in constant time, a seq of the items in rev (which\n  can be a vector or sorted-map), in reverse order. If rev is empty returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11171,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11171,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_cause,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,11171,11171,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns exception cause (an Error / ExceptionInfo) if ex is an\n  ExceptionInfo.\n  Otherwise returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",849,14,849,20,"Protocol for adding resetting functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReset,"cljs/core.cljs",20,1,849,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Sets the value of o to new-value."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)], null)])], null),null,849,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,"Protocol for adding resetting functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",575,14,575,34,"Protocol for creating an empty collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,"cljs/core.cljs",34,1,575,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_empty,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll. Used\n     by cljs.core/empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,575,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 31, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for creating an empty collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6536,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6536,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map_DASH_index_DASH_of,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6536,6536,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11164,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11164,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),cljs.core.cst$kw$doc,"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_message,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null)),null,cljs.core.list(null,null),1,11164,11164,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ex], null))),"Returns the message attached to the given Error / ExceptionInfo object.\n  For non-Errors returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",23,11,cljs.core.cst$kw$positional,7107,7107,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/NodeIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NodeIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),2,cljs.core.cst$kw$positional,7107,7107,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/NodeIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,169,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,169,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"*print-fns-bodies* controls whether functions print their source or\n    only their names."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_fn_DASH_bodies_STAR_,"cljs/core.cljs",20,1,true,165,169,cljs.core.cst$sym$boolean,"*print-fns-bodies* controls whether functions print their source or\n    only their names."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9873,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9873,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_string_DASH_print,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9873,9873,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2687,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2687,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_float,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2687,cljs.core.cst$sym$number,2687,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",725,14,725,21,"Marker interface indicating a record object",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IRecord,"cljs/core.cljs",21,1,725,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,725,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null], null), null),"Marker interface indicating a record object",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10049,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10049,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_str,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,10049,10049,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5344,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5344,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_first_DASH_array_DASH_for_DASH_longvec,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)),null,cljs.core.list(null,null),1,5344,5344,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6473,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6473,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_set_DASH_entries_DASH_iterator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,6473,6473,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3739,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3739,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null))),cljs.core.cst$kw$doc,"Returns a lazy seq representing the concatenation of the elements in the supplied colls.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_concat,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,3739,3739,(2),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$zs], null)),"Returns a lazy seq representing the concatenation of the elements in the supplied colls."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10829,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10829,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_methods,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10823,10829,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_js_DASH_reserved,"cljs/core.cljs",11263,1,11265,14,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11265,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,11265,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {null|Object}"], null)], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",676,14,676,31,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IDerefWithTimeout,"cljs/core.cljs",31,1,676,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref_DASH_with_DASH_timeout,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$msec,cljs.core.cst$sym$timeout_DASH_val], null)], null)])], null),null,676,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1094,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1094,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Symbol with the given namespace and name.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_symbol,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,1094,1094,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Symbol with the given namespace and name."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3619,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3619,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."], null),cljs.core.cst$sym$cljs$core_SLASH_to_DASH_array_DASH_2d,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3619,3619,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a (potentially-ragged) 2-dimensional array\n  containing the contents of coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 22, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Subvec,"cljs/core.cljs",16,true,10,5759,false,5759,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$jsdoc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11122,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,11122,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ExceptionInfo,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),null,cljs.core.list(null,null),1,11121,11122,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$message,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@constructor"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2811,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2811,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div. Truncates toward negative infinity."], null),cljs.core.cst$sym$cljs$core_SLASH_mod,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2811,2811,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"Modulus of num and div. Truncates toward negative infinity."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",651,14,651,18,"Protocol for adding set functionality to a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISet,"cljs/core.cljs",18,1,651,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll that does not contain v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)], null)])], null),null,651,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for adding set functionality to a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2071,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2071,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."], null),cljs.core.cst$sym$cljs$core_SLASH_pop,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2071,2071,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"For a list or queue, returns a new list/queue without the first\n  item, for a vector, returns a new vector without the last item.\n  Note - not the same as next/butlast."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",765,14,765,22,"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IPending,"cljs/core.cljs",22,1,765,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_realized_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if a value for x has been produced, false otherwise."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null),null,765,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Delay,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null], null), null),"Protocol for types which can have a deferred realization. Currently only\n  implemented by Delay and LazySeq.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,745,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,745,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$kw$doc,"Returns the key for entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ISorted,cljs.core.cst$sym$cljs$core_SLASH__DASH_entry_DASH_key,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)),null,cljs.core.list(null,null),1,733,745,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null))),"Returns the key for entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_CHAR_MAP,"cljs/core.cljs",335,1,336,11,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,336,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,336,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@enum {string}"], null)], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5378,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5378,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pop_DASH_tail,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5378,5378,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$level,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3814,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3814,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null))),cljs.core.cst$kw$doc,"Returns a transient map that doesn't contain a mapping for key(s).",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_dissoc_BANG_,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,3814,3814,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null)),"Returns a transient map that doesn't contain a mapping for key(s)."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9713,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9713,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_reductions,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9713,9713,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the intermediate values of the reduction (as\n  per reduce) of coll by f, starting with init."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1521,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1521,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements nth in constant time"], null),cljs.core.cst$sym$cljs$core_SLASH_indexed_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1521,cljs.core.cst$sym$boolean,1521,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements nth in constant time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2587,15,2587,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__DASH_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2587,cljs.core.cst$sym$number,2587,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Cycle,"cljs/core.cljs",15,true,10,4792,false,4792,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",706,13,706,19,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,"Returns true if o and other are equal, false otherwise.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IEquiv,cljs.core.cst$sym$cljs$core_SLASH__DASH_equiv,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null)),null,cljs.core.list(null,null),1,704,cljs.core.cst$sym$boolean,706,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$other], null))),"Returns true if o and other are equal, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",23,10,cljs.core.cst$kw$positional,9520,9520,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),null,"Positional factory function for cljs.core/RangeIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RangeIterator,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9520,9520,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null))),null,"Positional factory function for cljs.core/RangeIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"cljs/core.cljs",19,10,cljs.core.cst$kw$positional,7380,7380,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"Positional factory function for cljs.core/ArrayNode."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNode,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7380,7380,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"Positional factory function for cljs.core/ArrayNode."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3802,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3802,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_assoc_BANG_,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,3802,3802,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"When applied to a transient map, adds mapping of key(s) to\n  val(s). When applied to a transient vector, sets the val at index.\n  Note - index must be <= (count vector). Returns coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9315,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9315,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_set,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,9315,9315,(0),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new hash set with supplied keys.  Any equal keys are\n  handled as if by repeated uses of conj."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2534,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2534,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."], null),cljs.core.cst$sym$cljs$core_SLASH_reduce_DASH_kv,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2534,2534,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$init,cljs.core.cst$sym$coll], null))),"Reduces an associative collection. f should be a function of 3\n  arguments. Returns the result of applying f to init, the first key\n  and the first value in coll, then applying f to that result and the\n  2nd key and value, etc. If coll contains no entries, returns init\n  and f is not called. Note that reduce-kv is supported on vectors,\n  where the keys will be the ordinals."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4423,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4423,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),cljs.core.cst$kw$doc,"Sets the value of atom to newval without regard for the\n  current value. Returns new-value."], null),cljs.core.cst$sym$cljs$core_SLASH_reset_BANG_,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,4423,4423,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of atom to newval without regard for the\n  current value. Returns new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9384,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9384,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns the name String of a string, symbol or keyword."], null),cljs.core.cst$sym$cljs$core_SLASH_name,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9384,9384,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the name String of a string, symbol or keyword."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,8363,8363,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/RedNode."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RedNode,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8363,8363,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/RedNode."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5352,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5352,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_array_DASH_for,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,5352,5352,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",534,14,534,16,"Marker protocol",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_Fn,"cljs/core.cljs",16,1,534,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,534,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$function,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null], null), null),"Marker protocol",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1741,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1741,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (first x))"], null),cljs.core.cst$sym$cljs$core_SLASH_ffirst,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1741,1741,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (first x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,7360,7360,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ArrayNodeIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNodeIterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7360,7360,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ArrayNodeIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9321,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9321,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keys)], null),null,cljs.core.list(null),1,9321,9321,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10035,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10035,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prints a sequence of objects using string-print, observing all\n  the options given in opts"], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_with_DASH_opts,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10035,10035,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Prints a sequence of objects using string-print, observing all\n  the options given in opts"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,"cljs/core.cljs",27,true,10,8634,false,8634,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10098,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10098,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_strip_DASH_ns,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)),null,cljs.core.list(null,null),1,10098,10098,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$named], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,8634,8634,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentTreeMap."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8634,8634,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentTreeMap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1484,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1484,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_reduce,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null,null),1,1484,1484,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1517,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1517,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements count in constant time"], null),cljs.core.cst$sym$cljs$core_SLASH_counted_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1517,cljs.core.cst$sym$boolean,1517,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements count in constant time"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11238,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11238,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),cljs.core.cst$kw$doc,"Construct a data representation of a tagged literal from a\n  tag symbol and a form."], null),cljs.core.cst$sym$cljs$core_SLASH_tagged_DASH_literal,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null)),null,cljs.core.list(null,null),1,11238,11238,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$symbol_QMARK_,cljs.core.cst$sym$tag)], null)], null)))),"Construct a data representation of a tagged literal from a\n  tag symbol and a form."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10079,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10079,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"Same as print followed by (newline)",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_println,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,10079,10079,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"Same as print followed by (newline)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5241,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5241,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),cljs.core.cst$kw$doc,"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."], null),cljs.core.cst$sym$cljs$core_SLASH_assoc_DASH_in,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$p__3836,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,5241,5241,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$v], null))),"Associates a value in a nested associative structure, where ks is a\n  sequence of keys and v is the new value and returns a new nested structure.\n  If any levels do not exist, hash-maps will be created."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,"cljs/core.cljs",27,true,10,9042,false,9042,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2871,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2871,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Test bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_test,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2871,cljs.core.cst$sym$boolean,2871,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Test bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",19,10,cljs.core.cst$kw$positional,11378,11378,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null),"Positional factory function for cljs.core/Namespace."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Namespace,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,11378,11378,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null),"Positional factory function for cljs.core/Namespace."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7033,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,7033,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,"cljs/core.cljs",26,true,10,7942,false,true,7942,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,7767,7767,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentHashMap."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentHashMap,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7767,7767,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentHashMap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6539,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6539,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_extend_DASH_kv,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6539,6539,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",854,14,854,19,"Protocol for adding swapping functionality.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISwap,"cljs/core.cljs",19,1,854,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_swap_BANG_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Swaps the value of o to be (apply f current-value-of-atom args)."], null)),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$xs], null)], null)])], null),null,854,cljs.core.cst$sym$any,cljs.core.PersistentHashSet.EMPTY,"Protocol for adding swapping functionality.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2149,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,2149,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,"cljs/core.cljs",21,true,10,3513,false,true,3513,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10591,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10591,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."], null),cljs.core.cst$sym$cljs$core_SLASH_memoize,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,10591,10591,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Returns a memoized version of a referentially transparent function. The\n  memoized version of the function keeps a cache of the mapping from arguments\n  to results and, when calls with the same arguments are repeated often, has\n  higher performance at the expense of higher memory use."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10304,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10304,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_alter_DASH_meta_BANG_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,10304,10304,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n  (apply f its-current-meta args)\n\n  f must be free of side-effects"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),"cljs/core.cljs",28,10,cljs.core.cst$kw$positional,872,872,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),"Positional factory function for cljs.core/StringBufferWriter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_StringBufferWriter,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,872,872,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IWriter,null], null), null),"Positional factory function for cljs.core/StringBufferWriter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2916,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2916,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if num is zero, else false"], null),cljs.core.cst$sym$cljs$core_SLASH_zero_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2916,cljs.core.cst$sym$boolean,2916,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if num is zero, else false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5918,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5918,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tv_DASH_ensure_DASH_editable,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)),null,cljs.core.list(null,null),1,5918,5918,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$node], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3352,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3352,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a keyword without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_keyword_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3352,cljs.core.cst$sym$boolean,3352,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a keyword without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1525,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1525,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_indexOf,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,1525,1525,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH__STAR_main_DASH_cli_DASH_fn_STAR_,"cljs/core.cljs",294,1,298,16,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments",new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,298,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,298,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$doc,"When compiled for a command-line target, whatever function\n  *main-cli-fn* is set to will be called with the command-line\n  argv as arguments"], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",668,9,668,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IVector,"Returns a new vector with value val added at position n.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_DASH_n,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,666,cljs.core.cst$sym$clj,668,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null))),"Returns a new vector with value val added at position n."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2715,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2715,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one less than x, an int."], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_dec_DASH_int,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2715,2715,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one less than x, an int."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2984,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2984,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_imap,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,2984,2984,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10791,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10791,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_dominates,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)),null,cljs.core.list(null,null),1,10791,10791,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$hierarchy], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3782,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3782,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),cljs.core.cst$kw$doc,"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."], null),cljs.core.cst$sym$cljs$core_SLASH_persistent_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,3782,3782,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Returns a new, persistent version of the transient collection, in\n  constant time. The transient collection cannot be used after this\n  call, any such use will throw an exception."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,86,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,86,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Set *print-fn* to f."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_print_DASH_fn_BANG_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,86,86,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Set *print-fn* to f."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1756,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1756,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (next (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_nnext,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1756,1756,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (next (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH_Box,"cljs/core.cljs",13,true,10,7044,false,7044,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8165,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8165,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_right,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)),null,cljs.core.list(null,null),1,8165,8165,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$ins], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10834,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10834,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_throw_DASH_no_DASH_method_DASH_error,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10834,10834,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_val], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11312,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11312,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_demunge_DASH_str,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)),null,cljs.core.list(null,null),1,11312,11312,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$munged_DASH_name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10318,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10318,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"], null),cljs.core.cst$sym$cljs$core_SLASH_add_DASH_watch,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,10318,10318,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null))),"Adds a watch function to an atom reference. The watch fn must be a\n  fn of 4 args: a key, the reference, its old-state, its\n  new-state. Whenever the reference's state might have been changed,\n  any registered watches will have their functions called. The watch\n  fn will be called synchronously. Note that an atom's state\n  may have changed again prior to the fn call, so use old/new-state\n  rather than derefing the reference. Keys must be unique per\n  reference, and can be used to remove the watch with remove-watch,\n  but are otherwise considered opaque by the watch mechanism.  Bear in\n  mind that regardless of the result or action of the watch fns the\n  atom's value will change.  Example:\n\n      (def a (atom 0))\n      (add-watch a :inc (fn [k r o n] (assert (== 0 n))))\n      (swap! a inc)\n      ;; Assertion Error\n      (deref a)\n      ;=> 1"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4187,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4187,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for every x in\n  coll, else true."], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_every_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4187,cljs.core.cst$sym$boolean,4187,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns false if (pred x) is logical true for every x in\n  coll, else true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2822,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2822,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"remainder of dividing numerator by denominator."], null),cljs.core.cst$sym$cljs$core_SLASH_rem,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2822,2822,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"remainder of dividing numerator by denominator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2117,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2117,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll implements IFind"], null),cljs.core.cst$sym$cljs$core_SLASH_ifind_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2117,cljs.core.cst$sym$boolean,2117,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll implements IFind"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10011,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10011,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_sb_DASH_with_DASH_opts,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10011,10011,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",21,10,cljs.core.cst$kw$positional,7755,7755,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/HashMapIter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashMapIter,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7755,7755,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/HashMapIter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_BitmapIndexedNode,"cljs/core.cljs",27,true,10,7145,false,7145,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,7610,7610,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/NodeSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_NodeSeq,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7610,7610,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/NodeSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4192,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4192,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"], null),cljs.core.cst$sym$cljs$core_SLASH_some,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4192,4192,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns the first logical true value of (pred x) for any x in coll,\n  else nil.  One common idiom is to use a set as pred, for example\n  this will return :fred if :fred is in the sequence, otherwise nil:\n  (some #{:fred} coll)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",839,14,839,20,"Protocol for adding a name.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_INamed,"cljs/core.cljs",20,1,839,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_name,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the name String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_namespace,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$string,cljs.core.cst$kw$doc,"Returns the namespace String of x."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)], null)])], null),null,839,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null], null), null),"Protocol for adding a name.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[cljs.core.PersistentHashSet.EMPTY,"cljs/core.cljs",13,10,cljs.core.cst$kw$positional,7044,7044,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/Box."]),cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Box,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7044,7044,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/Box."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",689,14,689,21,"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IReduce,"cljs/core.cljs",21,1,689,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_reduce,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"f should be a function of 2 arguments. If start is not supplied,\n     returns the result of applying f to the first 2 items in coll, then\n     applying f to that result and the 3rd item, etc."], null)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$f,cljs.core.cst$sym$start], null)], null)])], null),null,689,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 25, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for seq types that can reduce themselves.\n  Called by cljs.core/reduce.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2272,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2272,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is negative."], null),cljs.core.cst$sym$cljs$core_SLASH_neg_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2272,cljs.core.cst$sym$boolean,2272,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies int? and is negative."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4728,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4728,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.with_meta(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)),cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$pre,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$number_QMARK_,cljs.core.cst$sym$n)], null)], null)))),cljs.core.cst$kw$doc,"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4728,4728,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of all but the first n items in coll.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NodeIterator,"cljs/core.cljs",23,true,11,7107,false,7107,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2156,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2156,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"Create JavaSript object from an even number arguments representing\n  interleaved keys and values.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_obj,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,2156,2156,(0),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"Create JavaSript object from an even number arguments representing\n  interleaved keys and values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",786,14,786,34,"Protocol for adding basic functionality to transient collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"cljs/core.cljs",34,1,786,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Adds value val to tcoll and returns tcoll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_persistent_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Creates a persistent data structure from tcoll and returns it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)], null)])], null),null,786,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null], null), null),"Protocol for adding basic functionality to transient collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Atom,"cljs/core.cljs",14,true,10,4375,false,4375,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IWatchable,null,cljs.core.cst$sym$cljs$core_SLASH_IAtom,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1841,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1841,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null))),cljs.core.cst$kw$doc,"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_nth,false,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,1841,1841,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value at the index. get returns nil if index out of\n  bounds, nth throws an exception unless not-found is supplied.  nth\n  also works for strings, arrays, regex Matchers and Lists, and,\n  in O(n) time, for sequences."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2125,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2125,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies ISorted"], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2125,cljs.core.cst$sym$boolean,2125,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies ISorted"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,229,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,229,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is nil, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_nil_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,229,cljs.core.cst$sym$boolean,229,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is nil, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4856,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4856,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take n coll) (drop n coll)]"], null),cljs.core.cst$sym$cljs$core_SLASH_split_DASH_at,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4856,4856,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"Returns a vector of [(take n coll) (drop n coll)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$anonymous,true,cljs.core.cst$kw$protocols,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$kw$factory,cljs.core.cst$kw$positional,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta1395], null))),cljs.core.cst$kw$doc,"Positional factory function for cljs.core/t_cljs$core1394.",cljs.core.cst$kw$file,"cljs/core.cljs"], null),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_t_cljs$core1394,false,"cljs/core.cljs",cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta1395], null)),null,cljs.core.list(null,null),true,3,cljs.core.cst$kw$positional,3961,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta1395], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/t_cljs$core1394."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9030,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,9030,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$declared,true], null),1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,"cljs/core.cljs",26,true,10,9160,false,true,9160,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_e,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,211,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,213,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,213,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,213,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the most recent exception caught by the repl"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6550,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6550,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map_DASH_extend_DASH_kv,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,6550,6550,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10026,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10026,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Same as pr-str-with-opts followed by (newline)"], null),cljs.core.cst$sym$cljs$core_SLASH_prn_DASH_str_DASH_with_DASH_opts,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10026,10026,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$opts], null))),"Same as pr-str-with-opts followed by (newline)"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_not_DASH_native,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,220,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,220,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,220,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,220,cljs.core.cst$kw$end_DASH_column,16], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10455,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10455,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_random_DASH_sample,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10455,10455,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prob,cljs.core.cst$sym$coll], null)),"Returns items from coll with random probability of prob (0.0 -\n  1.0).  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9014,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9014,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),cljs.core.cst$kw$doc,"Returns a map containing only those entries in map whose key is in keys"], null),cljs.core.cst$sym$cljs$core_SLASH_select_DASH_keys,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null)),null,cljs.core.list(null,null),1,9014,9014,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map,cljs.core.cst$sym$keyseq], null))),"Returns a map containing only those entries in map whose key is in keys"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2834,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2834,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise and",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_and,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2834,2834,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise and"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3718,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3718,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq",cljs.core.cst$kw$added,"1.9"], null),"1.9",cljs.core.cst$sym$cljs$core_SLASH_bounded_DASH_count,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3718,3718,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null))),"If coll is counted? returns its count, else will count at most the first n\n   elements of coll using its seq"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5277,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5277,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_update,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null)),null,cljs.core.list(null,null,null,null,null),1,5277,5277,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$k,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"'Updates' a value in an associative structure, where k is a\n  key and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  structure.  If the key does not exist, nil is passed as the old value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_gensym_counter,"cljs/core.cljs",10349,1,10351,17,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null),new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10351,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10351,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$clj_DASH_nil]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11468,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11468,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),cljs.core.cst$kw$doc,"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_find_DASH_macros_DASH_ns,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null)),null,cljs.core.list(null,null),1,11468,11468,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns], null))),"Returns the macros namespace named by the symbol or nil if it doesn't exist.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3764,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3764,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_list_STAR_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null,null,null,null),1,3764,3764,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Creates a new list containing the items prepended to the rest, the\n  last of which will be treated as a sequence."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6486,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6486,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_keyword_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6486,6486,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,3274,3274,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),"Positional factory function for cljs.core/Keyword."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Keyword,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3274,3274,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),"Positional factory function for cljs.core/Keyword."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5250,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5250,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_update_DASH_in,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(6),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null)),null,cljs.core.list(null,null,null,null,null),1,5250,5250,(6),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ks], null),cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"'Updates' a value in a nested associative structure, where ks is a\n  sequence of keys and f is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested structure.  If any levels do not exist, hash-maps will be\n  created."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11032,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11032,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),cljs.core.cst$kw$doc,"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"], null),cljs.core.cst$sym$cljs$core_SLASH_prefer_DASH_method,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)),null,cljs.core.list(null,null),1,11032,11032,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val_DASH_x,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null))),"Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y\n   when there is a conflict"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1041,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1041,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_symbol,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)),null,cljs.core.list(null,null),1,1041,1041,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sym], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1431,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1431,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is already reduced?, returns it, else returns (reduced x)"], null),cljs.core.cst$sym$cljs$core_SLASH_ensure_DASH_reduced,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1431,1431,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is already reduced?, returns it, else returns (reduced x)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7078,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7078,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_edit_DASH_and_DASH_set,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,7078,7078,6,true,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$inode,cljs.core.cst$sym$edit,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",28,10,cljs.core.cst$kw$positional,6733,6733,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentArrayMap."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMap,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6733,6733,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentArrayMap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1030,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1030,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false"], null),cljs.core.cst$sym$cljs$core_SLASH_instance_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1030,cljs.core.cst$sym$boolean,1030,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$c,cljs.core.cst$sym$x], null))),"Evaluates x and tests if it is an instance of the type\n  c. Returns true or false"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1313,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1313,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),cljs.core.cst$kw$doc,"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_mix_DASH_collection_DASH_hash,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null)),null,cljs.core.list(null,null),1,1313,cljs.core.cst$sym$number,1313,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_basis,cljs.core.cst$sym$count], null))),"Mix final collection hash for ordered or unordered collections.\n   hash-basis is the combined collection hash, count is the number\n   of elements included in the basis. Note this is the hash code\n   consistent with =, different from .hashCode.\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9811,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9811,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_find,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9811,9811,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns the first regex match, if any, of s to re, using\n  re.exec(s). Returns a vector, containing first the matching\n  substring, then any capturing groups if the regular expression contains\n  capturing groups."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10502,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10502,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_run_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,10502,10502,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proc,cljs.core.cst$sym$coll], null))),"Runs the supplied procedure (via reduce), for purposes of side\n  effects, on successive items in the collection. Returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_char_DASH_escapes,"cljs/core.cljs",9882,1,9882,28,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9882,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9882,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ES6Iterator,"cljs/core.cljs",21,true,10,1277,false,1277,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8985,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8985,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),cljs.core.cst$kw$doc,"Returns the value in the map entry."], null),cljs.core.cst$sym$cljs$core_SLASH_val,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null)),null,cljs.core.list(null,null),1,8985,8985,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$map_DASH_entry], null))),"Returns the value in the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2696,15,2696,28,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_add,true,"cljs/core.cljs",28,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2696,cljs.core.cst$sym$number,2696,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4136,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4136,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_transformer_DASH_iterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)),null,cljs.core.list(null,null),1,4136,4136,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,246,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,246,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is logical false, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_not,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,246,cljs.core.cst$sym$boolean,246,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is logical false, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,861,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,861,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$kw$doc,"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IVolatile,cljs.core.cst$sym$cljs$core_SLASH__DASH_vreset_BANG_,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,859,861,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of volatile o to new-value without regard for the\n     current value. Returns new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2398,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,2398,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."], null),true,cljs.core.cst$sym$cljs$core_SLASH_fn_DASH__GT_comparator,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,2398,2398,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Given a fn that might be boolean valued or a comparator,\n   return a fn that is a comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2048,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2048,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$doc,"Returns an object of the same type and value as obj, with\n  map m as its metadata."], null),cljs.core.cst$sym$cljs$core_SLASH_with_DASH_meta,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,2048,2048,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null))),"Returns an object of the same type and value as obj, with\n  map m as its metadata."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1436,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1436,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"If x is reduced?, returns (deref x), else returns x"], null),cljs.core.cst$sym$cljs$core_SLASH_unreduced,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1436,1436,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"If x is reduced?, returns (deref x), else returns x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2140,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2140,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies IRecord"], null),cljs.core.cst$sym$cljs$core_SLASH_record_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2140,cljs.core.cst$sym$boolean,2140,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies IRecord"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,305,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,305,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return x's constructor."], null),cljs.core.cst$sym$cljs$core_SLASH_type,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,305,305,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return x's constructor."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,224,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,224,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Tests if 2 arguments are the same object"], null),cljs.core.cst$sym$cljs$core_SLASH_identical_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,224,cljs.core.cst$sym$boolean,224,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Tests if 2 arguments are the same object"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",843,12,843,22,cljs.core.cst$sym$string,cljs.core.cst$sym$cljs$core_SLASH_INamed,"Returns the namespace String of x.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INamed,cljs.core.cst$sym$cljs$core_SLASH__DASH_namespace,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,839,cljs.core.cst$sym$string,843,1,cljs.core.cst$sym$string,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns the namespace String of x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2720,15,2720,35,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_divide_DASH_int,true,"cljs/core.cljs",35,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2720,cljs.core.cst$sym$number,2720,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11487,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11487,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),cljs.core.cst$kw$doc,"Returns the name of the namespace, a Namespace object.\n  Bootstrap only."], null),cljs.core.cst$sym$cljs$core_SLASH_ns_DASH_name,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null)),null,cljs.core.list(null,null),1,11487,11487,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns_DASH_obj], null))),"Returns the name of the namespace, a Namespace object.\n  Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10665,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10665,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_swap_DASH_global_DASH_hierarchy_BANG_,true,"cljs/core.cljs",30,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$f,cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,10665,10665,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9405,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9405,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is greatest.\n  \n  If there are multiple such xs, the last one is returned.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_max_DASH_key,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,9405,9405,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is greatest.\n  \n  If there are multiple such xs, the last one is returned."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,9197,9197,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentTreeSet."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeSet,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9197,9197,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISet,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISorted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/PersistentTreeSet."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,59,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,59,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_out_STAR_,"cljs/core.cljs",8,1,true,56,59,cljs.core.cst$sym$clj_DASH_nil,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),"cljs/core.cljs",21,10,cljs.core.cst$kw$positional,3464,3464,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),"Positional factory function for cljs.core/ChunkBuffer."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkBuffer,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3464,3464,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_ICounted,null], null), null),"Positional factory function for cljs.core/ChunkBuffer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,976,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,976,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_string,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,976,976,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ValSeq,"cljs/core.cljs",16,true,10,8914,false,8914,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10830,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10830,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_prefers,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10823,10830,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4500,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4500,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."], null),cljs.core.cst$sym$cljs$core_SLASH_set_DASH_validator_BANG_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4500,4500,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$val], null))),"Sets the validator-fn for an atom. validator-fn must be nil or a\n  side-effect-free fn of one argument, which will be passed the intended\n  new state on any state change. If the new state is unacceptable, the\n  validator-fn should return false or throw an Error. If the current state\n  is not acceptable to the new validator, an Error will be thrown and the\n  validator will not be changed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3332,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3332,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword"], null),cljs.core.cst$sym$cljs$core_SLASH_ident_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3332,cljs.core.cst$sym$boolean,3332,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",681,16,681,21,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_IMeta,"Returns the metadata of object o.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IMeta,cljs.core.cst$sym$cljs$core_SLASH__DASH_meta,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,679,cljs.core.cst$sym$clj_DASH_or_DASH_nil,681,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the metadata of object o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8138,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,8138,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RedNode,"cljs/core.cljs",17,true,10,8363,false,true,8363,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10832,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10832,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_dispatch_DASH_fn,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10823,10832,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",28,10,cljs.core.cst$kw$positional,1559,1559,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/IndexedSeqIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_IndexedSeqIterator,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1559,1559,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/IndexedSeqIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10825,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10825,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_add_DASH_method,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)),null,cljs.core.list(null,null),1,10823,10825,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8187,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8187,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_left_DASH_del,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,8187,8187,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$del,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4454,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4454,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_swap_BANG_,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,4454,4454,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8979,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8979,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),cljs.core.cst$kw$doc,"Returns a sequence of the map's values."], null),cljs.core.cst$sym$cljs$core_SLASH_vals,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null)),null,cljs.core.list(null,null),1,8979,8979,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),"Returns a sequence of the map's values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Repeat,"cljs/core.cljs",16,true,10,4861,false,4861,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,836,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,836,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,cljs.core.cst$sym$cljs$core_SLASH__DASH_chunked_DASH_next,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,834,836,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first chunk."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Single,"cljs/core.cljs",16,true,10,4038,false,4038,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2758,15,2758,33,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_subtract,true,"cljs/core.cljs",33,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2758,cljs.core.cst$sym$number,2758,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no ys are supplied, returns the negation of x, else subtracts\n  the ys from x and returns the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11358,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,11358,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value."], null),cljs.core.cst$sym$cljs$core_SLASH_tap_GT_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,11358,cljs.core.cst$sym$boolean,11358,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Sends x to any taps. Returns the result of *exec-tap-fn*, a Boolean value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7066,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7066,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_pair,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,7066,7066,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",638,14,638,18,"Protocol for adding mapping functionality to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMap,"cljs/core.cljs",18,1,638,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_dissoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the mapping for key k."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null)])], null),null,638,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null], null), null),"Protocol for adding mapping functionality to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,3994,3994,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/SeqIter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_SeqIter,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3994,3994,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/SeqIter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9326,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9326,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null))),cljs.core.cst$kw$doc,"Returns a new sorted set with supplied keys, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_set_DASH_by,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keys)], null),null,cljs.core.list(null),1,9326,9326,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keys], null)),"Returns a new sorted set with supplied keys, using the supplied comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 24, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,"cljs/core.cljs",26,true,10,5433,false,5433,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1197,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1197,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Return true if x implements ICloneable protocol."], null),cljs.core.cst$sym$cljs$core_SLASH_cloneable_QMARK_,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,1197,cljs.core.cst$sym$boolean,1197,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Return true if x implements ICloneable protocol."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3340,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3340,cljs.core.cst$kw$end_DASH_column,32,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_ident_QMARK_,false,"cljs/core.cljs",32,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3340,cljs.core.cst$sym$boolean,3340,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,959,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,959,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_string_STAR_,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,959,959,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7048,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,7048,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_key_DASH_test,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)),null,cljs.core.list(null,null),1,7048,cljs.core.cst$sym$boolean,7048,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$other], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10824,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10824,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_reset,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)),null,cljs.core.list(null,null),1,10823,10824,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2199,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2199,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value true, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_true_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2199,cljs.core.cst$sym$boolean,2199,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is the value true, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11402,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11402,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Bootstrap only."], null),true,cljs.core.cst$sym$cljs$core_SLASH_find_DASH_ns_DASH_obj_STAR_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null)),null,cljs.core.list(null,null),1,11402,11402,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ctxt,cljs.core.cst$sym$xs], null))),"Bootstrap only."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,435,cljs.core.cst$kw$column,14,cljs.core.cst$kw$end_DASH_line,435,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$array,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),cljs.core.cst$kw$doc,"Creates a new javascript array.\n@param {...*} var_args"], null),cljs.core.cst$sym$cljs$core_SLASH_array,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null)),null,cljs.core.list(null,null),1,435,cljs.core.cst$sym$array,435,1,cljs.core.cst$sym$array,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$var_DASH_args], null))),"Creates a new javascript array.\n@param {...*} var_args"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10070,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,10070,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$doc,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."], null),cljs.core.cst$sym$cljs$core_SLASH_print,true,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs], null)),null,cljs.core.List.EMPTY,1,10067,10070,0,true,null,"Prints the object(s) using string-print.\n  print and println produce output for human consumption."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,660,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,660,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$kw$doc,"Returns the item from the top of the stack. Is used by cljs.core/peek.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IStack,cljs.core.cst$sym$cljs$core_SLASH__DASH_peek,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,656,660,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the item from the top of the stack. Is used by cljs.core/peek."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",601,14,601,18,"Protocol for collections to provide access to their items as sequences.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISeq,"cljs/core.cljs",18,1,601,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first item in the collection coll. Used by cljs.core/first."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_rest,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,601,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null], null), null),"Protocol for collections to provide access to their items as sequences.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1788,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1788,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns an empty collection of the same category as coll, or nil"], null),cljs.core.cst$sym$cljs$core_SLASH_empty,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1788,1788,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns an empty collection of the same category as coll, or nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11027,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11027,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Removes the method of multimethod associated with dispatch-value."], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_method,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,11027,11027,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),"Removes the method of multimethod associated with dispatch-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,"cljs/core.cljs",28,true,10,6121,false,6121,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8206,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8206,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_balance_DASH_right_DASH_del,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)),null,cljs.core.list(null,null),1,8206,8206,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$del], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4526,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4526,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),cljs.core.cst$kw$doc,"Creates and returns a Volatile with an initial value of val."], null),cljs.core.cst$sym$cljs$core_SLASH_volatile_BANG_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,4526,4526,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),"Creates and returns a Volatile with an initial value of val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.cst$kw$file,"cljs/core.cljs"], null),cljs.core.cst$sym$cljs$core_SLASH__SLASH_,true,"cljs/core.cljs",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2603,cljs.core.cst$sym$number,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"If no denominators are supplied, returns 1/numerator,\n  else returns numerator divided by all of the denominators."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7075,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7075,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_bitpos,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)),null,cljs.core.list(null,null),1,7075,7075,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash,cljs.core.cst$sym$shift], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Many,"cljs/core.cljs",14,true,10,4024,false,4024,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2840,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2840,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Bitwise or",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_or,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2840,2840,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Bitwise or"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,920,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,920,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_fmix,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,920,cljs.core.cst$sym$number,920,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h1,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5658,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5658,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Creates a new vector containing the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_vector,true,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$args)], null),null,cljs.core.list(null),1,5658,5658,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Creates a new vector containing the args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2974,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2974,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_coll,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,2974,2974,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7057,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7057,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_clone_DASH_and_DASH_set,false,"cljs/core.cljs",21,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,7057,7057,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$a,cljs.core.cst$sym$j,cljs.core.cst$sym$b], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7035,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7035,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH__GT_transient_DASH_hash_DASH_map,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,7035,7035,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$len,cljs.core.cst$sym$arr], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2646,16,2646,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__GT__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2646,cljs.core.cst$sym$boolean,2646,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums are in monotonically non-increasing order,\n  otherwise false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",26,10,cljs.core.cst$kw$positional,9160,9160,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientHashSet."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientHashSet,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9160,9160,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientHashSet."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4753,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4753,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return a lazy sequence of all but the last n (default 1) items in coll",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_last,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,4753,4753,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$s], null)),"Return a lazy sequence of all but the last n (default 1) items in coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",19,10,cljs.core.cst$kw$positional,3979,3979,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ArrayIter."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayIter,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3979,3979,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/ArrayIter."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,258,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,258,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x's constructor is Object"], null),cljs.core.cst$sym$cljs$core_SLASH_object_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,258,cljs.core.cst$sym$boolean,258,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x's constructor is Object"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",22,10,cljs.core.cst$kw$positional,7688,7688,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ArrayNodeSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayNodeSeq,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7688,7688,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ArrayNodeSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10104,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10104,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null))),cljs.core.cst$kw$doc,"Returns [lifted-ns lifted-map] or nil if m can't be lifted."], null),true,cljs.core.cst$sym$cljs$core_SLASH_lift_DASH_ns,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null)),null,cljs.core.list(null,null),1,10104,10104,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m], null))),"Returns [lifted-ns lifted-map] or nil if m can't be lifted."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8546,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8546,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_append,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)),null,cljs.core.list(null,null),1,8546,8546,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$left,cljs.core.cst$sym$right], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3956,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3956,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"If coll is empty, returns nil, else coll"], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_empty,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3956,3956,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"If coll is empty, returns nil, else coll"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9350,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9350,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_distinct,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9350,9350,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the elements of coll with duplicates removed.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5200,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5200,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,5200,5200,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$pad,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists of n items each, at offsets step\n  apart. If step is not supplied, defaults to n, i.e. the partitions\n  do not overlap. If a pad collection is supplied, use its elements as\n  necessary to complete last partition up to n items. In case there are\n  not enough padding elements, return a partition with less than n items."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",10823,14,10823,22,null,true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,"cljs/core.cljs",22,1,10823,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentHashMap.fromArrays([cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefer_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_default_DASH_dispatch_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_methods,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_prefers,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_dispatch_DASH_fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_reset,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),cljs.core.with_meta(cljs.core.cst$sym$_DASH_get_DASH_method,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null))],[new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$dispatch_DASH_val_DASH_y], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val,cljs.core.cst$sym$method], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf], null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)], null)])], null),null,10823,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null], null), null),null,cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",14,10,cljs.core.cst$kw$positional,4024,4024,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null))),null,"Positional factory function for cljs.core/Many."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Many,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4024,4024,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vals], null))),null,"Positional factory function for cljs.core/Many."]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_DEMUNGE_PATTERN,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,389,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,389,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,389,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,389,cljs.core.cst$kw$end_DASH_column,21], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_nil], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2772,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2772,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_fix,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)),null,cljs.core.list(null,null),1,2772,cljs.core.cst$sym$number,2772,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$q], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_EmptyList,"cljs/core.cljs",19,true,10,3091,false,3091,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashMapIter,"cljs/core.cljs",21,true,10,7755,false,7755,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",625,14,625,26,"Protocol for adding associativity to collections.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"cljs/core.cljs",26,1,625,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_contains_DASH_key_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$doc,"Returns true if k is a key in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_assoc,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with a mapping from key k to\n     value v added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)], null)])], null),null,625,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding associativity to collections.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,4038,4038,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/Single."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Single,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4038,4038,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),null,"Positional factory function for cljs.core/Single."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2857,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2857,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Flip bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_flip,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2857,2857,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Flip bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3652,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3652,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_long_DASH_array,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3652,3652,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of longs. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10704,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10704,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_descendants,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,10704,10704,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate and indirect children of tag, through a\n  relationship established via derive. h must be a hierarchy obtained\n  from make-hierarchy, if not supplied defaults to the global\n  hierarchy. Note: does not work on JavaScript type inheritance\n  relationships."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,899,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,899,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_imul,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),3,899,cljs.core.cst$sym$number,899,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"cljs/core.cljs",15,10,cljs.core.cst$kw$positional,10365,10365,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Delay."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Delay,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,10365,10365,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Delay."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5363,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5363,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_for,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)),null,cljs.core.list(null,null),1,5363,5363,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pv,cljs.core.cst$sym$i], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8990,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8990,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null))),cljs.core.cst$kw$doc,"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_merge,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$maps)], null),null,cljs.core.list(null),1,8990,8990,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$maps], null)),"Returns a map that consists of the rest of the maps conj-ed onto\n  the first.  If a key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",714,14,714,22,"Protocol for adding the ability to a type to be transformed into a sequence.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,"cljs/core.cljs",22,1,714,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$kw$doc,"Returns a seq of o, or nil if o is empty."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,714,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 34, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_ES6IteratorSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to a type to be transformed into a sequence.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[0,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Empty,"cljs/core.cljs",15,true,10,4057,false,4057,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2806,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2806,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),cljs.core.cst$kw$doc,"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"], null),cljs.core.cst$sym$cljs$core_SLASH_js_DASH_mod,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null)),null,cljs.core.list(null,null),1,2806,2806,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$d], null))),"Modulus of num and div with original javascript behavior. i.e. bug for negative numbers"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2240,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2240,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is a JavaScript number with no decimal part."], null),cljs.core.cst$sym$cljs$core_SLASH_integer_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2240,cljs.core.cst$sym$boolean,2240,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is a JavaScript number with no decimal part."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_MetaFn,"cljs/core.cljs",16,true,10,1995,false,1995,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11400,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,11400,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$doc,"Bootstrap only.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH_NS_CACHE,"cljs/core.cljs",11,1,11398,11400,cljs.core.cst$sym$clj_DASH_nil,"Bootstrap only.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5175,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5175,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_mapv,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null)),null,cljs.core.list(null,null,null,null),1,5175,5175,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$c1,cljs.core.cst$sym$c2,cljs.core.cst$sym$c3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Returns a vector consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2311,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2311,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true for Infinity and -Infinity values."], null),cljs.core.cst$sym$cljs$core_SLASH_infinite_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2311,cljs.core.cst$sym$boolean,2311,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true for Infinity and -Infinity values."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9434,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9434,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_all,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,9434,9434,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$step,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of lists like partition, but may include\n  partitions with fewer than n items at the end.  Returns a stateful\n  transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9663,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9663,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partition_DASH_by,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9663,9663,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$coll], null)),"Applies f to each value in coll, splitting it each time f returns a\n   new value.  Returns a lazy seq of partitions.  Returns a stateful\n   transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",719,14,719,25,"Marker interface indicating a persistent collection of sequential items",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISequential,"cljs/core.cljs",25,1,719,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,719,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 26, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_Eduction,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Marker interface indicating a persistent collection of sequential items",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,3384,3384,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/LazySeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_LazySeq,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3384,3384,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/LazySeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6255,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,6255,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Test map equivalence. Returns true if x equals y, otherwise returns false."], null),cljs.core.cst$sym$cljs$core_SLASH_equiv_DASH_map,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,6255,cljs.core.cst$sym$boolean,6255,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Test map equivalence. Returns true if x equals y, otherwise returns false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"cljs/core.cljs",18,10,cljs.core.cst$kw$positional,4518,4518,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Volatile."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IVolatile,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Volatile,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4518,4518,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Volatile."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3696,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3696,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null))),cljs.core.cst$kw$doc,"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_object_DASH_array,false,"cljs/core.cljs",19,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),null,cljs.core.list(null,null),1,3696,3696,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size_DASH_or_DASH_seq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size,cljs.core.cst$sym$init_DASH_val_DASH_or_DASH_seq], null)),"Creates an array of objects. Does not coerce array, provided for compatibility\n  with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,222,cljs.core.cst$kw$column,20,cljs.core.cst$kw$end_DASH_line,222,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Keyword,"cljs/core.cljs",17,true,10,3274,false,true,3274,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_INamed,null,cljs.core.cst$sym$cljs$core_SLASH_IPrintWithWriter,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10713,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10713,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_derive,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,10713,10713,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),"Establishes a parent/child relationship between parent and\n  tag. Parent must be a namespace-qualified symbol or keyword and\n  child can be either a namespace-qualified symbol or keyword or a\n  class. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4012,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4012,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_seq_DASH_iter,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4012,4012,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",15,10,cljs.core.cst$kw$positional,4057,4057,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),null,"Positional factory function for cljs.core/Empty."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Empty,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4057,4057,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),null,"Positional factory function for cljs.core/Empty."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",827,14,827,25,"Protocol for accessing a collection as sequential chunks.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,"cljs/core.cljs",25,1,827,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the first chunk in coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Return a new collection of coll with the first chunk removed."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,827,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Protocol for accessing a collection as sequential chunks.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11185,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,11185,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x names a special form"], null),cljs.core.cst$sym$cljs$core_SLASH_special_DASH_symbol_QMARK_,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,11185,cljs.core.cst$sym$boolean,11185,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x names a special form"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3262,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,3262,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_keywords,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,3262,3262,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10696,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10696,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_ancestors,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,10696,10696,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate and indirect parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9490,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9490,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subseq,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),null,cljs.core.list(null,null),1,9490,9490,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10353,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10353,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null))),cljs.core.cst$kw$doc,"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_gensym,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,1,cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),null,cljs.core.list(null,null),1,10353,10353,1,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix_DASH_string], null)),"Returns a new symbol with a unique name. If a prefix string is\n  supplied, the name is prefix# where # is some unique number. If\n  prefix is not supplied, the prefix is 'G__'."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",613,16,613,21,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_INext,"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_INext,cljs.core.cst$sym$cljs$core_SLASH__DASH_next,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,611,cljs.core.cst$sym$clj_DASH_or_DASH_nil,613,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first item. In contrast to\n     rest, it should return nil if there are no more items, e.g.\n     (next []) => nil\n     (next nil) => nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"cljs/core.cljs",27,10,cljs.core.cst$kw$positional,7490,7490,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"Positional factory function for cljs.core/HashCollisionNode."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_HashCollisionNode,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7490,7490,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),"Positional factory function for cljs.core/HashCollisionNode."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10377,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10377,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"returns true if x is a Delay created with delay"], null),cljs.core.cst$sym$cljs$core_SLASH_delay_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10377,cljs.core.cst$sym$boolean,10377,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"returns true if x is a Delay created with delay"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7671,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7671,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_inode_DASH_seq,false,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,7671,7671,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5151,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5151,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."], null),cljs.core.cst$sym$cljs$core_SLASH_flatten,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,5151,5151,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Takes any nested combination of sequential things (lists, vectors,\n  etc.) and returns their contents as a single, flat sequence.\n  (flatten nil) returns nil."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",641,9,641,16,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_IMap,"Returns a new collection of coll without the mapping for key k.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IMap,cljs.core.cst$sym$cljs$core_SLASH__DASH_dissoc,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,638,cljs.core.cst$sym$clj,641,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns a new collection of coll without the mapping for key k."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2803,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2803,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_doubles,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2803,2803,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$added,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",10412,7,10412,16,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null))),"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected.","1.9",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),"1.9",cljs.core.cst$sym$cljs$core_SLASH_halt_DASH_when,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),null,cljs.core.list(null,null),1,10412,10412,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$retf], null)),"Returns a transducer that ends transduction when pred returns true\n  for an input. When retf is supplied it must be a fn of 2 arguments -\n  it will be passed the (completed) result so far and the input that\n  triggered the predicate, and its return value (if it does not throw\n  an exception) will be the return value of the transducer. If retf\n  is not supplied, the input that triggered the predicate will be\n  returned. If the predicate never returns true the transduction is\n  unaffected."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",627,13,627,27,cljs.core.cst$sym$boolean,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,"Returns true if k is a key in coll.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)))]),cljs.core.cst$sym$cljs$core_SLASH_IAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_contains_DASH_key_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,625,cljs.core.cst$sym$boolean,627,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k], null))),"Returns true if k is a key in coll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10341,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10341,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),cljs.core.cst$kw$doc,"Removes a watch (set by add-watch) from a reference"], null),cljs.core.cst$sym$cljs$core_SLASH_remove_DASH_watch,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,10341,10341,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref,cljs.core.cst$sym$key], null))),"Removes a watch (set by add-watch) from a reference"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11150,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11150,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null))),cljs.core.cst$kw$doc,"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_ex_DASH_info,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),null,cljs.core.list(null,null),1,11150,11150,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$msg,cljs.core.cst$sym$data,cljs.core.cst$sym$cause], null)),"Create an instance of ExceptionInfo, an Error type that carries a\n  map of additional data."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2235,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2235,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Returns true if f returns true for fn? or satisfies IFn."], null),cljs.core.cst$sym$cljs$core_SLASH_ifn_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,2235,cljs.core.cst$sym$boolean,2235,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Returns true if f returns true for fn? or satisfies IFn."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",846,14,846,19,"Marker protocol indicating an atom.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IAtom,"cljs/core.cljs",19,1,846,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,846,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Atom,null], null), null),"Marker protocol indicating an atom.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"cljs/core.cljs",25,10,cljs.core.cst$kw$positional,6176,6176,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/PersistentQueue."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentQueue,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6176,6176,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/PersistentQueue."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2286,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2286,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is a natural integer value."], null),cljs.core.cst$sym$cljs$core_SLASH_nat_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2286,cljs.core.cst$sym$boolean,2286,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies int? and is a natural integer value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",771,14,771,24,"Protocol for types that can be watched. Currently only implemented by Atom.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWatchable,"cljs/core.cljs",24,1,771,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_notify_DASH_watches,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Calls all watchers with this, oldval and newval."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$oldval,cljs.core.cst$sym$newval], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_add_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Adds a watcher function f to this. Keys must be unique per reference,\n     and can be used to remove the watch with -remove-watch."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key,cljs.core.cst$sym$f], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_remove_DASH_watch,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Removes watcher that corresponds to key from this."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$key], null)], null)])], null),null,771,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Atom,null], null), null),"Protocol for types that can be watched. Currently only implemented by Atom.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5297,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5297,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_fresh_DASH_node,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)),null,cljs.core.list(null,null),1,5297,5297,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5906,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5906,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),cljs.core.cst$kw$doc,"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_subvec,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,5906,5906,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),"Returns a persistent vector of the items in vector from\n  start (inclusive) to end (exclusive).  If end is not supplied,\n  defaults to (count vector). This operation is O(1) and very fast, as\n  the resulting vector shares structure with the original and no\n  trimming is done."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",808,9,808,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"Returns tcoll with the last item removed from it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_pop_BANG_,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null)),null,cljs.core.list(null,null),1,804,cljs.core.cst$sym$clj,808,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll], null))),"Returns tcoll with the last item removed from it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core3354,"cljs/core.cljs",true,true,3,3961,false,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4259,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4259,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_partial,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(4),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null)),null,cljs.core.list(null,null,null,null,null),1,4259,4259,(4),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$arg1,cljs.core.cst$sym$arg2,cljs.core.cst$sym$arg3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Takes a function f and fewer than the normal arguments to f, and\n  returns a fn that takes a variable number of additional args. When\n  called, the returned function calls f with args + additional args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2151,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2151,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is satisfies IChunkedSeq."], null),cljs.core.cst$sym$cljs$core_SLASH_chunked_DASH_seq_QMARK_,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2151,cljs.core.cst$sym$boolean,2151,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is satisfies IChunkedSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4962,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4962,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."], null),cljs.core.cst$sym$cljs$core_SLASH_replicate,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4962,4962,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),"DEPRECATED: Use 'repeat' instead.\n  Returns a lazy seq of n xs."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,"cljs/core.cljs",25,true,10,6176,false,6176,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9414,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9414,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),cljs.core.cst$kw$doc,"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_min_DASH_key,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,9414,9414,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the x for which (k x), a number, is least.\n\n  If there are multiple such xs, the last one is returned."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2994,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2994,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_iset,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2994,2994,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1421,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1421,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Wraps x in a way such that a reduce will terminate with the value x"], null),cljs.core.cst$sym$cljs$core_SLASH_reduced,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1421,1421,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Wraps x in a way such that a reduce will terminate with the value x"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9799,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9799,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Returns the result of (re-find re s) if re fully matches s."], null),cljs.core.cst$sym$cljs$core_SLASH_re_DASH_matches,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9799,9799,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$re,cljs.core.cst$sym$s], null))),"Returns the result of (re-find re s) if re fully matches s."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9906,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9906,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer_DASH_impl,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9906,9906,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8797,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8797,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new array map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_array_DASH_map,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8797,8797,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new array map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",811,14,811,27,"Protocol for adding set functionality to a transient collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,"cljs/core.cljs",27,1,811,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_disjoin_BANG_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns tcoll without v."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)], null)])], null),null,811,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null], null), null),"Protocol for adding set functionality to a transient collection.",cljs.core.list("@interface")]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_ITER_SYMBOL,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,333,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,333,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,333,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,333,cljs.core.cst$kw$end_DASH_column,19], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$string], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2690,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2690,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_byte,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2690,cljs.core.cst$sym$number,2690,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,466,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,466,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aset,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,466,466,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7105,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,7105,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNode,"cljs/core.cljs",19,true,10,7380,false,true,7380,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",20,10,cljs.core.cst$kw$positional,5667,5667,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ChunkedSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ChunkedSeq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5667,5667,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ChunkedSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4576,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4576,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_every_DASH_pred,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),null,cljs.core.list(null,null,null,null),1,4576,4576,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns true if all of its\n  composing predicates return a logical true value against all of its arguments, else it returns\n  false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical false result against the original predicates."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8903,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8903,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),cljs.core.cst$kw$doc,"Returns a sequence of the map's keys."], null),cljs.core.cst$sym$cljs$core_SLASH_keys,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null)),null,cljs.core.list(null,null),1,8903,8903,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$hash_DASH_map], null))),"Returns a sequence of the map's keys."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,311,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,311,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_missing_DASH_protocol,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)),null,cljs.core.list(null,null),1,311,311,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$proto,cljs.core.cst$sym$obj], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,326,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,326,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_load_DASH_file,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)),null,cljs.core.list(null,null),1,326,326,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$file], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1959,cljs.core.cst$kw$column,28,cljs.core.cst$kw$end_DASH_line,1959,cljs.core.cst$kw$end_DASH_column,46,cljs.core.cst$kw$declared,true], null),4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,"cljs/core.cljs",28,true,10,6733,false,true,6733,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2338,16,2338,25,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns true if no two of the arguments are =",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_distinct_QMARK_,true,"cljs/core.cljs",25,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2338,cljs.core.cst$sym$boolean,2338,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns true if no two of the arguments are ="]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2256,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2256,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x satisfies int? and is positive."], null),cljs.core.cst$sym$cljs$core_SLASH_pos_DASH_int_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2256,cljs.core.cst$sym$boolean,2256,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x satisfies int? and is positive."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_never_DASH_equiv,"cljs/core.cljs",6253,1,6253,27,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6253,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,6253,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2692,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2692,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_short,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2692,cljs.core.cst$sym$number,2692,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",15,10,cljs.core.cst$kw$positional,9531,9531,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Range."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Range,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,9531,9531,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Range."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",18,10,cljs.core.cst$kw$positional,6555,6555,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/MapEntry."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_MapEntry,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6555,6555,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/MapEntry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",3849,8,3849,23,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null))),"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_apply_DASH_to_DASH_simple,false,"cljs/core.cljs",23,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,6,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),null,cljs.core.list(null,null,null,null,null),1,3849,3849,6,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a0,cljs.core.cst$sym$a1,cljs.core.cst$sym$a2,cljs.core.cst$sym$a3,cljs.core.with_meta(cljs.core.cst$sym$args,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$seq], null))], null)),"Internal. DO NOT USE!\n  Assumes args was already called with seq beforehand!"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11038,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11038,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),cljs.core.cst$kw$doc,"Given a multimethod, returns a map of dispatch values -> dispatch fns"], null),cljs.core.cst$sym$cljs$core_SLASH_methods,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null)),null,cljs.core.list(null,null),1,11038,11038,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn], null))),"Given a multimethod, returns a map of dispatch values -> dispatch fns"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4212,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4212,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns true if n is odd, throws an exception if n is not an integer"], null),cljs.core.cst$sym$cljs$core_SLASH_odd_QMARK_,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,4212,cljs.core.cst$sym$boolean,4212,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n], null))),"Returns true if n is odd, throws an exception if n is not an integer"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",20,10,cljs.core.cst$kw$positional,3481,3481,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ArrayChunk."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ArrayChunk,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3481,3481,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/ArrayChunk."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",1451,8,1451,17,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null))),"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ci_DASH_reduce,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null,null),1,1451,1451,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$cicoll,cljs.core.cst$sym$f,cljs.core.cst$sym$val,cljs.core.cst$sym$idx], null)),"Accepts any collection which satisfies the ICount and IIndexed protocols and\nreduces them without incurring seq initialization"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_3,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,207,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,209,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed",cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,209,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,209,cljs.core.cst$kw$end_DASH_column,5,cljs.core.cst$kw$doc,"bound in a repl thread to the third most recent value printed"], null)], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10828,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10828,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$kw$doc,null,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMultiFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_get_DASH_method,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,10823,10828,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$mf,cljs.core.cst$sym$dispatch_DASH_val], null))),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"cljs/core.cljs",13,10,cljs.core.cst$kw$positional,1110,1110,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/Var."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_Fn,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Var,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1110,1110,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IDeref,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),"Positional factory function for cljs.core/Var."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9704,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9704,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a map from distinct items in coll to the number of times\n  they appear."], null),cljs.core.cst$sym$cljs$core_SLASH_frequencies,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9704,9704,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a map from distinct items in coll to the number of times\n  they appear."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2129,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2129,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if coll satisfies IReduce"], null),cljs.core.cst$sym$cljs$core_SLASH_reduceable_QMARK_,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2129,cljs.core.cst$sym$boolean,2129,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if coll satisfies IReduce"]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH_string_DASH_hash_DASH_cache,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,955,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,955,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,955,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,955,cljs.core.cst$kw$end_DASH_column,23], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$object], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,4976,4976,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$f,cljs.core.cst$sym$prev_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$seed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Iterate."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Iterate,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$f,cljs.core.cst$sym$prev_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$seed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4976,4976,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$f,cljs.core.cst$sym$prev_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$seed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 10, [cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Iterate."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9505,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9505,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null))),cljs.core.cst$kw$doc,"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_rsubseq,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),null,cljs.core.list(null,null),1,9505,9505,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$test,cljs.core.cst$sym$key], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sc,cljs.core.cst$sym$start_DASH_test,cljs.core.cst$sym$start_DASH_key,cljs.core.cst$sym$end_DASH_test,cljs.core.cst$sym$end_DASH_key], null)),"sc must be a sorted collection, test(s) one of <, <=, > or\n  >=. Returns a reverse seq of those entries with keys ek for\n  which (test (.. sc comparator (compare ek key)) 0) is true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1411,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1411,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a number one greater than num."], null),cljs.core.cst$sym$cljs$core_SLASH_inc,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1411,1411,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a number one greater than num."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,320,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,320,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_type_DASH__GT_str,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)),null,cljs.core.list(null,null),1,320,320,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ty], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6311,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6311,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_clone,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)),null,cljs.core.list(null,null),1,6311,6311,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$ks], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11042,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11042,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),cljs.core.cst$kw$doc,"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"], null),cljs.core.cst$sym$cljs$core_SLASH_get_DASH_method,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null)),null,cljs.core.list(null,null),1,11042,11042,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$multifn,cljs.core.cst$sym$dispatch_DASH_val], null))),"Given a multimethod and a dispatch value, returns the dispatch fn\n  that would apply to that value, or nil if none apply and no default"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11105,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,11105,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_uuid_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,11105,cljs.core.cst$sym$boolean,11105,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5341,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5341,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_vector_DASH_index_DASH_out_DASH_of_DASH_bounds,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,5341,5341,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$i,cljs.core.cst$sym$cnt], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6460,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,6460,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_es6_DASH_entries_DASH_iterator,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,6460,6460,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2852,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2852,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Clear bit at index n"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_clear,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2852,2852,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null))),"Clear bit at index n"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Range,"cljs/core.cljs",15,true,10,9531,false,9531,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5099,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5099,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_filter,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5099,5099,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll for which\n  (pred item) returns true. pred must be free of side-effects.\n  Returns a transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",30,10,cljs.core.cst$kw$positional,8066,8066,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentTreeMapSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentTreeMapSeq,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8066,8066,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentTreeMapSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,7741,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,7741,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_array_DASH_node_DASH_seq,false,"cljs/core.cljs",29,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,4,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,7741,7741,4,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nodes], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",806,9,806,18,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,"Returns tcoll with value val added at position n.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_DASH_n_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,804,cljs.core.cst$sym$clj,806,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$n,cljs.core.cst$sym$val], null))),"Returns tcoll with value val added at position n."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",684,14,684,23,"Protocol for adding metadata to an object.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,"cljs/core.cljs",23,1,684,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_with_DASH_meta,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new object with value of o and metadata meta added to it."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$meta], null)], null)])], null),null,684,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 49, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9881,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9909,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9905,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9559,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9536,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9617,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9643,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9631,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9888,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9550,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9472,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer5970,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$spec$alpha_SLASH_t_cljs$spec$alpha9522,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core3354,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding metadata to an object.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3177,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3177,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null))),cljs.core.cst$kw$doc,"Creates a new list containing the items.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_list,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$xs)], null),null,cljs.core.list(null),1,3177,3177,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$xs], null)),"Creates a new list containing the items."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2579,15,2579,16,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the sum of nums. (+) returns 0.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__PLUS_,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null,null),1,2579,cljs.core.cst$sym$number,2579,(2),cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the sum of nums. (+) returns 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_IndexedSeqIterator,"cljs/core.cljs",28,true,10,1559,false,1559,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9658,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,9658,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"], null),cljs.core.cst$sym$cljs$core_SLASH_split_DASH_with,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,9658,9658,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns a vector of [(take-while pred coll) (drop-while pred coll)]"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[cljs.core.PersistentHashSet.EMPTY,"cljs/core.cljs",20,10,cljs.core.cst$kw$positional,5295,5295,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null))),null,"Positional factory function for cljs.core/VectorNode."]),cljs.core.PersistentHashSet.EMPTY,cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_VectorNode,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5295,5295,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null))),null,"Positional factory function for cljs.core/VectorNode."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,503,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,503,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null))),cljs.core.cst$kw$doc,"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_aset,true,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,503,503,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$val], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$idx2,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxv], null)),"Sets the value at the index/indices. Works on JavaScript arrays.\n  Returns val."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,890,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,890,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_int_DASH_rotate_DASH_left,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,890,cljs.core.cst$sym$number,890,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$n], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3360,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3360,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null))),cljs.core.cst$kw$doc,"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_keyword,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,3360,3360,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name], null)),"Returns a Keyword with the given namespace and name.  Do not use :\n  in the keyword strings, it will be added automatically."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",14,10,cljs.core.cst$kw$positional,3194,3194,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Cons."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 15, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Cons,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,3194,3194,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Cons."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,54,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,54,cljs.core.cst$kw$end_DASH_column,7,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"Var bound to the current namespace. Only used for bootstrapping.",cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_ns_STAR_,"cljs/core.cljs",7,1,true,50,54,cljs.core.cst$sym$clj_DASH_nil,"Var bound to the current namespace. Only used for bootstrapping.",new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH__STAR_assert_STAR_,"cljs/core.cljs",61,1,63,11,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,63,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,63,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$boolean]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8135,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8135,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_create_DASH_tree_DASH_map_DASH_seq,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)),null,cljs.core.list(null,null),1,8135,8135,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tree,cljs.core.cst$sym$ascending_QMARK_,cljs.core.cst$sym$cnt], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",581,14,581,25,"Protocol for adding to a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ICollection,"cljs/core.cljs",25,1,581,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_conj,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a new collection of coll with o added to it. The new item\n     should be added to the most efficient place, e.g.\n     (conj [1 2 3 4] 5) => [1 2 3 4 5]\n     (conj '(2 3 4 5) 1) => '(1 2 3 4 5)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$o], null)], null)])], null),null,581,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 32, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_NodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueue,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_LazySeq,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ValSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Cycle,null,cljs.core.cst$sym$cljs$tools$reader$impl$utils_SLASH_ReaderConditional,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_Repeat,null,cljs.core.cst$sym$cljs$core_SLASH_RSeq,null,cljs.core.cst$sym$cljs$core_SLASH_Iterate,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_KeySeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null,cljs.core.cst$sym$cljs$core_SLASH_Range,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMapSeq,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding to a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2799,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2799,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chars,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2799,2799,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2937,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2937,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null))),cljs.core.cst$kw$doc,"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_str,true,"cljs/core.cljs",10,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null,null),1,2937,2937,(1),true,cljs.core.list(cljs.core.PersistentVector.EMPTY,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ys], null)),"With no args, returns the empty string. With one arg x, returns\n  x.toString().  (str nil) returns the empty string. With more than\n  one arg, returns the concatenation of the str values of the args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1249,cljs.core.cst$kw$column,12,cljs.core.cst$kw$end_DASH_line,1249,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$tag,cljs.core.cst$sym$seq,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"], null),cljs.core.cst$sym$cljs$core_SLASH_next,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1249,cljs.core.cst$sym$seq,1249,1,cljs.core.cst$sym$seq,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a seq of the items after the first. Calls seq on its\n  argument.  If there are no more items, returns nil"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",598,14,598,18,"Marker protocol indicating an array sequence.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ASeq,"cljs/core.cljs",18,1,598,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,598,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_IndexedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_List,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Marker protocol indicating an array sequence.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10005,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10005,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_seq_DASH_writer,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10005,10005,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$objs,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_SeqIter,"cljs/core.cljs",17,true,10,3994,false,3994,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",537,14,537,17,"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IFn,"cljs/core.cljs",17,1,537,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_invoke,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,null], null)),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)], null)])], null),null,537,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_PersistentHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_MultiFn,null,cljs.core.cst$sym$cljs$core_SLASH_ObjMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,null,cljs.core.cst$sym$cljs$core_SLASH_TransientHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentHashSet,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_MetaFn,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for adding the ability to invoke an object as a function.\n  For example, a vector can also be used to look up a value:\n  ([1 2 3 4] 1) => 2",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9794,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,9794,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript RegExp instance."], null),cljs.core.cst$sym$cljs$core_SLASH_regexp_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,9794,cljs.core.cst$sym$boolean,9794,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript RegExp instance."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8788,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8788,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new hash map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_map,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8788,8788,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new hash map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,73,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,73,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$doc,"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise.",cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)))], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_exec_DASH_tap_DASH_fn_STAR_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,true,71,73,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Arranges to have tap functions executed via the supplied f, a\n  function of no arguments. Returns true if successful, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10747,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10747,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null))),cljs.core.cst$kw$doc,"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_underive,false,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),null,cljs.core.list(null,null),1,10747,10747,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag,cljs.core.cst$sym$parent], null)),"Removes a parent/child relationship between parent and\n  tag. h must be a hierarchy obtained from make-hierarchy, if not\n  supplied defaults to, and modifies, the global hierarchy."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2175,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2175,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_copy,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)),null,cljs.core.list(null,null),1,2175,2175,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$from,cljs.core.cst$sym$i,cljs.core.cst$sym$to,cljs.core.cst$sym$j,cljs.core.cst$sym$len], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6289,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6289,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_obj_DASH_map_DASH_compare_DASH_keys,false,"cljs/core.cljs",28,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,6289,6289,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,851,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,851,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$kw$doc,"Sets the value of o to new-value.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IReset,cljs.core.cst$sym$cljs$core_SLASH__DASH_reset_BANG_,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null)),null,cljs.core.list(null,null),1,849,851,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o,cljs.core.cst$sym$new_DASH_value], null))),"Sets the value of o to new-value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",605,9,605,14,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISeq,"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISeq,cljs.core.cst$sym$cljs$core_SLASH__DASH_rest,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,601,cljs.core.cst$sym$clj,605,1,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new collection of coll without the first item. It should\n     always return a seq, e.g.\n     (rest []) => ()\n     (rest nil) => ()"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3960,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3960,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),cljs.core.cst$sym$cljs$core_SLASH_nil_DASH_iter,false,"cljs/core.cljs",15,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,3960,3960,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9996,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,9996,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),cljs.core.cst$kw$doc,"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer."], null),true,cljs.core.cst$sym$cljs$core_SLASH_pr_DASH_writer,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,9996,9996,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null))),"Prefer this to pr-seq, because it makes the printing function\n   configurable, allowing efficient implementations such as appending\n   to a StringBuffer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2195,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2195,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is the value false, false otherwise."], null),cljs.core.cst$sym$cljs$core_SLASH_false_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2195,cljs.core.cst$sym$boolean,2195,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is the value false, false otherwise."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_RangedIterator,"cljs/core.cljs",24,true,10,5392,false,5392,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,114,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,114,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_readably_STAR_,"cljs/core.cljs",19,1,true,108,114,cljs.core.cst$sym$boolean,"When set to logical false, strings and characters will be printed with\n  non-alphanumeric characters converted to the appropriate escape sequences.\n\n  Defaults to true"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2801,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2801,cljs.core.cst$kw$end_DASH_column,11,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_ints,false,"cljs/core.cljs",11,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2801,2801,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4615,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4615,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null))),cljs.core.cst$kw$doc,"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_some_DASH_fn,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null)),null,cljs.core.list(null,null,null,null),1,4615,4615,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$p1,cljs.core.cst$sym$p2,cljs.core.cst$sym$p3,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$ps], null)),"Takes a set of predicates and returns a function f that returns the first logical true value\n  returned by one of its composing predicates against any of its arguments, else it returns\n  logical false. Note that f is short-circuiting in that it will stop execution on the first\n  argument that triggers a logical true result against the original predicates."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11274,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11274,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_demunge_DASH_pattern,false,"cljs/core.cljs",23,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,11274,11274,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11499,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,11499,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_maybe_DASH_enable_DASH_print_BANG_,false,"cljs/core.cljs",27,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,11499,11499,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,99,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,99,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_flush_DASH_on_DASH_newline_STAR_,"cljs/core.cljs",21,1,true,94,99,cljs.core.cst$sym$boolean,"When set to true, output will be flushed whenever a newline is printed.\n\n  Defaults to true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3609,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3609,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Naive impl of to-array as a start."], null),cljs.core.cst$sym$cljs$core_SLASH_to_DASH_array,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3609,3609,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Naive impl of to-array as a start."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5892,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5892,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_build_DASH_subvec,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)),null,cljs.core.list(null,null),1,5892,5892,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$__hash], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,447,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,447,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_maybe_DASH_warn,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)),null,cljs.core.list(null,null),1,447,447,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$e], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_Namespace,"cljs/core.cljs",19,true,10,11378,false,11378,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3084,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3084,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x implements IList"], null),cljs.core.cst$sym$cljs$core_SLASH_list_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3084,cljs.core.cst$sym$boolean,3084,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x implements IList"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8603,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,8603,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_tree_DASH_map_DASH_remove,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)),null,cljs.core.list(null,null),1,8603,8603,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$k,cljs.core.cst$sym$found], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_PersistentQueueIter,"cljs/core.cljs",29,true,10,6106,false,6106,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[4,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_HashCollisionNode,"cljs/core.cljs",27,true,10,7490,false,7490,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IIterable,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,234,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,234,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript array."], null),cljs.core.cst$sym$cljs$core_SLASH_array_QMARK_,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,234,cljs.core.cst$sym$boolean,234,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript array."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10773,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10773,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_prefers_STAR_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)),null,cljs.core.list(null,null),1,10773,10773,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$prefer_DASH_table], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3336,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3336,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol or keyword without a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_simple_DASH_ident_QMARK_,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3336,cljs.core.cst$sym$boolean,3336,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol or keyword without a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1192,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1192,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),cljs.core.cst$kw$doc,"Clone the supplied value which must implement ICloneable."], null),cljs.core.cst$sym$cljs$core_SLASH_clone,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null)),null,cljs.core.list(null,null),1,1192,1192,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value], null))),"Clone the supplied value which must implement ICloneable."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6275,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6275,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_scan_DASH_array,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)),null,cljs.core.list(null,null),1,6275,6275,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$incr,cljs.core.cst$sym$k,cljs.core.cst$sym$array], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11329,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11329,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_demunge,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)),null,cljs.core.list(null,null),1,11329,11329,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2862,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2862,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Bitwise complement"], null),cljs.core.cst$sym$cljs$core_SLASH_bit_DASH_not,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2862,2862,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Bitwise complement"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,9892,cljs.core.cst$kw$column,17,cljs.core.cst$kw$end_DASH_line,9892,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_quote_DASH_string,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,9892,9892,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2676,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2676,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_byte,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2676,cljs.core.cst$sym$number,2676,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2662,15,2662,18,cljs.core.cst$sym$number,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns the greatest of the nums.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_max,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2662,cljs.core.cst$sym$number,2662,(2),cljs.core.cst$sym$number,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns the greatest of the nums."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,4861,4861,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Repeat."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Repeat,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,4861,4861,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IPending,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/Repeat."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",816,14,816,25,"Protocol for values that can be compared.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IComparable,"cljs/core.cljs",25,1,816,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_compare,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$doc,"Returns a negative number, zero, or a positive number when x is logically\n     'less than', 'equal to', or 'greater than' y."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)], null)])], null),null,816,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [cljs.core.cst$sym$js_SLASH_Date,null,cljs.core.cst$sym$cljs$core_SLASH_Keyword,null,cljs.core.cst$sym$cljs$core_SLASH_BlackNode,null,cljs.core.cst$sym$cljs$core_SLASH_MapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_Subvec,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_Symbol,null,cljs.core.cst$sym$cljs$core_SLASH_UUID,null,cljs.core.cst$sym$cljs$core_SLASH_RedNode,null], null), null),"Protocol for values that can be compared.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",2899,16,2899,18,cljs.core.cst$sym$boolean,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null))),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH__EQ__EQ_,true,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null,null),1,2899,cljs.core.cst$sym$boolean,2899,(2),cljs.core.cst$sym$boolean,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more], null)),"Returns non-nil if nums all have the equivalent\n  value, otherwise false. Behavior on non nums is\n  undefined."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10688,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10688,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null))),cljs.core.cst$kw$doc,"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_parents,false,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),null,cljs.core.list(null,null),1,10688,10688,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$h,cljs.core.cst$sym$tag], null)),"Returns the immediate parents of tag, either via a JavaScript type\n  inheritance relationship or a relationship established via derive. h\n  must be a hierarchy obtained from make-hierarchy, if not supplied\n  defaults to the global hierarchy"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1800,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1800,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps"], null),cljs.core.cst$sym$cljs$core_SLASH_count,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1800,1800,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the number of items in the collection. (count nil) returns\n  0.  Also works on strings, arrays, and Maps"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",813,9,813,18,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,"Returns tcoll without v.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientSet,cljs.core.cst$sym$cljs$core_SLASH__DASH_disjoin_BANG_,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,811,cljs.core.cst$sym$clj,813,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$v], null))),"Returns tcoll without v."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$jsdoc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,174,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,174,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$jsdoc,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_loaded_DASH_libs_STAR_,"cljs/core.cljs",16,1,true,171,174,cljs.core.cst$sym$clj_DASH_nil,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["@type {*}"], null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_EMPTY,"cljs/core.cljs",4068,1,4068,21,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4068,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4068,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$cljs$core_SLASH_Empty]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",26,10,cljs.core.cst$kw$positional,7942,7942,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientHashMap."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientHashMap,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,7942,7942,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientHashMap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6496,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,6496,cljs.core.cst$kw$end_DASH_column,30,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_array_DASH_index_DASH_of_DASH_symbol_QMARK_,false,"cljs/core.cljs",30,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,6496,6496,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3462,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,3462,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IChunk,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayChunk,"cljs/core.cljs",20,true,10,3481,false,true,3481,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8828,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8828,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map_DASH_by,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$comparator,cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8828,8828,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comparator,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings, using the supplied comparator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3883,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3883,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null))),cljs.core.cst$kw$doc,"Applies fn f to the argument list formed by prepending intervening arguments to args.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(5),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_apply,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(5),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null)),null,cljs.core.list(null,null,null,null,null),1,3883,3883,(5),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$x,cljs.core.cst$sym$y,cljs.core.cst$sym$z,cljs.core.cst$sym$args], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$args], null)),"Applies fn f to the argument list formed by prepending intervening arguments to args."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10660,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10660,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))], null),true,cljs.core.cst$sym$cljs$core_SLASH_get_DASH_global_DASH_hierarchy,false,"cljs/core.cljs",28,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,10660,10660,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,970,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,970,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_add_DASH_to_DASH_string_DASH_hash_DASH_cache,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)),null,cljs.core.list(null,null),1,970,970,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$k], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10527,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10527,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null)], null))),cljs.core.cst$kw$doc,"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$x,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null))], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_clj_DASH__GT_js,true,"cljs/core.cljs",14,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(1),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$x,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null))], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null)], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$x,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null))], null),null,cljs.core.list(null),1,10527,10527,(1),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$_AMPERSAND_,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$keys,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$keyword_DASH_fn], null),cljs.core.cst$kw$or,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$keyword_DASH_fn,cljs.core.cst$sym$name], null),cljs.core.cst$kw$as,cljs.core.cst$sym$options], null)], null)),"Recursively transforms ClojureScript values to JavaScript.\n  sets/vectors/lists become Arrays, Keywords and Symbol become Strings,\n  Maps become Objects. Arbitrary keys are encoded to by `key->js`.\n  Options is a key-value pair, where the only valid key is\n  :keyword-fn, which should point to a single-argument function to be\n  called on keyword keys. Default to `name`."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,6553,cljs.core.cst$kw$column,10,cljs.core.cst$kw$end_DASH_line,6553,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$declared,true], null),3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransientArrayMap,"cljs/core.cljs",27,true,10,6953,false,true,6953,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$type,cljs.core.cst$kw$anonymous,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_t_cljs$core1394,"cljs/core.cljs",true,true,3,3961,false,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",25,10,cljs.core.cst$kw$positional,5973,5973,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientVector."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_TransientVector,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5973,5973,4,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientVector,null,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/TransientVector."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",834,14,834,26,"Protocol for accessing the chunks of a collection.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IChunkedNext,"cljs/core.cljs",26,1,834,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_chunked_DASH_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns a new collection of coll without the first chunk."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,834,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_ChunkedSeq,null,cljs.core.cst$sym$cljs$core_SLASH_ChunkedCons,null], null), null),"Protocol for accessing the chunks of a collection.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5053,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5053,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_interpose,false,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,5053,5053,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sep,cljs.core.cst$sym$coll], null)),"Returns a lazy seq of the elements of coll separated by sep.\n  Returns a stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[6,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_TransformerIterator,"cljs/core.cljs",29,true,10,4097,false,4097,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",19,10,cljs.core.cst$kw$positional,8238,8238,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/BlackNode."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 20, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_BlackNode,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,8238,8238,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/BlackNode."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1443,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1443,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),cljs.core.cst$kw$doc,"Also reader macro: @var/@atom/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?."], null),cljs.core.cst$sym$cljs$core_SLASH_deref,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,1443,1443,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Also reader macro: @var/@atom/@delay. Returns the\n   most-recently-committed value of ref. When applied to a var\n   or atom, returns its current state. When applied to a delay, forces\n   it if not already forced. See also - realized?."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5300,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,5300,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_pv_DASH_aget,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,5300,5300,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$node,cljs.core.cst$sym$idx], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1961,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1961,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null))),cljs.core.cst$kw$doc,"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_assoc,true,"cljs/core.cljs",12,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(3),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,1961,1961,(3),true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$v,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$kvs], null)),"assoc[iate]. When applied to a map, returns a new map of the\n   same (hashed/sorted) type, that contains the mapping of key(s) to\n   val(s). When applied to a vector, returns a new vector that\n   contains val at index."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3777,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3777,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a new, transient version of the collection, in constant time."], null),cljs.core.cst$sym$cljs$core_SLASH_transient,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,3777,3777,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns a new, transient version of the collection, in constant time."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",653,9,653,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ISet,"Returns a new collection of coll that does not contain v.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISet,cljs.core.cst$sym$cljs$core_SLASH__DASH_disjoin,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null)),null,cljs.core.list(null,null),1,651,cljs.core.cst$sym$clj,653,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$v], null))),"Returns a new collection of coll that does not contain v."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3585,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3585,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_cons,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)),null,cljs.core.list(null,null),1,3585,3585,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$rest], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayIter,"cljs/core.cljs",19,true,10,3979,false,3979,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,11179,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,11179,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),cljs.core.cst$kw$doc,"Returns an JavaScript compatible comparator based upon pred."], null),cljs.core.cst$sym$cljs$core_SLASH_comparator,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null)),null,cljs.core.list(null,null),1,11179,11179,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null))),"Returns an JavaScript compatible comparator based upon pred."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10120,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10120,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_prefix_DASH_map,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)),null,cljs.core.list(null,null),1,10120,10120,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$prefix,cljs.core.cst$sym$m,cljs.core.cst$sym$print_DASH_one,cljs.core.cst$sym$writer,cljs.core.cst$sym$opts], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,8819,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,8819,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null))),cljs.core.cst$kw$doc,"keyval => key val\n  Returns a new sorted map with supplied mappings.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sorted_DASH_map,true,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$keyvals)], null),null,cljs.core.list(null),1,8819,8819,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$keyvals], null)),"keyval => key val\n  Returns a new sorted map with supplied mappings."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4767,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4767,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_drop_DASH_while,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4767,4767,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),"Returns a lazy sequence of the items in coll starting from the\n  first item for which (pred item) returns logical false.  Returns a\n  stateful transducer when no collection is provided."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",750,14,750,21,"Protocol for writing. Currently only implemented by StringBufferWriter.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IWriter,"cljs/core.cljs",21,1,750,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_write,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Writes s with writer and returns the result."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer,cljs.core.cst$sym$s], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_flush,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Flush writer."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)], null)])], null),null,750,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_StringBufferWriter,null], null), null),"Protocol for writing. Currently only implemented by StringBufferWriter.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_KeySeq,"cljs/core.cljs",16,true,10,8838,false,8838,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10388,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,10388,cljs.core.cst$kw$end_DASH_column,25,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if a value has been produced for a delay or lazy sequence."], null),cljs.core.cst$sym$cljs$core_SLASH_realized_QMARK_,false,"cljs/core.cljs",25,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10388,cljs.core.cst$sym$boolean,10388,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if a value has been produced for a delay or lazy sequence."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,69,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,69,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$doc,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed.",cljs.core.cst$kw$dynamic,true], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_fn_STAR_,"cljs/core.cljs",13,1,true,65,69,cljs.core.cst$sym$clj_DASH_nil,"Each runtime environment provides a different way to print output.\n  Whatever function *print-fn* is bound to will be passed any\n  Strings which should be printed."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2356,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2356,cljs.core.cst$kw$end_DASH_column,22,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object."], null),cljs.core.cst$sym$cljs$core_SLASH_compare,false,"cljs/core.cljs",22,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2356,cljs.core.cst$sym$number,2356,2,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Comparator. Returns a negative number, zero, or a positive number\n  when x is logically 'less than', 'equal to', or 'greater than'\n  y. Uses IComparable if available and google.array.defaultCompare for objects\n of the same type and special-cases nil to be less than any other object."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4216,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4216,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),cljs.core.cst$kw$doc,"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."], null),cljs.core.cst$sym$cljs$core_SLASH_complement,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null)),null,cljs.core.list(null,null),1,4216,4216,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null))),"Takes a fn f and returns a fn that takes the same arguments as f,\n  has the same effects, if any, and returns the opposite truth value."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$private,cljs.core.cst$kw$meta,cljs.core.cst$kw$tag],[cljs.core.cst$sym$cljs$core_SLASH_lookup_DASH_sentinel,"cljs/core.cljs",2193,1,2193,31,true,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2193,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2193,cljs.core.cst$kw$end_DASH_column,31,cljs.core.cst$kw$private,true], null),cljs.core.cst$sym$object]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",795,9,795,16,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientAssociative,cljs.core.cst$sym$cljs$core_SLASH__DASH_assoc_BANG_,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,793,cljs.core.cst$sym$clj,795,3,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key,cljs.core.cst$sym$val], null))),"Returns a new transient collection of tcoll with a mapping from key to\n     val added to it."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$dynamic,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$doc],[new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,130,cljs.core.cst$kw$column,3,cljs.core.cst$kw$end_DASH_line,130,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$dynamic,true,cljs.core.cst$kw$doc,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."], null),cljs.core.cst$sym$cljs$core_SLASH__STAR_print_DASH_dup_STAR_,"cljs/core.cljs",14,1,true,124,130,cljs.core.cst$sym$boolean,"When set to logical true, objects will be printed in a way that preserves\n  their type when read in later.\n\n  Defaults to false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3976,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3976,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_string_DASH_iter,false,"cljs/core.cljs",18,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3976,3976,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10511,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,10511,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$kw$doc,"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IEncodeJS,cljs.core.cst$sym$cljs$core_SLASH__DASH_key_DASH__GT_js,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,10509,10511,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Transforms map keys to valid JavaScript keys. Arbitrary keys are\n  encoded to their string representation via (pr-str x)"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",671,14,671,20,"Protocol for adding dereference functionality to a reference.",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IDeref,"cljs/core.cljs",20,1,671,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_deref,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the value of the reference o."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)], null)])], null),null,671,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$sym$cljs$core_SLASH_Reduced,null,cljs.core.cst$sym$cljs$core_SLASH_Volatile,null,cljs.core.cst$sym$cljs$core_SLASH_Delay,null,cljs.core.cst$sym$cljs$core_SLASH_Var,null,cljs.core.cst$sym$cljs$spec$gen$alpha_SLASH_LazyVar,null,cljs.core.cst$sym$cljs$core_SLASH_Atom,null,cljs.core.cst$sym$cljs$analyzer_SLASH_t_cljs$analyzer5970,null], null), null),"Protocol for adding dereference functionality to a reference.",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4156,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4156,cljs.core.cst$kw$end_DASH_column,15,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null))),cljs.core.cst$kw$doc,"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_sequence,true,"cljs/core.cljs",15,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null,null),1,4156,4156,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$colls], null)),"Coerces coll to a (possibly empty) sequence, if it is not already\n  one. Will not force a lazy seq. (sequence nil) yields (), When a\n  transducer is supplied, returns a lazy sequence of applications of\n  the transform to the items in coll(s), i.e. to the set of first\n  items of each coll, followed by the set of second\n  items in each coll, until any one of the colls is exhausted.  Any\n  remaining items in other colls are ignored. The transform should accept\n  number-of-colls arguments"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4226,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4226,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a function that takes any number of arguments and returns x."], null),cljs.core.cst$sym$cljs$core_SLASH_constantly,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4226,4226,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns a function that takes any number of arguments and returns x."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),"cljs/core.cljs",24,10,cljs.core.cst$kw$positional,5392,5392,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),null,"Positional factory function for cljs.core/RangedIterator."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RangedIterator,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5392,5392,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null))),null,"Positional factory function for cljs.core/RangedIterator."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,5751,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,5751,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_chunked_DASH_seq,false,"cljs/core.cljs",18,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,5,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null,null),1,5751,5751,5,true,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",733,14,733,21,"Protocol for a collection which can represent their items\n  in a sorted manner. ",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_ISorted,"cljs/core.cljs",21,1,733,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_sorted_DASH_seq_DASH_from,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$clj,cljs.core.cst$kw$doc,"Returns a sorted seq from coll in either ascending or descending order.\n     If ascending is true, the result should contain all items which are > or >=\n     than k. If ascending is false, the result should contain all items which\n     are < or <= than k, e.g.\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)\n     (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)"], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$k,cljs.core.cst$sym$ascending_QMARK_], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_entry_DASH_key,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the key for entry."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$entry], null)], null),cljs.core.with_meta(cljs.core.cst$sym$_DASH_comparator,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$doc,"Returns the comparator for coll."], null)),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)], null)])], null),null,733,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeMap,null,cljs.core.cst$sym$cljs$core_SLASH_PersistentTreeSet,null], null), null),"Protocol for a collection which can represent their items\n  in a sorted manner. ",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",410,14,410,24,cljs.core.cst$sym$array,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null))),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_make_DASH_array,true,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null)),null,cljs.core.list(null,null,null),1,410,cljs.core.cst$sym$array,410,(2),cljs.core.cst$sym$array,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$size,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$more_DASH_sizes], null)),"Construct a JavaScript array of the specified dimensions. Accepts ignored\n  type argument for compatibility with Clojure. Note that there is no efficient\n  way to allocate multi-dimensional arrays in JavaScript; as such, this function\n  will run in polynomial time when called with 3 or more arguments."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,452,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,452,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH_checked_DASH_aget,true,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(2),cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null)),null,cljs.core.list(null,null),1,452,452,(2),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$array,cljs.core.cst$sym$idx,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$idxs], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2800,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2800,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_shorts,false,"cljs/core.cljs",13,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2800,2800,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$name,cljs.core.cst$sym$cljs$core_SLASH__STAR_unchecked_DASH_if_STAR_,cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,26,cljs.core.cst$kw$column,1,cljs.core.cst$kw$end_DASH_line,26,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$meta,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,26,cljs.core.cst$kw$column,6,cljs.core.cst$kw$end_DASH_line,26,cljs.core.cst$kw$end_DASH_column,20], null),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",14,10,cljs.core.cst$kw$positional,1673,1673,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/RSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_RSeq,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1673,1673,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/RSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,185,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,185,cljs.core.cst$kw$end_DASH_column,28,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Set *print-fn* to console.log"], null),cljs.core.cst$sym$cljs$core_SLASH_enable_DASH_console_DASH_print_BANG_,false,"cljs/core.cljs",28,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,185,185,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Set *print-fn* to console.log"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,754,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,754,cljs.core.cst$kw$end_DASH_column,10,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$kw$doc,"Flush writer.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IWriter,cljs.core.cst$sym$cljs$core_SLASH__DASH_flush,false,"cljs/core.cljs",10,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null)),null,cljs.core.list(null,null),1,750,754,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$writer], null))),"Flush writer."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1542,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1542,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))),cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),true,cljs.core.cst$sym$cljs$core_SLASH__DASH_lastIndexOf,false,"cljs/core.cljs",20,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null)),null,cljs.core.list(null,null),1,1542,1542,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$x,cljs.core.cst$sym$start], null))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2550,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2550,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null))),cljs.core.cst$kw$doc,"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_completing,false,"cljs/core.cljs",17,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),null,cljs.core.list(null,null),1,2550,2550,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$f,cljs.core.cst$sym$cf], null)),"Takes a reducing function f of 2 args and returns a fn suitable for\n  transduce by adding an arity-1 signature that calls cf (default -\n  identity) on the result argument."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2750,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2750,cljs.core.cst$kw$end_DASH_column,27,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_negate_DASH_int,false,"cljs/core.cljs",27,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2750,2750,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 24, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",26,10,cljs.core.cst$kw$positional,5433,5433,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentVector."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 24, [cljs.core.cst$sym$cljs$core_SLASH_APersistentVector,null,cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentVector,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,5433,5433,6,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 21, [cljs.core.cst$sym$cljs$core_SLASH_IIndexed,null,cljs.core.cst$sym$cljs$core_SLASH_IVector,null,cljs.core.cst$sym$cljs$core_SLASH_IReversible,null,cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_IIterable,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentVector."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2959,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,2959,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),cljs.core.cst$kw$doc,"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false."], null),true,cljs.core.cst$sym$cljs$core_SLASH_equiv_DASH_sequential,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null)),null,cljs.core.list(null,null),1,2959,2959,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x,cljs.core.cst$sym$y], null))),"Assumes x is sequential. Returns true if x equals y, otherwise\n  returns false."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1339,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,1339,cljs.core.cst$kw$end_DASH_column,34,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."], null),cljs.core.cst$sym$cljs$core_SLASH_hash_DASH_unordered_DASH_coll,false,"cljs/core.cljs",34,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1339,cljs.core.cst$sym$number,1339,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the hash code, consistent with =, for an external unordered\n   collection implementing Iterable. For maps, the iterator should\n   return map entries whose hash is computed as\n     (hash-ordered-coll [k v]).\n   See http://clojure.org/data_structures#hash for full algorithms."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4955,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4955,cljs.core.cst$kw$end_DASH_column,13,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns a lazy (infinite!, or length n if supplied) sequence of xs.",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_repeat,false,"cljs/core.cljs",13,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,4955,4955,2,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$n,cljs.core.cst$sym$x], null)),"Returns a lazy (infinite!, or length n if supplied) sequence of xs."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2727,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2727,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_inc,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2727,2727,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2927,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2927,cljs.core.cst$kw$end_DASH_column,14,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),cljs.core.cst$kw$doc,"Returns the nth next of coll, (seq coll) when n is 0."], null),cljs.core.cst$sym$cljs$core_SLASH_nthnext,false,"cljs/core.cljs",14,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null)),null,cljs.core.list(null,null),1,2927,2927,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll,cljs.core.cst$sym$n], null))),"Returns the nth next of coll, (seq coll) when n is 0."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10393,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,10393,cljs.core.cst$kw$end_DASH_column,26,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_preserving_DASH_reduced,false,"cljs/core.cljs",26,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)),null,cljs.core.list(null,null),1,10393,10393,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$rf], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4513,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,4513,cljs.core.cst$kw$end_DASH_column,20,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),cljs.core.cst$kw$doc,"Gets the validator-fn for a var/ref/agent/atom."], null),cljs.core.cst$sym$cljs$core_SLASH_get_DASH_validator,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null)),null,cljs.core.list(null,null),1,4513,4513,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iref], null))),"Gets the validator-fn for a var/ref/agent/atom."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[2,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_StringIter,"cljs/core.cljs",20,true,10,3967,false,3967,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,241,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,241,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x is a JavaScript number."], null),cljs.core.cst$sym$cljs$core_SLASH_number_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,241,cljs.core.cst$sym$boolean,241,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x is a JavaScript number."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",788,9,788,15,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,"Adds value val to tcoll and returns tcoll.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientCollection,cljs.core.cst$sym$cljs$core_SLASH__DASH_conj_BANG_,false,"cljs/core.cljs",15,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,786,cljs.core.cst$sym$clj,788,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$val], null))),"Adds value val to tcoll and returns tcoll."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"cljs/core.cljs",31,10,cljs.core.cst$kw$positional,6655,6655,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentArrayMapSeq."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 13, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_PersistentArrayMapSeq,false,"cljs/core.cljs",31,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6655,6655,3,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),"Positional factory function for cljs.core/PersistentArrayMapSeq."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3602,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3602,cljs.core.cst$kw$end_DASH_column,17,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_next,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,3602,3602,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[1,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayList,"cljs/core.cljs",19,true,10,9423,false,9423,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,10074,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,10074,cljs.core.cst$kw$end_DASH_column,16,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null))),cljs.core.cst$kw$doc,"print to a string, returning it",cljs.core.cst$kw$top_DASH_fn,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null)], null),cljs.core.cst$sym$cljs$core_SLASH_print_DASH_str,true,"cljs/core.cljs",16,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,true,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,(0),cljs.core.cst$kw$method_DASH_params,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null)], null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.list(cljs.core.cst$sym$objs)], null),null,cljs.core.list(null),1,10074,10074,(0),true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$objs], null)),"print to a string, returning it"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4201,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,4201,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Returns false if (pred x) is logical true for any x in coll,\n  else true."], null),cljs.core.cst$sym$cljs$core_SLASH_not_DASH_any_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,4201,cljs.core.cst$sym$boolean,4201,2,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$pred,cljs.core.cst$sym$coll], null))),"Returns false if (pred x) is logical true for any x in coll,\n  else true."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",518,14,518,24,cljs.core.cst$sym$array,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null))),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure.",new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_into_DASH_array,false,"cljs/core.cljs",24,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,2,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),null,cljs.core.list(null,null),1,518,cljs.core.cst$sym$array,518,2,cljs.core.cst$sym$array,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$aseq], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$type,cljs.core.cst$sym$aseq], null)),"Returns an array with components set to the values in aseq. Optional type\n  argument accepted for compatibility with Clojure."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,711,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,711,cljs.core.cst$kw$end_DASH_column,9,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$kw$doc,"Returns the hash code of o.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IHash,cljs.core.cst$sym$cljs$core_SLASH__DASH_hash,false,"cljs/core.cljs",9,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,709,711,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns the hash code of o."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3348,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,3348,cljs.core.cst$kw$end_DASH_column,33,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a symbol with a namespace"], null),cljs.core.cst$sym$cljs$core_SLASH_qualified_DASH_symbol_QMARK_,false,"cljs/core.cljs",33,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,3348,cljs.core.cst$sym$boolean,3348,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a symbol with a namespace"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",801,9,801,17,cljs.core.cst$sym$clj,cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,"Returns a new transient collection of tcoll without the mapping for key.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ITransientMap,cljs.core.cst$sym$cljs$core_SLASH__DASH_dissoc_BANG_,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null)),null,cljs.core.list(null,null),1,799,cljs.core.cst$sym$clj,801,2,cljs.core.cst$sym$clj,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tcoll,cljs.core.cst$sym$key], null))),"Returns a new transient collection of tcoll without the mapping for key."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"cljs/core.cljs",17,10,cljs.core.cst$kw$positional,1417,1417,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Reduced."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_Reduced,false,"cljs/core.cljs",17,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,1417,1417,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IDeref,null], null), null),"Positional factory function for cljs.core/Reduced."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,3478,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,3478,cljs.core.cst$kw$end_DASH_column,19,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_chunk_DASH_buffer,false,"cljs/core.cljs",19,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)),null,cljs.core.list(null,null),1,3478,3478,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$capacity], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2219,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2219,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),cljs.core.cst$kw$doc,"Return true if the seq function is supported for s"], null),cljs.core.cst$sym$cljs$core_SLASH_seqable_QMARK_,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null)),null,cljs.core.list(null,null),1,2219,cljs.core.cst$sym$boolean,2219,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s], null))),"Return true if the seq function is supported for s"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1036,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,1036,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Return true if x is a Symbol"], null),cljs.core.cst$sym$cljs$core_SLASH_symbol_QMARK_,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,1036,cljs.core.cst$sym$boolean,1036,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Return true if x is a Symbol"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,936,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,936,cljs.core.cst$kw$end_DASH_column,38,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_m3_DASH_hash_DASH_unencoded_DASH_chars,false,"cljs/core.cljs",38,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)),null,cljs.core.list(null,null),1,936,cljs.core.cst$sym$number,936,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$in], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2691,cljs.core.cst$kw$column,15,cljs.core.cst$kw$end_DASH_line,2691,cljs.core.cst$kw$end_DASH_column,29,cljs.core.cst$kw$tag,cljs.core.cst$sym$number,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_unchecked_DASH_char,false,"cljs/core.cljs",29,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2691,cljs.core.cst$sym$number,2691,1,cljs.core.cst$sym$number,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,391,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,391,cljs.core.cst$kw$end_DASH_column,18,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),cljs.core.cst$kw$doc,"Returns highest resolution time offered by host in milliseconds."], null),cljs.core.cst$sym$cljs$core_SLASH_system_DASH_time,false,"cljs/core.cljs",18,cljs.core.list(cljs.core.PersistentVector.EMPTY),null,cljs.core.list(null,null),1,391,391,0,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(cljs.core.PersistentVector.EMPTY)),"Returns highest resolution time offered by host in milliseconds."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[0,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_NeverEquiv,"cljs/core.cljs",20,true,10,6246,false,6246,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,4086,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,4086,cljs.core.cst$kw$end_DASH_column,24,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_chunkIteratorSeq,false,"cljs/core.cljs",24,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)),null,cljs.core.list(null,null),1,4086,4086,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists,cljs.core.cst$kw$top_DASH_fn],["cljs/core.cljs",541,4,541,11,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null))),new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null)]),cljs.core.cst$sym$cljs$core_SLASH_IFn,cljs.core.cst$sym$cljs$core_SLASH__DASH_invoke,false,"cljs/core.cljs",11,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,22,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),null,cljs.core.list(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null),1,537,541,22,true,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c], null),new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d], null),new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e], null),new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f], null),new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g], null),new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h], null),new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i], null),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j], null),new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k], null),new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l], null),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m], null),new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n], null),new cljs.core.PersistentVector(null, 16, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o], null),new cljs.core.PersistentVector(null, 17, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p], null),new cljs.core.PersistentVector(null, 18, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q], null),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r], null),new cljs.core.PersistentVector(null, 20, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s], null),new cljs.core.PersistentVector(null, 21, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t], null),new cljs.core.PersistentVector(null, 22, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$this,cljs.core.cst$sym$a,cljs.core.cst$sym$b,cljs.core.cst$sym$c,cljs.core.cst$sym$d,cljs.core.cst$sym$e,cljs.core.cst$sym$f,cljs.core.cst$sym$g,cljs.core.cst$sym$h,cljs.core.cst$sym$i,cljs.core.cst$sym$j,cljs.core.cst$sym$k,cljs.core.cst$sym$l,cljs.core.cst$sym$m,cljs.core.cst$sym$n,cljs.core.cst$sym$o,cljs.core.cst$sym$p,cljs.core.cst$sym$q,cljs.core.cst$sym$r,cljs.core.cst$sym$s,cljs.core.cst$sym$t,cljs.core.cst$sym$rest], null)),null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2099,cljs.core.cst$kw$column,16,cljs.core.cst$kw$end_DASH_line,2099,cljs.core.cst$kw$end_DASH_column,21,cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),cljs.core.cst$kw$doc,"Returns true if x satisfies ICollection"], null),cljs.core.cst$sym$cljs$core_SLASH_coll_QMARK_,false,"cljs/core.cljs",21,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2099,cljs.core.cst$sym$boolean,2099,1,cljs.core.cst$sym$boolean,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null))),"Returns true if x satisfies ICollection"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$added,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$added,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$static,cljs.core.cst$kw$top_DASH_fn,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],["1.2","cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),7,5222,5222,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null))),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."]),"1.2",cljs.core.cst$sym$cljs$core_SLASH_get_DASH_in,false,"cljs/core.cljs",13,true,new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$variadic,false,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,3,cljs.core.cst$kw$method_DASH_params,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),cljs.core.cst$kw$arglists_DASH_meta,cljs.core.list(null,null)], null),cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),null,cljs.core.list(null,null),1,5222,5222,3,true,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$m,cljs.core.cst$sym$ks,cljs.core.cst$sym$not_DASH_found], null)),"Returns the value in a nested associative structure,\n  where ks is a sequence of keys. Returns nil if the key is not present,\n  or the not-found value if supplied."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1751,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,1751,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),cljs.core.cst$kw$doc,"Same as (first (next x))"], null),cljs.core.cst$sym$cljs$core_SLASH_fnext,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,1751,1751,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Same as (first (next x))"]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$protocol_DASH_info,cljs.core.cst$kw$info,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$impls,cljs.core.cst$kw$doc,cljs.core.cst$kw$jsdoc],[cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$doc,cljs.core.cst$kw$protocol_DASH_symbol,cljs.core.cst$kw$jsdoc,cljs.core.cst$kw$protocol_DASH_info],["cljs/core.cljs",722,14,722,19,"Marker interface indicating a persistent list",true,cljs.core.list("@interface"),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null)]),true,cljs.core.cst$sym$cljs$core_SLASH_IList,"cljs/core.cljs",19,1,722,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$methods,cljs.core.PersistentArrayMap.EMPTY], null),null,722,cljs.core.cst$sym$any,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$sym$cljs$core_SLASH_Cons,null,cljs.core.cst$sym$cljs$core_SLASH_EmptyList,null,cljs.core.cst$sym$cljs$core_SLASH_List,null], null), null),"Marker interface indicating a persistent list",cljs.core.list("@interface")]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[3,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$sym$cljs$core_SLASH_Object,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_ArrayNodeIterator,"cljs/core.cljs",27,true,10,7360,false,7360,cljs.core.cst$sym$function,null]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$meta,cljs.core.cst$kw$num_DASH_fields,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$type,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$record,cljs.core.cst$kw$declared,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$tag,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag],[new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1515,cljs.core.cst$kw$column,45,cljs.core.cst$kw$end_DASH_line,1515,cljs.core.cst$kw$end_DASH_column,49,cljs.core.cst$kw$declared,true], null),5,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null),cljs.core.cst$sym$cljs$core_SLASH_List,"cljs/core.cljs",14,true,10,3017,false,true,3017,cljs.core.cst$sym$function,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IList,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_ASeq,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeq,null,cljs.core.cst$sym$cljs$core_SLASH_INext,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_ICloneable,null,cljs.core.cst$sym$cljs$core_SLASH_IStack,null,cljs.core.cst$sym$cljs$core_SLASH_ISequential,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IReduce,null], null), null)]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,648,cljs.core.cst$kw$column,4,cljs.core.cst$kw$end_DASH_line,648,cljs.core.cst$kw$end_DASH_column,8,cljs.core.cst$kw$protocol,cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$kw$doc,"Returns the value of the map entry.",cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_IMapEntry,cljs.core.cst$sym$cljs$core_SLASH__DASH_val,false,"cljs/core.cljs",8,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null)),null,cljs.core.list(null,null),1,644,648,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$coll], null))),"Returns the value of the map entry."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,2798,cljs.core.cst$kw$column,7,cljs.core.cst$kw$end_DASH_line,2798,cljs.core.cst$kw$end_DASH_column,12,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))], null),cljs.core.cst$sym$cljs$core_SLASH_bytes,false,"cljs/core.cljs",12,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)),null,cljs.core.list(null,null),1,2798,2798,1,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$x], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocols,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocols,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$column,cljs.core.cst$kw$factory,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$arglists,cljs.core.cst$kw$skip_DASH_protocol_DASH_flag,cljs.core.cst$kw$doc],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"cljs/core.cljs",16,10,cljs.core.cst$kw$positional,6321,6321,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/ObjMap."]),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 16, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_Object,null,cljs.core.cst$sym$cljs$core_SLASH_IFind,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),cljs.core.cst$sym$cljs$core_SLASH__DASH__GT_ObjMap,false,"cljs/core.cljs",16,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null)),null,cljs.core.list(null,null),1,cljs.core.cst$kw$positional,6321,6321,5,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null))),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 14, [cljs.core.cst$sym$cljs$core_SLASH_IKVReduce,null,cljs.core.cst$sym$cljs$core_SLASH_IEquiv,null,cljs.core.cst$sym$cljs$core_SLASH_IHash,null,cljs.core.cst$sym$cljs$core_SLASH_IFn,null,cljs.core.cst$sym$cljs$core_SLASH_ICollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEditableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_IEmptyableCollection,null,cljs.core.cst$sym$cljs$core_SLASH_ICounted,null,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,null,cljs.core.cst$sym$cljs$core_SLASH_IMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IWithMeta,null,cljs.core.cst$sym$cljs$core_SLASH_IAssociative,null,cljs.core.cst$sym$cljs$core_SLASH_IMap,null,cljs.core.cst$sym$cljs$core_SLASH_ILookup,null], null), null),"Positional factory function for cljs.core/ObjMap."]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$private,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists],[null,new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$file,"cljs/core.cljs",cljs.core.cst$kw$line,1046,cljs.core.cst$kw$column,8,cljs.core.cst$kw$end_DASH_line,1046,cljs.core.cst$kw$end_DASH_column,23,cljs.core.cst$kw$private,true,cljs.core.cst$kw$arglists,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))], null),true,cljs.core.cst$sym$cljs$core_SLASH_compare_DASH_symbols,false,"cljs/core.cljs",23,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)),null,cljs.core.list(null,null),1,1046,1046,2,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$a,cljs.core.cst$sym$b], null)))]),cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$protocol_DASH_inline,cljs.core.cst$kw$meta,cljs.core.cst$kw$protocol,cljs.core.cst$kw$name,cljs.core.cst$kw$variadic,cljs.core.cst$kw$file,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$method_DASH_params,cljs.core.cst$kw$protocol_DASH_impl,cljs.core.cst$kw$arglists_DASH_meta,cljs.core.cst$kw$column,cljs.core.cst$kw$line,cljs.core.cst$kw$ret_DASH_tag,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$max_DASH_fixed_DASH_arity,cljs.core.cst$kw$tag,cljs.core.cst$kw$fn_DASH_var,cljs.core.cst$kw$arglists,cljs.core.cst$kw$doc],[null,cljs.core.PersistentHashMap.fromArrays([cljs.core.cst$kw$file,cljs.core.cst$kw$line,cljs.core.cst$kw$column,cljs.core.cst$kw$end_DASH_line,cljs.core.cst$kw$end_DASH_column,cljs.core.cst$kw$tag,cljs.core.cst$kw$protocol,cljs.core.cst$kw$doc,cljs.core.cst$kw$arglists],["cljs/core.cljs",716,16,716,20,cljs.core.cst$sym$clj_DASH_or_DASH_nil,cljs.core.cst$sym$cljs$core_SLASH_ISeqable,"Returns a seq of o, or nil if o is empty.",cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)))]),cljs.core.cst$sym$cljs$core_SLASH_ISeqable,cljs.core.cst$sym$cljs$core_SLASH__DASH_seq,false,"cljs/core.cljs",20,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null)),null,cljs.core.list(null,null),1,714,cljs.core.cst$sym$clj_DASH_or_DASH_nil,716,1,cljs.core.cst$sym$clj_DASH_or_DASH_nil,true,cljs.core.list(cljs.core.cst$sym$quote,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$o], null))),"Returns a seq of o, or nil if o is empty."])]),null,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$seen,cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core.cst$sym$form,cljs.core.cst$sym$tag,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$uuid,cljs.core.cst$sym$case_STAR_,cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$defrecord_STAR_,cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$obj,cljs.core.cst$sym$fqn,cljs.core.cst$sym$first,cljs.core.cst$sym$try,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$rear,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$iter,cljs.core.cst$sym$step,cljs.core.cst$sym$boolean,cljs.core.cst$sym$update_DASH_count,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$chunk,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$rest,cljs.core.cst$kw$meta,cljs.core.cst$kw$dup,cljs.core.cst$sym$comp,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$else,cljs.core.cst$sym$left,cljs.core.cst$sym$ns_STAR_,cljs.core.cst$kw$cljs$core_SLASH_none,cljs.core.cst$sym$shift,cljs.core.cst$sym$iters,cljs.core.cst$sym$xform,cljs.core.cst$kw$validator,cljs.core.cst$sym$finally,cljs.core.cst$kw$default,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$loop_STAR_,cljs.core.cst$sym$watches,cljs.core.cst$kw$ns,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$v,cljs.core.cst$sym$riter,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta,cljs.core.cst$sym$_meta,cljs.core.cst$sym$afn,cljs.core.cst$sym$tree,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$front,cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$val,cljs.core.cst$sym$key,cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$root_DASH_iter,cljs.core.cst$sym$do,cljs.core.cst$sym$vec,cljs.core.cst$kw$fallback_DASH_impl,cljs.core.cst$kw$keyword_DASH_fn,cljs.core.cst$kw$flush_DASH_on_DASH_newline,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$kw$no_DASH_test,cljs.core.cst$sym$validator,cljs.core.cst$sym$letfn_STAR_,cljs.core.cst$sym$if,cljs.core.cst$sym$arr,cljs.core.cst$sym$new,cljs.core.cst$kw$descendants,cljs.core.cst$sym$ns,cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$ancestors,cljs.core.cst$sym$value,cljs.core.cst$sym$name,cljs.core.cst$kw$readably,cljs.core.cst$kw$more_DASH_marker,cljs.core.cst$sym$fields,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$base_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$deftype_STAR_,cljs.core.cst$sym$let_STAR_,cljs.core.cst$sym$start,cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$coll,cljs.core.cst$sym$not_DASH_native,cljs.core.cst$sym$js_STAR_,cljs.core.cst$sym$strobj,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta1395,cljs.core.cst$sym$fn_STAR_,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$recur,cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$ci,cljs.core.cst$kw$print_DASH_length,cljs.core.cst$sym$meta3355,cljs.core.cst$sym$state,cljs.core.cst$kw$ok,cljs.core.cst$sym$vals,cljs.core.cst$sym$all,cljs.core.cst$kw$cljs$core_SLASH_halt,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$parents,cljs.core.cst$sym$cnt,cljs.core.cst$sym$node,cljs.core.cst$sym$sym,cljs.core.cst$sym$sb,cljs.core.with_meta(cljs.core.cst$sym$seed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$prev_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$keys,cljs.core.cst$sym$set_BANG_,cljs.core.cst$kw$tag,cljs.core.cst$sym$tree_DASH_map,cljs.core.cst$sym$_DOT_,cljs.core.cst$sym$var,cljs.core.cst$kw$mutable,cljs.core.cst$sym$quote,cljs.core.cst$sym$root,cljs.core.cst$sym$multi,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$nodes,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$hash_DASH_map,cljs.core.cst$sym$catch,cljs.core.cst$kw$alt_DASH_impl,cljs.core.cst$sym$ext_DASH_map_DASH_iter,cljs.core.cst$sym$tail,cljs.core.cst$sym$record,cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$count,cljs.core.cst$kw$keywordize_DASH_keys,cljs.core.with_meta(cljs.core.cst$sym$current,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$off,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$prev,cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$right,cljs.core.cst$sym$throw,cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found,cljs.core.cst$sym$more,cljs.core.cst$sym$def,cljs.core.cst$sym$f,cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))]),cljs.core.cst$kw$order,cljs.core.PersistentVector.fromArray([cljs.core.cst$kw$flush_DASH_on_DASH_newline,cljs.core.cst$kw$readably,cljs.core.cst$kw$meta,cljs.core.cst$kw$dup,cljs.core.cst$kw$print_DASH_length,cljs.core.cst$kw$else,cljs.core.cst$sym$sb,cljs.core.cst$kw$default,cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$kw$mutable,cljs.core.cst$sym$_meta,cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta,cljs.core.cst$sym$ci,cljs.core.cst$sym$afn,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$off,cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta1395,cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$vals,cljs.core.cst$sym$iters,cljs.core.with_meta(cljs.core.cst$sym$buffer,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$completed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$xf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$sourceIter,cljs.core.cst$sym$multi,cljs.core.cst$sym$state,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches,cljs.core.cst$kw$validator,cljs.core.cst$sym$all,cljs.core.cst$sym$prev,cljs.core.with_meta(cljs.core.cst$sym$current,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$f,cljs.core.cst$sym$prev_DASH_seed,cljs.core.with_meta(cljs.core.cst$sym$seed,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter,cljs.core.cst$sym$key,cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$nodes,cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$not_DASH_native,cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$tree_DASH_map,cljs.core.cst$sym$step,cljs.core.cst$kw$cljs$core_SLASH_none,cljs.core.cst$kw$more_DASH_marker,cljs.core.cst$kw$alt_DASH_impl,cljs.core.cst$kw$fallback_DASH_impl,cljs.core.cst$kw$val,cljs.core.cst$kw$cljs$core_SLASH_halt,cljs.core.cst$sym$xform,cljs.core.cst$sym$coll,cljs.core.cst$kw$keyword_DASH_fn,cljs.core.cst$kw$keywordize_DASH_keys,cljs.core.cst$kw$parents,cljs.core.cst$kw$descendants,cljs.core.cst$kw$ancestors,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy,cljs.core.cst$sym$uuid,cljs.core.cst$sym$_AMPERSAND_,cljs.core.cst$sym$case_STAR_,cljs.core.cst$sym$defrecord_STAR_,cljs.core.cst$sym$try,cljs.core.cst$sym$ns_STAR_,cljs.core.cst$sym$finally,cljs.core.cst$sym$loop_STAR_,cljs.core.cst$sym$do,cljs.core.cst$sym$letfn_STAR_,cljs.core.cst$sym$if,cljs.core.cst$sym$new,cljs.core.cst$sym$deftype_STAR_,cljs.core.cst$sym$let_STAR_,cljs.core.cst$sym$js_STAR_,cljs.core.cst$sym$fn_STAR_,cljs.core.cst$sym$recur,cljs.core.cst$sym$set_BANG_,cljs.core.cst$sym$_DOT_,cljs.core.cst$sym$var,cljs.core.cst$sym$quote,cljs.core.cst$sym$catch,cljs.core.cst$sym$throw,cljs.core.cst$sym$def,cljs.core.cst$kw$ok,cljs.core.cst$kw$no_DASH_test,cljs.core.cst$sym$tag,cljs.core.cst$sym$form,cljs.core.cst$kw$ns,cljs.core.cst$sym$obj,cljs.core.cst$sym$meta3355], true)], null),null]));
});})(G__9953))
);

return G__9953;
});

cljs.js.empty_state.cljs$core$IFn$_invoke$arity$1 = (function (init){
var G__9954 = cljs.js.empty_state.cljs$core$IFn$_invoke$arity$0();
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(G__9954,init);

return G__9954;
});

cljs.js.empty_state.cljs$lang$maxFixedArity = 1;

cljs.js.load_analysis_cache_BANG_ = (function cljs$js$load_analysis_cache_BANG_(state,ns,cache){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,ns], null),cache);
});
cljs.js.load_source_map_BANG_ = (function cljs$js$load_source_map_BANG_(state,ns,sm_json){
var sm = cljs.source_map.decode.cljs$core$IFn$_invoke$arity$1(JSON.parse(sm_json));
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$source_DASH_maps,ns], null),sm);
});
cljs.js.sm_data = (function cljs$js$sm_data(){
return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$source_DASH_map,cljs.core.sorted_map(),cljs.core.cst$kw$gen_DASH_col,(0),cljs.core.cst$kw$gen_DASH_line,(0)], null));
});
cljs.js.prefix = (function cljs$js$prefix(s,pre){
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(pre),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)].join('');
});
cljs.js.append_source_map = (function cljs$js$append_source_map(state,name,source,sb,sm_data,p__9956){
var map__9957 = p__9956;
var map__9957__$1 = ((((!((map__9957 == null)))?(((((map__9957.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9957.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9957):map__9957);
var opts = map__9957__$1;
var output_dir = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9957__$1,cljs.core.cst$kw$output_DASH_dir);
var asset_path = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9957__$1,cljs.core.cst$kw$asset_DASH_path);
var source_map_timestamp = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9957__$1,cljs.core.cst$kw$source_DASH_map_DASH_timestamp);
var t = (new Date()).valueOf();
var mn = (cljs.core.truth_(name)?cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join('')):["cljs-",cljs.core.str.cljs$core$IFn$_invoke$arity$1(t)].join(''));
var smn = (function (){var G__9959 = mn;
if(cljs.core.truth_(name)){
return clojure.string.replace(G__9959,".","/");
} else {
return G__9959;
}
})();
var ts = (new Date()).valueOf();
var out = (function (){var or__3936__auto__ = output_dir;
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return asset_path;
}
})();
var src = (function (){var G__9960 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(smn),".cljs"].join('');
var G__9960__$1 = ((source_map_timestamp === true)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__9960),"?rel=",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts)].join(''):G__9960);
if(cljs.core.truth_(out)){
return cljs.js.prefix(G__9960__$1,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(out),"/"].join(''));
} else {
return G__9960__$1;
}
})();
var file = (function (){var G__9961 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(smn),".js"].join('');
var G__9961__$1 = ((source_map_timestamp === true)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__9961),"?rel=",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts)].join(''):G__9961);
if(cljs.core.truth_(out)){
return cljs.js.prefix(G__9961__$1,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(out),"/"].join(''));
} else {
return G__9961__$1;
}
})();
var json = cljs.source_map.encode(cljs.core.PersistentArrayMap.createAsIfByAssoc([src,cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(sm_data)]),new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$lines,(cljs.core.cst$kw$gen_DASH_line.cljs$core$IFn$_invoke$arity$1(sm_data) + (3)),cljs.core.cst$kw$file,file,cljs.core.cst$kw$sources_DASH_content,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [source], null)], null));
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([json], 0));
} else {
}

cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(state,cljs.core.assoc_in,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$source_DASH_maps,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(mn)], null),cljs.source_map.invert_reverse_map(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(sm_data)));

return sb.append(["\n//# sourceURL=",cljs.core.str.cljs$core$IFn$_invoke$arity$1(file),"\n//# sourceMappingURL=data:application/json;base64,",cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__9962 = clojure.string.replace(encodeURIComponent(json),/%([0-9A-F]{2})/,((function (t,mn,smn,ts,out,src,file,json,map__9957,map__9957__$1,opts,output_dir,asset_path,source_map_timestamp){
return (function (p__9963){
var vec__9964 = p__9963;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9964,(0),null);
var match = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9964,(1),null);
return String.fromCharCode(["0x",cljs.core.str.cljs$core$IFn$_invoke$arity$1(match)].join(''));
});})(t,mn,smn,ts,out,src,file,json,map__9957,map__9957__$1,opts,output_dir,asset_path,source_map_timestamp))
);
return goog.crypt.base64.encodeString(G__9962);
})())].join(''));
});
cljs.js.current_alias_map = (function cljs$js$current_alias_map(){
return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p__9967){
var vec__9968 = p__9967;
var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9968,(0),null);
var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9968,(1),null);
return cljs.core.symbol_identical_QMARK_(k,v);
}),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.env._STAR_compiler_STAR_),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.analyzer._STAR_cljs_ns_STAR_,cljs.core.cst$kw$requires], null)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.env._STAR_compiler_STAR_),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.analyzer._STAR_cljs_ns_STAR_,cljs.core.cst$kw$require_DASH_macros], null))], 0))));
});
cljs.js._STAR_loaded_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentHashSet.EMPTY);
/**
 * Like cljs.core/run!, but for an async procedure, and with the
 *   ability to break prior to processing the entire collection.
 * 
 *   Chains successive calls to the supplied procedure for items in
 *   the collection. The procedure should accept an item from the
 *   collection and a callback of one argument. If the break? predicate,
 *   when applied to the procedure callback value, yields a truthy
 *   result, terminates early calling the supplied cb with the callback
 *   value. Otherwise, when complete, calls cb with nil.
 */
cljs.js.run_async_BANG_ = (function cljs$js$run_async_BANG_(proc,coll,break_QMARK_,cb){
if(cljs.core.seq(coll)){
var G__9971 = cljs.core.first(coll);
var G__9972 = ((function (G__9971){
return (function (res){
if(cljs.core.truth_((break_QMARK_.cljs$core$IFn$_invoke$arity$1 ? break_QMARK_.cljs$core$IFn$_invoke$arity$1(res) : break_QMARK_.call(null,res)))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var G__9973 = proc;
var G__9974 = cljs.core.rest(coll);
var G__9975 = break_QMARK_;
var G__9976 = cb;
return (cljs.js.run_async_BANG_.cljs$core$IFn$_invoke$arity$4 ? cljs.js.run_async_BANG_.cljs$core$IFn$_invoke$arity$4(G__9973,G__9974,G__9975,G__9976) : cljs.js.run_async_BANG_.call(null,G__9973,G__9974,G__9975,G__9976));
}
});})(G__9971))
;
return (proc.cljs$core$IFn$_invoke$arity$2 ? proc.cljs$core$IFn$_invoke$arity$2(G__9971,G__9972) : proc.call(null,G__9971,G__9972));
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(null) : cb.call(null,null));
}
});
cljs.js.process_deps = (function cljs$js$process_deps(bound_vars,names,opts,cb){
return cljs.js.run_async_BANG_((function (name,cb__$1){
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,name,null,opts,cb__$1);
}),names,cljs.core.cst$kw$error,cb);
});
cljs.js.process_macros_deps = (function cljs$js$process_macros_deps(bound_vars,cache,opts,cb){
return cljs.js.process_deps(bound_vars,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.vals(cljs.core.cst$kw$require_DASH_macros.cljs$core$IFn$_invoke$arity$1(cache))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$macros_DASH_ns,true),cljs.core.cst$kw$emit_DASH_constants,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$optimize_DASH_constants], 0)),cb);
});
cljs.js.process_libs_deps = (function cljs$js$process_libs_deps(bound_vars,cache,opts,cb){
return cljs.js.process_deps(bound_vars,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.vals(cljs.core.cst$kw$requires.cljs$core$IFn$_invoke$arity$1(cache)),cljs.core.vals(cljs.core.cst$kw$imports.cljs$core$IFn$_invoke$arity$1(cache)))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),cb);
});
cljs.js.pre_file_side_effects = (function cljs$js$pre_file_side_effects(st,name,file,opts){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Pre-file side-effects",file], 0));
} else {
}

if(cljs.core.truth_((function (){var and__3925__auto__ = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(st),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,name,cljs.core.cst$kw$defs], null));
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.not((function (){var fexpr__9977 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$sym$cljs$core$macros,null,cljs.core.cst$sym$cljs$core,null], null), null);
return (fexpr__9977.cljs$core$IFn$_invoke$arity$1 ? fexpr__9977.cljs$core$IFn$_invoke$arity$1(name) : fexpr__9977.call(null,name));
})());
} else {
return and__3925__auto__;
}
})())){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(st,cljs.core.update,cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([name], 0));
} else {
return null;
}
});
cljs.js.post_file_side_effects = (function cljs$js$post_file_side_effects(file,opts){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Post-file side-effects",file], 0));
} else {
}

return cljs.core._STAR_unchecked_arrays_STAR_ = false;;
});
cljs.js.require = (function cljs$js$require(var_args){
var G__9979 = arguments.length;
switch (G__9979) {
case 2:
return cljs.js.require.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.js.require.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.require.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.require.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.require.cljs$core$IFn$_invoke$arity$2 = (function (name,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$3(name,null,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$3 = (function (name,opts,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$4(null,name,opts,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$4 = (function (bound_vars,name,opts,cb){
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,name,null,opts,cb);
});

cljs.js.require.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,name,reload,opts,cb){
var bound_vars__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 6, [cljs.core.cst$kw$_STAR_compiler_STAR_,cljs.env.default_compiler_env.cljs$core$IFn$_invoke$arity$0(),cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),bound_vars], 0));
var aname = (function (){var G__9980 = name;
if(cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.analyzer.macro_ns_name(G__9980);
} else {
return G__9980;
}
})();
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$reload,reload)){
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.disj,aname);
} else {
}

if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$reload_DASH_all,reload)){
cljs.core.reset_BANG_(cljs.js._STAR_loaded_STAR_,cljs.core.PersistentHashSet.EMPTY);
} else {
}

if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([["Loading ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))?" macros":null))," namespace"].join('')], 0));
} else {
}

if(!(cljs.core.contains_QMARK_(cljs.core.deref(cljs.js._STAR_loaded_STAR_),aname))){
var env = cljs.core.cst$kw$_STAR_env_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
try{var G__9984 = new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$name,name,cljs.core.cst$kw$macros,cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(name)], null);
var G__9985 = ((function (G__9984,env,bound_vars__$1,aname){
return (function (resource){
if(((cljs.core.map_QMARK_(resource)) || ((resource == null)))){
} else {
throw (new Error(["Assert failed: ","*load-fn* may only return a map or nil","\n","(or (map? resource) (nil? resource))"].join('')));
}

if(cljs.core.truth_(resource)){
var map__9986 = resource;
var map__9986__$1 = ((((!((map__9986 == null)))?(((((map__9986.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__9986.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__9986):map__9986);
var lang = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9986__$1,cljs.core.cst$kw$lang);
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9986__$1,cljs.core.cst$kw$source);
var cache = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9986__$1,cljs.core.cst$kw$cache);
var source_map = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9986__$1,cljs.core.cst$kw$source_DASH_map);
var file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9986__$1,cljs.core.cst$kw$file);
var pred__9988 = cljs.core.keyword_identical_QMARK_;
var expr__9989 = lang;
if(cljs.core.truth_((function (){var G__9991 = cljs.core.cst$kw$clj;
var G__9992 = expr__9989;
return (pred__9988.cljs$core$IFn$_invoke$arity$2 ? pred__9988.cljs$core$IFn$_invoke$arity$2(G__9991,G__9992) : pred__9988.call(null,G__9991,G__9992));
})())){
cljs.js.pre_file_side_effects(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,file,opts);

return cljs.js.eval_str_STAR_(bound_vars__$1,source,name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$cljs_DASH_file,file),((function (pred__9988,expr__9989,map__9986,map__9986__$1,lang,source,cache,source_map,file,G__9984,env,bound_vars__$1,aname){
return (function (res){
cljs.js.post_file_side_effects(file,opts);

if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.conj,aname);

var G__9993 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__9993) : cb.call(null,G__9993));
}
});})(pred__9988,expr__9989,map__9986,map__9986__$1,lang,source,cache,source_map,file,G__9984,env,bound_vars__$1,aname))
);
} else {
if(cljs.core.truth_((function (){var G__9994 = cljs.core.cst$kw$js;
var G__9995 = expr__9989;
return (pred__9988.cljs$core$IFn$_invoke$arity$2 ? pred__9988.cljs$core$IFn$_invoke$arity$2(G__9994,G__9995) : pred__9988.call(null,G__9994,G__9995));
})())){
return cljs.js.process_macros_deps(bound_vars__$1,cache,opts,((function (pred__9988,expr__9989,map__9986,map__9986__$1,lang,source,cache,source_map,file,G__9984,env,bound_vars__$1,aname){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
return cljs.js.process_libs_deps(bound_vars__$1,cache,opts,((function (pred__9988,expr__9989,map__9986,map__9986__$1,lang,source,cache,source_map,file,G__9984,env,bound_vars__$1,aname){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var res__$2 = (function (){try{var fexpr__9997_10005 = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
(fexpr__9997_10005.cljs$core$IFn$_invoke$arity$1 ? fexpr__9997_10005.cljs$core$IFn$_invoke$arity$1(resource) : fexpr__9997_10005.call(null,resource));

if(cljs.core.truth_(cache)){
cljs.js.load_analysis_cache_BANG_(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,cache);

cljs.analyzer.register_specs(cache);
} else {
}

if(cljs.core.truth_(source_map)){
return cljs.js.load_source_map_BANG_(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),aname,source_map);
} else {
return null;
}
}catch (e9996){var cause = e9996;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(env,["Could not require ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.js._STAR_loaded_STAR_,cljs.core.conj,aname);

var G__9998 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__9998) : cb.call(null,G__9998));
}
}
});})(pred__9988,expr__9989,map__9986,map__9986__$1,lang,source,cache,source_map,file,G__9984,env,bound_vars__$1,aname))
);
}
});})(pred__9988,expr__9989,map__9986,map__9986__$1,lang,source,cache,source_map,file,G__9984,env,bound_vars__$1,aname))
);
} else {
var G__9999 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(env,["Invalid :lang specified ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(lang),", only :clj or :js allowed"].join('')));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__9999) : cb.call(null,G__9999));
}
}
} else {
var G__10000 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(env,(function (){var G__10001 = (cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.cst$kw$undeclared_DASH_macros_DASH_ns:cljs.core.cst$kw$undeclared_DASH_ns);
var G__10002 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_DASH_sym,name,cljs.core.cst$kw$js_DASH_provide,cljs.core.name(name)], null);
return (cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2 ? cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(G__10001,G__10002) : cljs.analyzer.error_message.call(null,G__10001,G__10002));
})()));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10000) : cb.call(null,G__10000));
}
});})(G__9984,env,bound_vars__$1,aname))
;
var fexpr__9983 = cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
return (fexpr__9983.cljs$core$IFn$_invoke$arity$2 ? fexpr__9983.cljs$core$IFn$_invoke$arity$2(G__9984,G__9985) : fexpr__9983.call(null,G__9984,G__9985));
}catch (e9981){var cause = e9981;
var G__9982 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(env,["Could not require ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__9982) : cb.call(null,G__9982));
}} else {
var G__10003 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,true], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10003) : cb.call(null,G__10003));
}
});

cljs.js.require.cljs$lang$maxFixedArity = 5;

cljs.js.patch_alias_map = (function cljs$js$patch_alias_map(compiler,in$,from,to){
var patch = (function (k,add_if_present_QMARK_){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(compiler,cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,in$,k], null),(function (m){
var replaced = clojure.walk.postwalk_replace(cljs.core.PersistentArrayMap.createAsIfByAssoc([from,to]),m);
if(cljs.core.truth_((function (){var and__3925__auto__ = add_if_present_QMARK_;
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([to]),cljs.core.vals(replaced));
} else {
return and__3925__auto__;
}
})())){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(replaced,from,to);
} else {
return replaced;
}
}));
});
var patch_renames = ((function (patch){
return (function (k){
return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(compiler,cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,in$,k], null),((function (patch){
return (function (m){
if(cljs.core.truth_(m)){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (patch){
return (function (acc,p__10006){
var vec__10007 = p__10006;
var renamed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10007,(0),null);
var qualified_sym = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10007,(1),null);
var entry = vec__10007;
if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(from)].join(''),cljs.core.namespace(qualified_sym))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,renamed,cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(to)].join(''),cljs.core.name(qualified_sym)));
} else {
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,entry], 0));
}
});})(patch))
,cljs.core.PersistentArrayMap.EMPTY,m);
} else {
return null;
}
});})(patch))
);
});})(patch))
;
patch(cljs.core.cst$kw$requires,true);

patch(cljs.core.cst$kw$require_DASH_macros,true);

patch(cljs.core.cst$kw$uses,false);

patch(cljs.core.cst$kw$use_DASH_macros,false);

patch_renames(cljs.core.cst$kw$renames);

return patch_renames(cljs.core.cst$kw$rename_DASH_macros);
});
cljs.js.self_require_QMARK_ = (function cljs$js$self_require_QMARK_(deps,opts){
var and__3925__auto__ = cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts) === true;
if(and__3925__auto__){
return cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.analyzer._STAR_cljs_ns_STAR_]),deps);
} else {
return and__3925__auto__;
}
});
cljs.js.load_deps = (function cljs$js$load_deps(var_args){
var G__10012 = arguments.length;
switch (G__10012) {
case 5:
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 7:
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.load_deps.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,lib,deps,cb){
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars,ana_env,lib,deps,null,null,cb);
});

cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7 = (function (bound_vars,ana_env,lib,deps,reload,opts,cb){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Loading dependencies for",lib], 0));
} else {
}

var _STAR_cljs_dep_set_STAR_10013 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = (function (){var lib__$1 = (cljs.core.truth_(cljs.js.self_require_QMARK_(deps,opts))?cljs.core.cst$sym$cljs$user:lib);
return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib__$1),cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$dep_DASH_path], null),cljs.core.conj,lib__$1);
})();

try{var bound_vars__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(bound_vars,cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_);
if(!(cljs.core.every_QMARK_(((function (bound_vars__$1,_STAR_cljs_dep_set_STAR_10013){
return (function (p1__10010_SHARP_){
return !(cljs.core.contains_QMARK_(cljs.analyzer._STAR_cljs_dep_set_STAR_,p1__10010_SHARP_));
});})(bound_vars__$1,_STAR_cljs_dep_set_STAR_10013))
,deps))){
var G__10014 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,["Circular dependency detected ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(" -> ",cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$dep_DASH_path.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(cljs.analyzer._STAR_cljs_dep_set_STAR_)),cljs.core.some(cljs.analyzer._STAR_cljs_dep_set_STAR_,deps)))))].join('')));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10014) : cb.call(null,G__10014));
} else {
if(cljs.core.seq(deps)){
var dep = cljs.core.first(deps);
var opts_SINGLEQUOTE_ = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$context),cljs.core.cst$kw$def_DASH_emits_DASH_var),cljs.core.cst$kw$ns);
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars__$1,dep,reload,opts_SINGLEQUOTE_,((function (dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_10013){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Loading result:",res], 0));
} else {
}

if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars__$1,ana_env,lib,cljs.core.next(deps),null,opts,cb);
} else {
var temp__5455__auto__ = (function (){var cljs_ns = cljs.analyzer.clj_ns__GT_cljs_ns(dep);
return cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([dep,null]),cljs_ns,cljs_ns);
})();
if(cljs.core.truth_(temp__5455__auto__)){
var cljs_dep = temp__5455__auto__;
return cljs.js.require.cljs$core$IFn$_invoke$arity$4(bound_vars__$1,cljs_dep,opts_SINGLEQUOTE_,((function (cljs_dep,temp__5455__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_10013){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
cljs.js.patch_alias_map(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),lib,dep,cljs_dep);

return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars__$1,ana_env,lib,cljs.core.next(deps),null,opts,((function (cljs_dep,temp__5455__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_10013){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
var G__10015 = cljs.core.update.cljs$core$IFn$_invoke$arity$5(res__$2,cljs.core.cst$kw$aliased_DASH_loads,cljs.core.assoc,dep,cljs_dep);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10015) : cb.call(null,G__10015));
}
});})(cljs_dep,temp__5455__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_10013))
);
}
});})(cljs_dep,temp__5455__auto__,dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_10013))
);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
}
});})(dep,opts_SINGLEQUOTE_,bound_vars__$1,_STAR_cljs_dep_set_STAR_10013))
);
} else {
var G__10016 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10016) : cb.call(null,G__10016));
}
}
}finally {cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_10013;
}});

cljs.js.load_deps.cljs$lang$maxFixedArity = 7;

cljs.js.analyze_deps = (function cljs$js$analyze_deps(var_args){
var G__10020 = arguments.length;
switch (G__10020) {
case 5:
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,lib,deps,cb){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,lib,deps,null,cb);
});

cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6 = (function (bound_vars,ana_env,lib,deps,opts,cb){
var _STAR_cljs_dep_set_STAR_10021 = cljs.analyzer._STAR_cljs_dep_set_STAR_;
cljs.analyzer._STAR_cljs_dep_set_STAR_ = cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib),cljs.core.update_in,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$dep_DASH_path], null),cljs.core.conj,lib);

try{var compiler = cljs.core.deref(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars));
var bound_vars__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(bound_vars,cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_);
if(!(cljs.core.every_QMARK_(((function (compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021){
return (function (p1__10018_SHARP_){
return !(cljs.core.contains_QMARK_(cljs.analyzer._STAR_cljs_dep_set_STAR_,p1__10018_SHARP_));
});})(compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021))
,deps))){
var G__10022 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,["Circular dependency detected ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(" -> ",cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$dep_DASH_path.cljs$core$IFn$_invoke$arity$1(cljs.core.meta(cljs.analyzer._STAR_cljs_dep_set_STAR_)),cljs.core.some(cljs.analyzer._STAR_cljs_dep_set_STAR_,deps)))))].join('')));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10022) : cb.call(null,G__10022));
} else {
if(cljs.core.seq(deps)){
var dep = cljs.core.first(deps);
try{var G__10026 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$name,dep,cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(dep)], null);
var G__10027 = ((function (G__10026,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021){
return (function (resource){
if(((cljs.core.map_QMARK_(resource)) || ((resource == null)))){
} else {
throw (new Error(["Assert failed: ","*load-fn* may only return a map or nil","\n","(or (map? resource) (nil? resource))"].join('')));
}

if(cljs.core.not(resource)){
var temp__5455__auto__ = (function (){var cljs_ns = cljs.analyzer.clj_ns__GT_cljs_ns(dep);
return cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([dep,null]),cljs_ns,cljs_ns);
})();
if(cljs.core.truth_(temp__5455__auto__)){
var cljs_dep = temp__5455__auto__;
cljs.js.patch_alias_map(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),lib,dep,cljs_dep);

return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars__$1,ana_env,lib,cljs.core.cons(cljs_dep,cljs.core.next(deps)),opts,((function (cljs_dep,temp__5455__auto__,G__10026,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021){
return (function (res){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var G__10028 = cljs.core.update.cljs$core$IFn$_invoke$arity$5(res,cljs.core.cst$kw$aliased_DASH_loads,cljs.core.assoc,dep,cljs_dep);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10028) : cb.call(null,G__10028));
}
});})(cljs_dep,temp__5455__auto__,G__10026,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021))
);
} else {
var G__10029 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,(function (){var G__10030 = cljs.core.cst$kw$undeclared_DASH_ns;
var G__10031 = new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_DASH_sym,dep,cljs.core.cst$kw$js_DASH_provide,cljs.core.name(dep)], null);
return (cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2 ? cljs.analyzer.error_message.cljs$core$IFn$_invoke$arity$2(G__10030,G__10031) : cljs.analyzer.error_message.call(null,G__10030,G__10031));
})()));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10029) : cb.call(null,G__10029));
}
} else {
var map__10032 = resource;
var map__10032__$1 = ((((!((map__10032 == null)))?(((((map__10032.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10032.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10032):map__10032);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10032__$1,cljs.core.cst$kw$name);
var lang = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10032__$1,cljs.core.cst$kw$lang);
var source = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10032__$1,cljs.core.cst$kw$source);
var file = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10032__$1,cljs.core.cst$kw$file);
var pred__10034 = cljs.core.keyword_identical_QMARK_;
var expr__10035 = lang;
if(cljs.core.truth_((function (){var G__10037 = cljs.core.cst$kw$clj;
var G__10038 = expr__10035;
return (pred__10034.cljs$core$IFn$_invoke$arity$2 ? pred__10034.cljs$core$IFn$_invoke$arity$2(G__10037,G__10038) : pred__10034.call(null,G__10037,G__10038));
})())){
cljs.js.pre_file_side_effects(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1),name,file,opts);

return cljs.js.analyze_str_STAR_(bound_vars__$1,source,name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$cljs_DASH_file,file),((function (pred__10034,expr__10035,map__10032,map__10032__$1,name,lang,source,file,G__10026,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021){
return (function (res){
cljs.js.post_file_side_effects(file,opts);

if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars__$1,ana_env,lib,cljs.core.next(deps),opts,cb);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
});})(pred__10034,expr__10035,map__10032,map__10032__$1,name,lang,source,file,G__10026,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021))
);
} else {
if(cljs.core.truth_((function (){var G__10039 = cljs.core.cst$kw$js;
var G__10040 = expr__10035;
return (pred__10034.cljs$core$IFn$_invoke$arity$2 ? pred__10034.cljs$core$IFn$_invoke$arity$2(G__10039,G__10040) : pred__10034.call(null,G__10039,G__10040));
})())){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars__$1,ana_env,lib,cljs.core.next(deps),opts,cb);
} else {
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$2(ana_env,["Invalid :lang specified ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(lang),", only :clj or :js allowed"].join('')));
}
}
}
});})(G__10026,dep,compiler,bound_vars__$1,_STAR_cljs_dep_set_STAR_10021))
;
var fexpr__10025 = cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);
return (fexpr__10025.cljs$core$IFn$_invoke$arity$2 ? fexpr__10025.cljs$core$IFn$_invoke$arity$2(G__10026,G__10027) : fexpr__10025.call(null,G__10026,G__10027));
}catch (e10023){var cause = e10023;
var G__10024 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not analyze dep ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(dep)].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10024) : cb.call(null,G__10024));
}} else {
var G__10041 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10041) : cb.call(null,G__10041));
}
}
}finally {cljs.analyzer._STAR_cljs_dep_set_STAR_ = _STAR_cljs_dep_set_STAR_10021;
}});

cljs.js.analyze_deps.cljs$lang$maxFixedArity = 6;

cljs.js.load_macros = (function cljs$js$load_macros(bound_vars,k,macros,lib,reload,reloads,opts,cb){
if(cljs.core.seq(macros)){
var nsym = cljs.core.first(cljs.core.vals(macros));
var k__$1 = (function (){var or__3936__auto__ = (reload.cljs$core$IFn$_invoke$arity$1 ? reload.cljs$core$IFn$_invoke$arity$1(k) : reload.call(null,k));
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
var or__3936__auto____$1 = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(reloads,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,nsym], null));
if(cljs.core.truth_(or__3936__auto____$1)){
return or__3936__auto____$1;
} else {
var or__3936__auto____$2 = (function (){var and__3925__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(nsym,cljs.core.name);
if(and__3925__auto__){
var and__3925__auto____$1 = cljs.core.cst$kw$_STAR_reload_DASH_macros_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__3925__auto____$1)){
return cljs.core.cst$kw$reload;
} else {
return and__3925__auto____$1;
}
} else {
return and__3925__auto__;
}
})();
if(cljs.core.truth_(or__3936__auto____$2)){
return or__3936__auto____$2;
} else {
return null;
}
}
}
})();
var opts_SINGLEQUOTE_ = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$macros_DASH_ns,true),cljs.core.cst$kw$context),cljs.core.cst$kw$def_DASH_emits_DASH_var),cljs.core.cst$kw$ns),cljs.core.cst$kw$emit_DASH_constants,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$optimize_DASH_constants], 0));
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,nsym,k__$1,opts_SINGLEQUOTE_,((function (nsym,k__$1,opts_SINGLEQUOTE_){
return (function (res){
if(cljs.core.not(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
var G__10043 = bound_vars;
var G__10044 = k__$1;
var G__10045 = cljs.core.next(macros);
var G__10046 = lib;
var G__10047 = reload;
var G__10048 = reloads;
var G__10049 = opts;
var G__10050 = cb;
return (cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8 ? cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8(G__10043,G__10044,G__10045,G__10046,G__10047,G__10048,G__10049,G__10050) : cljs.js.load_macros.call(null,G__10043,G__10044,G__10045,G__10046,G__10047,G__10048,G__10049,G__10050));
} else {
var temp__5455__auto__ = (function (){var cljs_ns = cljs.analyzer.clj_ns__GT_cljs_ns(nsym);
return cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([nsym,null]),cljs_ns,cljs_ns);
})();
if(cljs.core.truth_(temp__5455__auto__)){
var cljs_dep = temp__5455__auto__;
return cljs.js.require.cljs$core$IFn$_invoke$arity$5(bound_vars,cljs_dep,k__$1,opts_SINGLEQUOTE_,((function (cljs_dep,temp__5455__auto__,nsym,k__$1,opts_SINGLEQUOTE_){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
cljs.js.patch_alias_map(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars),lib,nsym,cljs_dep);

var G__10051 = bound_vars;
var G__10052 = k__$1;
var G__10053 = cljs.core.next(macros);
var G__10054 = lib;
var G__10055 = reload;
var G__10056 = reloads;
var G__10057 = opts;
var G__10058 = ((function (G__10051,G__10052,G__10053,G__10054,G__10055,G__10056,G__10057,cljs_dep,temp__5455__auto__,nsym,k__$1,opts_SINGLEQUOTE_){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$2) : cb.call(null,res__$2));
} else {
var G__10059 = cljs.core.update.cljs$core$IFn$_invoke$arity$5(res__$2,cljs.core.cst$kw$aliased_DASH_loads,cljs.core.assoc,nsym,cljs_dep);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10059) : cb.call(null,G__10059));
}
});})(G__10051,G__10052,G__10053,G__10054,G__10055,G__10056,G__10057,cljs_dep,temp__5455__auto__,nsym,k__$1,opts_SINGLEQUOTE_))
;
return (cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8 ? cljs.js.load_macros.cljs$core$IFn$_invoke$arity$8(G__10051,G__10052,G__10053,G__10054,G__10055,G__10056,G__10057,G__10058) : cljs.js.load_macros.call(null,G__10051,G__10052,G__10053,G__10054,G__10055,G__10056,G__10057,G__10058));
}
});})(cljs_dep,temp__5455__auto__,nsym,k__$1,opts_SINGLEQUOTE_))
);
} else {
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
}
}
});})(nsym,k__$1,opts_SINGLEQUOTE_))
);
} else {
var G__10060 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10060) : cb.call(null,G__10060));
}
});
cljs.js.rewrite_ns_ast = (function cljs$js$rewrite_ns_ast(var_args){
var G__10064 = arguments.length;
switch (G__10064) {
case 2:
return cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
case 3:
return cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2 = (function (ast,smap){
return cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3(ast,smap,false);
});

cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3 = (function (ast,smap,macros_QMARK_){
var vec__10065 = (cljs.core.truth_(macros_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$use_DASH_macros,cljs.core.cst$kw$require_DASH_macros,cljs.core.cst$kw$rename_DASH_macros], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$uses,cljs.core.cst$kw$requires,cljs.core.cst$kw$renames], null));
var uk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10065,(0),null);
var rk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10065,(1),null);
var renk = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10065,(2),null);
var rewrite_renames = ((function (vec__10065,uk,rk,renk){
return (function (m){
if(cljs.core.truth_(m)){
return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__10065,uk,rk,renk){
return (function (acc,p__10068){
var vec__10069 = p__10068;
var renamed = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10069,(0),null);
var qualified_sym = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10069,(1),null);
var entry = vec__10069;
var from = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.namespace(qualified_sym));
var to = cljs.core.get.cljs$core$IFn$_invoke$arity$2(smap,from);
if(!((to == null))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(acc,renamed,cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(to)].join(''),cljs.core.name(qualified_sym)));
} else {
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([acc,entry], 0));
}
});})(vec__10065,uk,rk,renk))
,cljs.core.PersistentArrayMap.EMPTY,m);
} else {
return null;
}
});})(vec__10065,uk,rk,renk))
;
var rewrite_deps = ((function (vec__10065,uk,rk,renk,rewrite_renames){
return (function (deps){
return cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(((function (vec__10065,uk,rk,renk,rewrite_renames){
return (function (dep){
var temp__5455__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(smap,dep);
if(cljs.core.truth_(temp__5455__auto__)){
var new_dep = temp__5455__auto__;
return new_dep;
} else {
return dep;
}
});})(vec__10065,uk,rk,renk,rewrite_renames))
),deps);
});})(vec__10065,uk,rk,renk,rewrite_renames))
;
return cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(ast,uk,((function (vec__10065,uk,rk,renk,rewrite_renames,rewrite_deps){
return (function (p1__10061_SHARP_){
return clojure.walk.postwalk_replace(smap,p1__10061_SHARP_);
});})(vec__10065,uk,rk,renk,rewrite_renames,rewrite_deps))
),rk,((function (vec__10065,uk,rk,renk,rewrite_renames,rewrite_deps){
return (function (p1__10062_SHARP_){
return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([smap,clojure.walk.postwalk_replace(smap,p1__10062_SHARP_)], 0));
});})(vec__10065,uk,rk,renk,rewrite_renames,rewrite_deps))
),renk,rewrite_renames),cljs.core.cst$kw$deps,rewrite_deps);
});

cljs.js.rewrite_ns_ast.cljs$lang$maxFixedArity = 3;

cljs.js.check_macro_autoload_inferring_missing = (function cljs$js$check_macro_autoload_inferring_missing(p__10073,cenv){
var map__10074 = p__10073;
var map__10074__$1 = ((((!((map__10074 == null)))?(((((map__10074.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10074.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10074):map__10074);
var ast = map__10074__$1;
var requires = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10074__$1,cljs.core.cst$kw$requires);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10074__$1,cljs.core.cst$kw$name);
var namespaces = cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces.cljs$core$IFn$_invoke$arity$1(cljs.core.deref(cenv));
var missing_require_macros = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.filter.cljs$core$IFn$_invoke$arity$1(((function (namespaces,map__10074,map__10074__$1,ast,requires,name){
return (function (p__10076){
var vec__10077 = p__10076;
var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10077,(0),null);
var full_ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10077,(1),null);
var map__10080 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(namespaces,full_ns);
var map__10080__$1 = ((((!((map__10080 == null)))?(((((map__10080.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10080.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10080):map__10080);
var use_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10080__$1,cljs.core.cst$kw$use_DASH_macros);
var require_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10080__$1,cljs.core.cst$kw$require_DASH_macros);
var or__3936__auto__ = cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([full_ns]),cljs.core.vals(use_macros));
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.core.some(cljs.core.PersistentHashSet.createAsIfByAssoc([full_ns]),cljs.core.vals(require_macros));
}
});})(namespaces,map__10074,map__10074__$1,ast,requires,name))
),requires);
var ast_SINGLEQUOTE_ = cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(ast,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$require_DASH_macros], null),cljs.core.merge,missing_require_macros);
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(cenv,cljs.core.update_in,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,name,cljs.core.cst$kw$require_DASH_macros], null),cljs.core.merge,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([missing_require_macros], 0));

return ast_SINGLEQUOTE_;
});
cljs.js.ns_side_effects = (function cljs$js$ns_side_effects(var_args){
var G__10085 = arguments.length;
switch (G__10085) {
case 5:
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
case 6:
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$5 = (function (bound_vars,ana_env,ast,opts,cb){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(false,bound_vars,ana_env,ast,opts,cb);
});

cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6 = (function (load,bound_vars,ana_env,p__10086,opts,cb){
var map__10087 = p__10086;
var map__10087__$1 = ((((!((map__10087 == null)))?(((((map__10087.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10087.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10087):map__10087);
var ast = map__10087__$1;
var op = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10087__$1,cljs.core.cst$kw$op);
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Namespace side effects for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

if(cljs.core.truth_((function (){var fexpr__10089 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__10089.cljs$core$IFn$_invoke$arity$1 ? fexpr__10089.cljs$core$IFn$_invoke$arity$1(op) : fexpr__10089.call(null,op));
})())){
var check_uses_and_load_macros = ((function (map__10087,map__10087__$1,ast,op){
return (function cljs$js$check_uses_and_load_macros(res,rewritten_ast){
var env = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
var map__10107 = rewritten_ast;
var map__10107__$1 = ((((!((map__10107 == null)))?(((((map__10107.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10107.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10107):map__10107);
var uses = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10107__$1,cljs.core.cst$kw$uses);
var use_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10107__$1,cljs.core.cst$kw$use_DASH_macros);
var reload = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10107__$1,cljs.core.cst$kw$reload);
var reloads = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10107__$1,cljs.core.cst$kw$reloads);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10107__$1,cljs.core.cst$kw$name);
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars))){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Processing :use-macros for",name], 0));
} else {
}

return cljs.js.load_macros(bound_vars,cljs.core.cst$kw$use_DASH_macros,use_macros,name,reload,reloads,opts,((function (env,map__10107,map__10107__$1,uses,use_macros,reload,reloads,name,map__10087,map__10087__$1,ast,op){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var map__10109 = cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3(rewritten_ast,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(res__$1),true);
var map__10109__$1 = ((((!((map__10109 == null)))?(((((map__10109.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10109.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10109):map__10109);
var rewritten_ast__$1 = map__10109__$1;
var require_macros = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10109__$1,cljs.core.cst$kw$require_DASH_macros);
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Processing :require-macros for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

return cljs.js.load_macros(bound_vars,cljs.core.cst$kw$require_DASH_macros,require_macros,name,reload,reloads,opts,((function (map__10109,map__10109__$1,rewritten_ast__$1,require_macros,env,map__10107,map__10107__$1,uses,use_macros,reload,reloads,name,map__10087,map__10087__$1,ast,op){
return (function (res_SINGLEQUOTE_){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE_))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE_) : cb.call(null,res_SINGLEQUOTE_));
} else {
var map__10111 = cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$3(rewritten_ast__$1,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(res__$1),true);
var map__10111__$1 = ((((!((map__10111 == null)))?(((((map__10111.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10111.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10111):map__10111);
var rewritten_ast__$2 = map__10111__$1;
var use_macros__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10111__$1,cljs.core.cst$kw$use_DASH_macros);
var res_SINGLEQUOTE___$1 = (function (){try{if(cljs.core.seq(use_macros__$1)){
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Checking :use-macros for",cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
} else {
}

var _STAR_analyze_deps_STAR_10114_10128 = cljs.analyzer._STAR_analyze_deps_STAR_;
var _STAR_compiler_STAR_10115_10129 = cljs.env._STAR_compiler_STAR_;
cljs.analyzer._STAR_analyze_deps_STAR_ = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

try{cljs.analyzer.check_use_macros.cljs$core$IFn$_invoke$arity$2(use_macros__$1,env);
}finally {cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_10115_10129;

cljs.analyzer._STAR_analyze_deps_STAR_ = _STAR_analyze_deps_STAR_10114_10128;
}} else {
}

return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null);
}catch (e10113){var cause = e10113;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not parse ns form ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE___$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res_SINGLEQUOTE___$1) : cb.call(null,res_SINGLEQUOTE___$1));
} else {
try{var _STAR_analyze_deps_STAR_10118 = cljs.analyzer._STAR_analyze_deps_STAR_;
var _STAR_compiler_STAR_10119 = cljs.env._STAR_compiler_STAR_;
cljs.analyzer._STAR_analyze_deps_STAR_ = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);

try{var ast_SINGLEQUOTE_ = cljs.js.check_macro_autoload_inferring_missing(cljs.analyzer.check_rename_macros_inferring_missing(cljs.analyzer.check_use_macros_inferring_missing(rewritten_ast__$2,env),env),env);
var G__10120 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast_SINGLEQUOTE_], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10120) : cb.call(null,G__10120));
}finally {cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_10119;

cljs.analyzer._STAR_analyze_deps_STAR_ = _STAR_analyze_deps_STAR_10118;
}}catch (e10116){var cause = e10116;
var G__10117 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not parse ns form ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10117) : cb.call(null,G__10117));
}}
}
});})(map__10109,map__10109__$1,rewritten_ast__$1,require_macros,env,map__10107,map__10107__$1,uses,use_macros,reload,reloads,name,map__10087,map__10087__$1,ast,op))
);
}
});})(env,map__10107,map__10107__$1,uses,use_macros,reload,reloads,name,map__10087,map__10087__$1,ast,op))
);
} else {
try{if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Checking uses"], 0));
} else {
}

cljs.analyzer.check_uses((cljs.core.truth_((function (){var and__3925__auto__ = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.seq(uses);
} else {
return and__3925__auto__;
}
})())?cljs.analyzer.missing_uses(uses,env):null),env);

var G__10123 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10123) : cb.call(null,G__10123));
}catch (e10121){var cause = e10121;
var G__10122 = cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(ana_env,["Could not parse ns form ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast))].join(''),cause));
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10122) : cb.call(null,G__10122));
}}
}
});})(map__10087,map__10087__$1,ast,op))
;
if(cljs.core.truth_((function (){var and__3925__auto__ = load;
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.seq(cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
} else {
return and__3925__auto__;
}
})())){
var map__10124 = ast;
var map__10124__$1 = ((((!((map__10124 == null)))?(((((map__10124.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10124.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10124):map__10124);
var reload = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10124__$1,cljs.core.cst$kw$reload);
var name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10124__$1,cljs.core.cst$kw$name);
var deps = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10124__$1,cljs.core.cst$kw$deps);
return cljs.js.load_deps.cljs$core$IFn$_invoke$arity$7(bound_vars,ana_env,name,deps,(function (){var or__3936__auto__ = cljs.core.cst$kw$require.cljs$core$IFn$_invoke$arity$1(reload);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.core.cst$kw$use.cljs$core$IFn$_invoke$arity$1(reload);
}
})(),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),((function (map__10124,map__10124__$1,reload,name,deps,map__10087,map__10087__$1,ast,op){
return (function (p1__10082_SHARP_){
return check_uses_and_load_macros(p1__10082_SHARP_,cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2(ast,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(p1__10082_SHARP_)));
});})(map__10124,map__10124__$1,reload,name,deps,map__10087,map__10087__$1,ast,op))
);
} else {
if(cljs.core.truth_((function (){var and__3925__auto__ = cljs.core.not(load);
if(and__3925__auto__){
var and__3925__auto____$1 = cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars);
if(cljs.core.truth_(and__3925__auto____$1)){
return cljs.core.seq(cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
} else {
return and__3925__auto____$1;
}
} else {
return and__3925__auto__;
}
})())){
return cljs.js.analyze_deps.cljs$core$IFn$_invoke$arity$6(bound_vars,ana_env,cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast),cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$macros_DASH_ns),((function (map__10087,map__10087__$1,ast,op){
return (function (p1__10083_SHARP_){
return check_uses_and_load_macros(p1__10083_SHARP_,cljs.js.rewrite_ns_ast.cljs$core$IFn$_invoke$arity$2(ast,cljs.core.cst$kw$aliased_DASH_loads.cljs$core$IFn$_invoke$arity$1(p1__10083_SHARP_)));
});})(map__10087,map__10087__$1,ast,op))
);
} else {
return check_uses_and_load_macros(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null),ast);

}
}
} else {
var G__10126 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,ast], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10126) : cb.call(null,G__10126));
}
});

cljs.js.ns_side_effects.cljs$lang$maxFixedArity = 6;

cljs.js.node_side_effects = (function cljs$js$node_side_effects(bound_vars,sb,deps,ns_name,emit_nil_result_QMARK_){
var seq__10130_10138 = cljs.core.seq(deps);
var chunk__10131_10139 = null;
var count__10132_10140 = (0);
var i__10133_10141 = (0);
while(true){
if((i__10133_10141 < count__10132_10140)){
var dep_10142 = chunk__10131_10139.cljs$core$IIndexed$_nth$arity$2(null,i__10133_10141);
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10134_10143 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10135_10144 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__10130_10138,chunk__10131_10139,count__10132_10140,i__10133_10141,_STAR_print_newline_STAR_10134_10143,_STAR_print_fn_STAR_10135_10144,sb__4448__auto__,dep_10142){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(seq__10130_10138,chunk__10131_10139,count__10132_10140,i__10133_10141,_STAR_print_newline_STAR_10134_10143,_STAR_print_fn_STAR_10135_10144,sb__4448__auto__,dep_10142))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_node_lib(dep_10142)," = require('",dep_10142,"');"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10135_10144;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10134_10143;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());


var G__10145 = seq__10130_10138;
var G__10146 = chunk__10131_10139;
var G__10147 = count__10132_10140;
var G__10148 = (i__10133_10141 + (1));
seq__10130_10138 = G__10145;
chunk__10131_10139 = G__10146;
count__10132_10140 = G__10147;
i__10133_10141 = G__10148;
continue;
} else {
var temp__5457__auto___10149 = cljs.core.seq(seq__10130_10138);
if(temp__5457__auto___10149){
var seq__10130_10150__$1 = temp__5457__auto___10149;
if(cljs.core.chunked_seq_QMARK_(seq__10130_10150__$1)){
var c__4337__auto___10151 = cljs.core.chunk_first(seq__10130_10150__$1);
var G__10152 = cljs.core.chunk_rest(seq__10130_10150__$1);
var G__10153 = c__4337__auto___10151;
var G__10154 = cljs.core.count(c__4337__auto___10151);
var G__10155 = (0);
seq__10130_10138 = G__10152;
chunk__10131_10139 = G__10153;
count__10132_10140 = G__10154;
i__10133_10141 = G__10155;
continue;
} else {
var dep_10156 = cljs.core.first(seq__10130_10150__$1);
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10136_10157 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10137_10158 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__10130_10138,chunk__10131_10139,count__10132_10140,i__10133_10141,_STAR_print_newline_STAR_10136_10157,_STAR_print_fn_STAR_10137_10158,sb__4448__auto__,dep_10156,seq__10130_10150__$1,temp__5457__auto___10149){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(seq__10130_10138,chunk__10131_10139,count__10132_10140,i__10133_10141,_STAR_print_newline_STAR_10136_10157,_STAR_print_fn_STAR_10137_10158,sb__4448__auto__,dep_10156,seq__10130_10150__$1,temp__5457__auto___10149))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_node_lib(dep_10156)," = require('",dep_10156,"');"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10137_10158;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10136_10157;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());


var G__10159 = cljs.core.next(seq__10130_10150__$1);
var G__10160 = null;
var G__10161 = (0);
var G__10162 = (0);
seq__10130_10138 = G__10159;
chunk__10131_10139 = G__10160;
count__10132_10140 = G__10161;
i__10133_10141 = G__10162;
continue;
}
} else {
}
}
break;
}

if(cljs.core.truth_((function (){var and__3925__auto__ = cljs.core.seq(deps);
if(and__3925__auto__){
return emit_nil_result_QMARK_;
} else {
return and__3925__auto__;
}
})())){
return sb.append("null;");
} else {
return null;
}
});
cljs.js.global_exports_side_effects = (function cljs$js$global_exports_side_effects(bound_vars,sb,deps,ns_name,emit_nil_result_QMARK_){
var map__10163 = cljs.core.deref(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars));
var map__10163__$1 = ((((!((map__10163 == null)))?(((((map__10163.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10163.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10163):map__10163);
var js_dependency_index = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10163__$1,cljs.core.cst$kw$js_DASH_dependency_DASH_index);
var seq__10165_10177 = cljs.core.seq(deps);
var chunk__10166_10178 = null;
var count__10167_10179 = (0);
var i__10168_10180 = (0);
while(true){
if((i__10168_10180 < count__10167_10179)){
var dep_10181 = chunk__10166_10178.cljs$core$IIndexed$_nth$arity$2(null,i__10168_10180);
var map__10169_10182 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(js_dependency_index,cljs.core.name(dep_10181));
var map__10169_10183__$1 = ((((!((map__10169_10182 == null)))?(((((map__10169_10182.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10169_10182.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10169_10182):map__10169_10182);
var global_exports_10184 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10169_10183__$1,cljs.core.cst$kw$global_DASH_exports);
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10171_10185 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10172_10186 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__10165_10177,chunk__10166_10178,count__10167_10179,i__10168_10180,_STAR_print_newline_STAR_10171_10185,_STAR_print_fn_STAR_10172_10186,sb__4448__auto__,map__10169_10182,map__10169_10183__$1,global_exports_10184,dep_10181,map__10163,map__10163__$1,js_dependency_index){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(seq__10165_10177,chunk__10166_10178,count__10167_10179,i__10168_10180,_STAR_print_newline_STAR_10171_10185,_STAR_print_fn_STAR_10172_10186,sb__4448__auto__,map__10169_10182,map__10169_10183__$1,global_exports_10184,dep_10181,map__10163,map__10163__$1,js_dependency_index))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_global_export(dep_10181)," = goog.global[\"",cljs.core.get.cljs$core$IFn$_invoke$arity$2(global_exports_10184,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(dep_10181)),"\"];"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10172_10186;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10171_10185;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());


var G__10187 = seq__10165_10177;
var G__10188 = chunk__10166_10178;
var G__10189 = count__10167_10179;
var G__10190 = (i__10168_10180 + (1));
seq__10165_10177 = G__10187;
chunk__10166_10178 = G__10188;
count__10167_10179 = G__10189;
i__10168_10180 = G__10190;
continue;
} else {
var temp__5457__auto___10191 = cljs.core.seq(seq__10165_10177);
if(temp__5457__auto___10191){
var seq__10165_10192__$1 = temp__5457__auto___10191;
if(cljs.core.chunked_seq_QMARK_(seq__10165_10192__$1)){
var c__4337__auto___10193 = cljs.core.chunk_first(seq__10165_10192__$1);
var G__10194 = cljs.core.chunk_rest(seq__10165_10192__$1);
var G__10195 = c__4337__auto___10193;
var G__10196 = cljs.core.count(c__4337__auto___10193);
var G__10197 = (0);
seq__10165_10177 = G__10194;
chunk__10166_10178 = G__10195;
count__10167_10179 = G__10196;
i__10168_10180 = G__10197;
continue;
} else {
var dep_10198 = cljs.core.first(seq__10165_10192__$1);
var map__10173_10199 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(js_dependency_index,cljs.core.name(dep_10198));
var map__10173_10200__$1 = ((((!((map__10173_10199 == null)))?(((((map__10173_10199.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10173_10199.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10173_10199):map__10173_10199);
var global_exports_10201 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10173_10200__$1,cljs.core.cst$kw$global_DASH_exports);
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10175_10202 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10176_10203 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (seq__10165_10177,chunk__10166_10178,count__10167_10179,i__10168_10180,_STAR_print_newline_STAR_10175_10202,_STAR_print_fn_STAR_10176_10203,sb__4448__auto__,map__10173_10199,map__10173_10200__$1,global_exports_10201,dep_10198,seq__10165_10192__$1,temp__5457__auto___10191,map__10163,map__10163__$1,js_dependency_index){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(seq__10165_10177,chunk__10166_10178,count__10167_10179,i__10168_10180,_STAR_print_newline_STAR_10175_10202,_STAR_print_fn_STAR_10176_10203,sb__4448__auto__,map__10173_10199,map__10173_10200__$1,global_exports_10201,dep_10198,seq__10165_10192__$1,temp__5457__auto___10191,map__10163,map__10163__$1,js_dependency_index))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.munge(ns_name),".",cljs.analyzer.munge_global_export(dep_10198)," = goog.global[\"",cljs.core.get.cljs$core$IFn$_invoke$arity$2(global_exports_10201,cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(dep_10198)),"\"];"], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10176_10203;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10175_10202;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());


var G__10204 = cljs.core.next(seq__10165_10192__$1);
var G__10205 = null;
var G__10206 = (0);
var G__10207 = (0);
seq__10165_10177 = G__10204;
chunk__10166_10178 = G__10205;
count__10167_10179 = G__10206;
i__10168_10180 = G__10207;
continue;
}
} else {
}
}
break;
}

if(cljs.core.truth_((function (){var and__3925__auto__ = cljs.core.seq(deps);
if(and__3925__auto__){
return emit_nil_result_QMARK_;
} else {
return and__3925__auto__;
}
})())){
return sb.append("null;");
} else {
return null;
}
});
/**
 * Returns a new function that calls f but discards any return value,
 *   returning nil instead, thus avoiding any inadvertent trampoline continuation
 *   if a function happens to be returned.
 */
cljs.js.trampoline_safe = (function cljs$js$trampoline_safe(f){
return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.constantly(null),f);
});
cljs.js.analyze_str_STAR_ = (function cljs$js$analyze_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var cb__$1 = cljs.js.trampoline_safe(cb);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var the_ns = (function (){var or__3936__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__10210 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10210,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__10210;
}
})();
return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(((function (rdr,cb__$1,eof,aenv,the_ns,bound_vars__$1){
return (function cljs$js$analyze_str_STAR__$_analyze_loop(last_ast,ns){
var _STAR_compiler_STAR_10211 = cljs.env._STAR_compiler_STAR_;
var _STAR_cljs_ns_STAR_10212 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_10213 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_10214 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_10215 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_10216 = cljs.core._STAR_ns_STAR_;
var _STAR_passes_STAR_10217 = cljs.analyzer._STAR_passes_STAR_;
var _STAR_alias_map_STAR_10218 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_10219 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol10220 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_10221 = cljs.compiler._STAR_source_map_data_STAR_;
var _STAR_cljs_file_STAR_10222 = cljs.analyzer._STAR_cljs_file_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__3925__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__3925__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.analyzer._STAR_passes_STAR_ = cljs.core.cst$kw$_STAR_passes_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_file_STAR_ = cljs.core.cst$kw$cljs_DASH_file.cljs$core$IFn$_invoke$arity$1(opts);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.js.read(eof,rdr)], null);
}catch (e10223){var cause = e10223;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,["Could not analyze ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res) : cb__$1.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__10224 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__10224__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10224,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__10224);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10224__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__10224__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e10225){var cause = e10225;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not analyze ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$1) : cb__$1.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
if(cljs.core.truth_((function (){var G__10227 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast);
var fexpr__10226 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__10226.cljs$core$IFn$_invoke$arity$1 ? fexpr__10226.cljs$core$IFn$_invoke$arity$1(G__10227) : fexpr__10226.call(null,G__10227));
})())){
var G__10229 = bound_vars__$1;
var G__10230 = aenv__$1;
var G__10231 = ast;
var G__10232 = opts;
var G__10233 = ((function (G__10229,G__10230,G__10231,G__10232,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10211,_STAR_cljs_ns_STAR_10212,_STAR_checked_arrays_STAR_10213,_STAR_cljs_static_fns_STAR_10214,_STAR_fn_invoke_direct_STAR_10215,_STAR_ns_STAR_10216,_STAR_passes_STAR_10217,_STAR_alias_map_STAR_10218,_STAR_data_readers_STAR_10219,resolve_symbol10220,_STAR_source_map_data_STAR_10221,_STAR_cljs_file_STAR_10222,rdr,cb__$1,eof,aenv,the_ns,bound_vars__$1){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$2) : cb__$1.call(null,res__$2));
} else {
return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(cljs$js$analyze_str_STAR__$_analyze_loop,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ast,cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast)], 0));
}
});})(G__10229,G__10230,G__10231,G__10232,ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10211,_STAR_cljs_ns_STAR_10212,_STAR_checked_arrays_STAR_10213,_STAR_cljs_static_fns_STAR_10214,_STAR_fn_invoke_direct_STAR_10215,_STAR_ns_STAR_10216,_STAR_passes_STAR_10217,_STAR_alias_map_STAR_10218,_STAR_data_readers_STAR_10219,resolve_symbol10220,_STAR_source_map_data_STAR_10221,_STAR_cljs_file_STAR_10222,rdr,cb__$1,eof,aenv,the_ns,bound_vars__$1))
;
var fexpr__10228 = cljs.js.trampoline_safe(cljs.js.ns_side_effects);
return (fexpr__10228.cljs$core$IFn$_invoke$arity$5 ? fexpr__10228.cljs$core$IFn$_invoke$arity$5(G__10229,G__10230,G__10231,G__10232,G__10233) : fexpr__10228.call(null,G__10229,G__10230,G__10231,G__10232,G__10233));
} else {
return ((function (ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10211,_STAR_cljs_ns_STAR_10212,_STAR_checked_arrays_STAR_10213,_STAR_cljs_static_fns_STAR_10214,_STAR_fn_invoke_direct_STAR_10215,_STAR_ns_STAR_10216,_STAR_passes_STAR_10217,_STAR_alias_map_STAR_10218,_STAR_data_readers_STAR_10219,resolve_symbol10220,_STAR_source_map_data_STAR_10221,_STAR_cljs_file_STAR_10222,rdr,cb__$1,eof,aenv,the_ns,bound_vars__$1){
return (function (){
return cljs$js$analyze_str_STAR__$_analyze_loop(ast,ns);
});
;})(ast,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10211,_STAR_cljs_ns_STAR_10212,_STAR_checked_arrays_STAR_10213,_STAR_cljs_static_fns_STAR_10214,_STAR_fn_invoke_direct_STAR_10215,_STAR_ns_STAR_10216,_STAR_passes_STAR_10217,_STAR_alias_map_STAR_10218,_STAR_data_readers_STAR_10219,resolve_symbol10220,_STAR_source_map_data_STAR_10221,_STAR_cljs_file_STAR_10222,rdr,cb__$1,eof,aenv,the_ns,bound_vars__$1))
}
}
} else {
var G__10234 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,last_ast], null);
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(G__10234) : cb__$1.call(null,G__10234));
}
}
}finally {cljs.analyzer._STAR_cljs_file_STAR_ = _STAR_cljs_file_STAR_10222;

cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_10221;

cljs.tools.reader.resolve_symbol = resolve_symbol10220;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_10219;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_10218;

cljs.analyzer._STAR_passes_STAR_ = _STAR_passes_STAR_10217;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_10216;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_10215;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_10214;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_10213;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_10212;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_10211;
}});})(rdr,cb__$1,eof,aenv,the_ns,bound_vars__$1))
,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null,the_ns], 0));
});
/**
 * Analyze ClojureScript source. The compiler state will be populated with
 * the results of analyzes. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * source (string)
 *   the ClojureScript source
 * 
 * name (symbol or string)
 *   optional, the name of the source
 * 
 * opts (map)
 *   compilation options.
 * 
 *    :eval             - eval function to invoke, see *eval-fn*
 *    :load             - library resolution function, see *load-fn*
 *    :source-map       - set to true to generate inline source map information
 *    :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                        (if set to true) or the def init value (if false).
 *                        Defaults to false.
 *    :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                        to aget/aset. Logs for incorrect values if :warn, throws if
 *                        :error. Defaults to false.
 *    :static-fns       - employ static dispatch to specific function arities in
 *                        emitted JavaScript, as opposed to making use of the
 *                        `call` construct. Defaults to false.
 *    :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                        unknown functions, but instead direct invokes via
 *                        `f(a0,a1...)`. Defaults to `false`.
 *    :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                        at the moment.
 *    :ns               - optional, the namespace in which to evaluate the source.
 *    :verbose          - optional, emit details from compiler activity. Defaults to
 *                        false.
 *    :context          - optional, sets the context for the source. Possible values
 *                        are `:expr`, `:statement` and `:return`. Defaults to
 *                        `:expr`.
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value, the actual value is not meaningful. If unsuccessful the
 *   map will contain a key :error with an ex-info instance describing the cause
 *   of failure.
 */
cljs.js.analyze_str = (function cljs$js$analyze_str(var_args){
var G__10236 = arguments.length;
switch (G__10236) {
case 3:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.analyze_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.analyze_str_STAR_(new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_passes_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$passes.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.analyzer._STAR_passes_STAR_;
}
})(),cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),source,name,opts,cb);
});

cljs.js.analyze_str.cljs$lang$maxFixedArity = 5;

cljs.js.eval_STAR_ = (function cljs$js$eval_STAR_(bound_vars,form,opts,cb){
var the_ns = (function (){var or__3936__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__10238 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10238,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__10238;
}
})();
cljs.js.clear_fns_BANG_();

var _STAR_compiler_STAR_10239 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_10240 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_10241 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_10242 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_10243 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_10244 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_10245 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_10246 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_10247 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol10248 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_10249 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__3925__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__3925__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1));

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var aenv = cljs.analyzer.empty_env();
var aenv__$1 = (function (){var G__10250 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__10250__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10250,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__10250);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10250__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__10250__$1;
}
})();
var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e10251){var cause = e10251;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not eval ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(form)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res) : cb.call(null,res));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
var vec__10252 = ((cljs.core.keyword_identical_QMARK_(cljs.core.cst$kw$target.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$nodejs))?(function (){var map__10255 = cljs.core.group_by(cljs.analyzer.node_module_dep_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
var map__10255__$1 = ((((!((map__10255 == null)))?(((((map__10255.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10255.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10255):map__10255);
var node_libs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10255__$1,true);
var libs_to_load = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10255__$1,false);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node_libs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ast,cljs.core.cst$kw$deps,libs_to_load)], null);
})():new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,ast], null));
var node_deps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10252,(0),null);
var ast__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10252,(1),null);
if(cljs.core.truth_((function (){var G__10258 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast__$1);
var fexpr__10257 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__10257.cljs$core$IFn$_invoke$arity$1 ? fexpr__10257.cljs$core$IFn$_invoke$arity$1(G__10258) : fexpr__10257.call(null,G__10258));
})())){
return cljs.js.ns_side_effects.cljs$core$IFn$_invoke$arity$6(true,bound_vars__$1,aenv__$1,ast__$1,opts,((function (ast,vec__10252,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_10239,_STAR_eval_fn_STAR_10240,_STAR_cljs_ns_STAR_10241,_STAR_checked_arrays_STAR_10242,_STAR_cljs_static_fns_STAR_10243,_STAR_fn_invoke_direct_STAR_10244,_STAR_ns_STAR_10245,_STAR_alias_map_STAR_10246,_STAR_data_readers_STAR_10247,resolve_symbol10248,_STAR_source_map_data_STAR_10249,the_ns,bound_vars__$1){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(res__$1) : cb.call(null,res__$1));
} else {
var ns_name = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1);
var sb = (new goog.string.StringBuffer());
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10259_10265 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10260_10266 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_10259_10265,_STAR_print_fn_STAR_10260_10266,sb__4448__auto__,ns_name,sb,ast,vec__10252,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_10239,_STAR_eval_fn_STAR_10240,_STAR_cljs_ns_STAR_10241,_STAR_checked_arrays_STAR_10242,_STAR_cljs_static_fns_STAR_10243,_STAR_fn_invoke_direct_STAR_10244,_STAR_ns_STAR_10245,_STAR_alias_map_STAR_10246,_STAR_data_readers_STAR_10247,resolve_symbol10248,_STAR_source_map_data_STAR_10249,the_ns,bound_vars__$1){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(_STAR_print_newline_STAR_10259_10265,_STAR_print_fn_STAR_10260_10266,sb__4448__auto__,ns_name,sb,ast,vec__10252,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_10239,_STAR_eval_fn_STAR_10240,_STAR_cljs_ns_STAR_10241,_STAR_checked_arrays_STAR_10242,_STAR_cljs_static_fns_STAR_10243,_STAR_fn_invoke_direct_STAR_10244,_STAR_ns_STAR_10245,_STAR_alias_map_STAR_10246,_STAR_data_readers_STAR_10247,resolve_symbol10248,_STAR_source_map_data_STAR_10249,the_ns,bound_vars__$1))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([["goog.provide(\"",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.compiler.munge.cljs$core$IFn$_invoke$arity$1(ns_name)),"\");"].join('')], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10260_10266;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10259_10265;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());

if((node_deps == null)){
} else {
cljs.js.node_side_effects(bound_vars__$1,sb,node_deps,ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));
}

cljs.js.global_exports_side_effects(bound_vars__$1,sb,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.analyzer.dep_has_global_exports_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast__$1)),ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));

var G__10261 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,sb.toString()], null)) : cljs.js._STAR_eval_fn_STAR_.call(null,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,sb.toString()], null)))], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10261) : cb.call(null,G__10261));
}
});})(ast,vec__10252,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_10239,_STAR_eval_fn_STAR_10240,_STAR_cljs_ns_STAR_10241,_STAR_checked_arrays_STAR_10242,_STAR_cljs_static_fns_STAR_10243,_STAR_fn_invoke_direct_STAR_10244,_STAR_ns_STAR_10245,_STAR_alias_map_STAR_10246,_STAR_data_readers_STAR_10247,resolve_symbol10248,_STAR_source_map_data_STAR_10249,the_ns,bound_vars__$1))
);
} else {
var src = (function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10262_10267 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10263_10268 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_10262_10267,_STAR_print_fn_STAR_10263_10268,sb__4448__auto__,ast,vec__10252,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_10239,_STAR_eval_fn_STAR_10240,_STAR_cljs_ns_STAR_10241,_STAR_checked_arrays_STAR_10242,_STAR_cljs_static_fns_STAR_10243,_STAR_fn_invoke_direct_STAR_10244,_STAR_ns_STAR_10245,_STAR_alias_map_STAR_10246,_STAR_data_readers_STAR_10247,resolve_symbol10248,_STAR_source_map_data_STAR_10249,the_ns,bound_vars__$1){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(_STAR_print_newline_STAR_10262_10267,_STAR_print_fn_STAR_10263_10268,sb__4448__auto__,ast,vec__10252,node_deps,ast__$1,aenv,aenv__$1,res,_STAR_compiler_STAR_10239,_STAR_eval_fn_STAR_10240,_STAR_cljs_ns_STAR_10241,_STAR_checked_arrays_STAR_10242,_STAR_cljs_static_fns_STAR_10243,_STAR_fn_invoke_direct_STAR_10244,_STAR_ns_STAR_10245,_STAR_alias_map_STAR_10246,_STAR_data_readers_STAR_10247,resolve_symbol10248,_STAR_source_map_data_STAR_10249,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(ast__$1);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10263_10268;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10262_10267;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})();
var G__10264 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)) : cljs.js._STAR_eval_fn_STAR_.call(null,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$source,src], null)))], null);
return (cb.cljs$core$IFn$_invoke$arity$1 ? cb.cljs$core$IFn$_invoke$arity$1(G__10264) : cb.call(null,G__10264));
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_10249;

cljs.tools.reader.resolve_symbol = resolve_symbol10248;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_10247;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_10246;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_10245;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_10244;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_10243;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_10242;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_10241;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_10240;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_10239;
}});
/**
 * Evaluate a single ClojureScript form. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * form (s-expr)
 *   the ClojureScript source
 * 
 * opts (map)
 *   compilation options.
 * 
 *    :eval             - eval function to invoke, see *eval-fn*
 *    :load             - library resolution function, see *load-fn*
 *    :source-map       - set to true to generate inline source map information
 *    :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                        (if set to true) or the def init value (if false). Default
 *                        is false.
 *    :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                        to aget/aset. Logs for incorrect values if :warn, throws if
 *                        :error. Defaults to false.
 *    :static-fns       - employ static dispatch to specific function arities in
 *                        emitted JavaScript, as opposed to making use of the
 *                        `call` construct. Defaults to false.
 *    :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                        unknown functions, but instead direct invokes via
 *                        `f(a0,a1...)`. Defaults to `false`.
 *    :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                        at the moment.
 *    :ns               - optional, the namespace in which to evaluate the source.
 *    :verbose          - optional, emit details from compiler activity. Defaults to
 *                        false.
 *    :context          - optional, sets the context for the source. Possible values
 *                        are `:expr`, `:statement` and `:return`. Defaults to
 *                        `:expr`.
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value with the result of evalution. If unsuccessful the map will
 *   contain a key :error with an ex-info instance describing the cause of
 *   failure.
 */
cljs.js.eval = (function cljs$js$eval(var_args){
var G__10270 = arguments.length;
switch (G__10270) {
case 3:
return cljs.js.eval.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.eval.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.eval.cljs$core$IFn$_invoke$arity$3 = (function (state,form,cb){
return cljs.js.eval.cljs$core$IFn$_invoke$arity$4(state,form,null,cb);
});

cljs.js.eval.cljs$core$IFn$_invoke$arity$4 = (function (state,form,opts,cb){
return cljs.js.eval_STAR_(new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),form,opts,cb);
});

cljs.js.eval.cljs$lang$maxFixedArity = 4;

cljs.js.compile_str_STAR_ = (function cljs$js$compile_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var cb__$1 = cljs.js.trampoline_safe(cb);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var sb = (new goog.string.StringBuffer());
var the_ns = (function (){var or__3936__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__10274 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10274,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__10274;
}
})();
return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(((function (rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1){
return (function cljs$js$compile_str_STAR__$_compile_loop(ns){
var _STAR_compiler_STAR_10275 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_10276 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_10277 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_10278 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_10279 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_10280 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_10281 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_10282 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_10283 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol10284 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_10285 = cljs.compiler._STAR_source_map_data_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__3925__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__3925__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.js.read(eof,rdr)], null);
}catch (e10286){var cause = e10286;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,["Could not compile ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res) : cb__$1.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__10287 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(cljs.analyzer._STAR_cljs_ns_STAR_));
var G__10287__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10287,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__10287);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10287__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__10287__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e10288){var cause = e10288;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not compile ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$1) : cb__$1.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
var vec__10289 = ((cljs.core.keyword_identical_QMARK_(cljs.core.cst$kw$target.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$nodejs))?(function (){var map__10292 = cljs.core.group_by(cljs.analyzer.node_module_dep_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
var map__10292__$1 = ((((!((map__10292 == null)))?(((((map__10292.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10292.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10292):map__10292);
var node_libs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10292__$1,true);
var libs_to_load = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10292__$1,false);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node_libs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ast,cljs.core.cst$kw$deps,libs_to_load)], null);
})():new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,ast], null));
var node_deps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10289,(0),null);
var ast__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10289,(1),null);
if(cljs.core.truth_((function (){var G__10295 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast__$1);
var fexpr__10294 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__10294.cljs$core$IFn$_invoke$arity$1 ? fexpr__10294.cljs$core$IFn$_invoke$arity$1(G__10295) : fexpr__10294.call(null,G__10295));
})())){
var G__10297 = bound_vars__$1;
var G__10298 = aenv__$1;
var G__10299 = ast__$1;
var G__10300 = opts;
var G__10301 = ((function (G__10297,G__10298,G__10299,G__10300,ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$2) : cb__$1.call(null,res__$2));
} else {
var ns_name = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1);
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10302_10307 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10303_10308 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_10302_10307,_STAR_print_fn_STAR_10303_10308,sb__4448__auto__,ns_name,G__10297,G__10298,G__10299,G__10300,ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(_STAR_print_newline_STAR_10302_10307,_STAR_print_fn_STAR_10303_10308,sb__4448__auto__,ns_name,G__10297,G__10298,G__10299,G__10300,ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$2));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10303_10308;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10302_10307;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());

if((node_deps == null)){
} else {
cljs.js.node_side_effects(bound_vars__$1,sb,node_deps,ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));
}

return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(cljs$js$compile_str_STAR__$_compile_loop,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1)], 0));
}
});})(G__10297,G__10298,G__10299,G__10300,ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1))
;
var fexpr__10296 = cljs.js.trampoline_safe(cljs.js.ns_side_effects);
return (fexpr__10296.cljs$core$IFn$_invoke$arity$5 ? fexpr__10296.cljs$core$IFn$_invoke$arity$5(G__10297,G__10298,G__10299,G__10300,G__10301) : fexpr__10296.call(null,G__10297,G__10298,G__10299,G__10300,G__10301));
} else {
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10304_10309 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10305_10310 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_10304_10309,_STAR_print_fn_STAR_10305_10310,sb__4448__auto__,ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(_STAR_print_newline_STAR_10304_10309,_STAR_print_fn_STAR_10305_10310,sb__4448__auto__,ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1))
;

try{cljs.compiler.emit(ast__$1);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10305_10310;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10304_10309;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());

return ((function (ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1){
return (function (){
return cljs$js$compile_str_STAR__$_compile_loop(ns);
});
;})(ast,vec__10289,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10275,_STAR_eval_fn_STAR_10276,_STAR_cljs_ns_STAR_10277,_STAR_checked_arrays_STAR_10278,_STAR_cljs_static_fns_STAR_10279,_STAR_fn_invoke_direct_STAR_10280,_STAR_ns_STAR_10281,_STAR_alias_map_STAR_10282,_STAR_data_readers_STAR_10283,resolve_symbol10284,_STAR_source_map_data_STAR_10285,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1))
}
}
} else {
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.append_source_map(cljs.env._STAR_compiler_STAR_,name,source,sb,cljs.core.deref(cljs.compiler._STAR_source_map_data_STAR_),opts);
} else {
}

var G__10306 = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,sb.toString()], null);
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(G__10306) : cb__$1.call(null,G__10306));
}
}
}finally {cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_10285;

cljs.tools.reader.resolve_symbol = resolve_symbol10284;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_10283;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_10282;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_10281;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_10280;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_10279;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_10278;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_10277;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_10276;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_10275;
}});})(rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1))
,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([the_ns], 0));
});
/**
 * Compile ClojureScript source into JavaScript. The parameters:
 * 
 * state (atom)
 *   the compiler state
 * 
 * source (string)
 *   the ClojureScript source
 * 
 * name (symbol or string)
 *   optional, the name of the source - used as key in :source-maps
 * 
 * opts (map)
 *   compilation options.
 * 
 *    :eval             - eval function to invoke, see *eval-fn*
 *    :load             - library resolution function, see *load-fn*
 *    :source-map       - set to true to generate inline source map information
 *    :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                        (if set to true) or the def init value (if false). Default
 *                        is false.
 *    :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                        to aget/aset. Logs for incorrect values if :warn, throws if
 *                        :error. Defaults to false.
 *    :static-fns       - employ static dispatch to specific function arities in
 *                        emitted JavaScript, as opposed to making use of the
 *                        `call` construct. Defaults to false.
 *    :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                        unknown functions, but instead direct invokes via
 *                        `f(a0,a1...)`. Defaults to `false`.
 *    :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                        at the moment.
 *    :ns               - optional, the namespace in which to evaluate the source.
 *    :verbose          - optional, emit details from compiler activity. Defaults to
 *                        false.
 *    :context          - optional, sets the context for the source. Possible values
 *                        are `:expr`, `:statement` and `:return`. Defaults to
 *                        `:expr`.
 * 
 * cb (function)
 *   callback, will be invoked with a map. If successful the map will contain
 *   a key :value with the compilation result (string). If unsuccessful the map
 *   will contain a key :error with an ex-info instance describing the cause
 *   of failure.
 */
cljs.js.compile_str = (function cljs$js$compile_str(var_args){
var G__10312 = arguments.length;
switch (G__10312) {
case 3:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.compile_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.compile_str_STAR_(new cljs.core.PersistentArrayMap(null, 8, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))?cljs.js.sm_data():null)], null),source,name,opts,cb);
});

cljs.js.compile_str.cljs$lang$maxFixedArity = 5;

cljs.js.eval_str_STAR_ = (function cljs$js$eval_str_STAR_(bound_vars,source,name,opts,cb){
var rdr = cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3(source,(1),name);
var cb__$1 = cljs.js.trampoline_safe(cb);
var eof = {};
var aenv = cljs.analyzer.empty_env();
var sb = (new goog.string.StringBuffer());
var the_ns = (function (){var or__3936__auto__ = cljs.core.cst$kw$ns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.core.cst$sym$cljs$user;
}
})();
var bound_vars__$1 = (function (){var G__10316 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([bound_vars,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_,the_ns], null)], 0));
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10316,cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_,cljs.js.sm_data());
} else {
return G__10316;
}
})();
var aname = (function (){var G__10317 = name;
if(cljs.core.truth_(cljs.core.cst$kw$macros_DASH_ns.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.analyzer.macro_ns_name(G__10317);
} else {
return G__10317;
}
})();
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["Evaluating",name], 0));
} else {
}

cljs.js.clear_fns_BANG_();

return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(((function (rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function cljs$js$eval_str_STAR__$_compile_loop(ns){
var _STAR_compiler_STAR_10318 = cljs.env._STAR_compiler_STAR_;
var _STAR_eval_fn_STAR_10319 = cljs.js._STAR_eval_fn_STAR_;
var _STAR_cljs_ns_STAR_10320 = cljs.analyzer._STAR_cljs_ns_STAR_;
var _STAR_checked_arrays_STAR_10321 = cljs.analyzer._STAR_checked_arrays_STAR_;
var _STAR_cljs_static_fns_STAR_10322 = cljs.analyzer._STAR_cljs_static_fns_STAR_;
var _STAR_fn_invoke_direct_STAR_10323 = cljs.analyzer._STAR_fn_invoke_direct_STAR_;
var _STAR_ns_STAR_10324 = cljs.core._STAR_ns_STAR_;
var _STAR_alias_map_STAR_10325 = cljs.tools.reader._STAR_alias_map_STAR_;
var _STAR_data_readers_STAR_10326 = cljs.tools.reader._STAR_data_readers_STAR_;
var resolve_symbol10327 = cljs.tools.reader.resolve_symbol;
var _STAR_source_map_data_STAR_10328 = cljs.compiler._STAR_source_map_data_STAR_;
var _STAR_cljs_file_STAR_10329 = cljs.analyzer._STAR_cljs_file_STAR_;
cljs.env._STAR_compiler_STAR_ = cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.js._STAR_eval_fn_STAR_ = cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_ns_STAR_ = ns;

cljs.analyzer._STAR_checked_arrays_STAR_ = cljs.core.cst$kw$checked_DASH_arrays.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_cljs_static_fns_STAR_ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = (function (){var and__3925__auto__ = cljs.core.cst$kw$static_DASH_fns.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(and__3925__auto__)){
return cljs.core.cst$kw$fn_DASH_invoke_DASH_direct.cljs$core$IFn$_invoke$arity$1(opts);
} else {
return and__3925__auto__;
}
})();

cljs.core._STAR_ns_STAR_ = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(ns);

cljs.tools.reader._STAR_alias_map_STAR_ = cljs.js.current_alias_map();

cljs.tools.reader._STAR_data_readers_STAR_ = cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.tools.reader.resolve_symbol = cljs.js.resolve_symbol;

cljs.compiler._STAR_source_map_data_STAR_ = cljs.core.cst$kw$_STAR_sm_DASH_data_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1);

cljs.analyzer._STAR_cljs_file_STAR_ = cljs.core.cst$kw$cljs_DASH_file.cljs$core$IFn$_invoke$arity$1(opts);

try{var res = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.js.read(eof,rdr)], null);
}catch (e10330){var cause = e10330;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,["Could not eval ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res) : cb__$1.call(null,res));
} else {
var form = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res);
if(!((eof === form))){
var aenv__$1 = (function (){var G__10331 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(aenv,cljs.core.cst$kw$ns,cljs.analyzer.get_namespace.cljs$core$IFn$_invoke$arity$1(ns));
var G__10331__$1 = (cljs.core.truth_(cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10331,cljs.core.cst$kw$context,cljs.core.cst$kw$context.cljs$core$IFn$_invoke$arity$1(opts)):G__10331);
if(cljs.core.truth_(cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts))){
return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__10331__$1,cljs.core.cst$kw$def_DASH_emits_DASH_var,true);
} else {
return G__10331__$1;
}
})();
var res__$1 = (function (){try{return new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,cljs.analyzer.analyze.cljs$core$IFn$_invoke$arity$4(aenv__$1,form,null,opts)], null);
}catch (e10332){var cause = e10332;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv__$1,["Could not eval ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''),cause));
}})();
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$1) : cb__$1.call(null,res__$1));
} else {
var ast = cljs.core.cst$kw$value.cljs$core$IFn$_invoke$arity$1(res__$1);
var ns_SINGLEQUOTE_ = cljs.analyzer._STAR_cljs_ns_STAR_;
var vec__10333 = ((cljs.core.keyword_identical_QMARK_(cljs.core.cst$kw$target.cljs$core$IFn$_invoke$arity$1(opts),cljs.core.cst$kw$nodejs))?(function (){var map__10336 = cljs.core.group_by(cljs.analyzer.node_module_dep_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast));
var map__10336__$1 = ((((!((map__10336 == null)))?(((((map__10336.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10336.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10336):map__10336);
var node_libs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10336__$1,true);
var libs_to_load = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10336__$1,false);
return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node_libs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ast,cljs.core.cst$kw$deps,libs_to_load)], null);
})():new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,ast], null));
var node_deps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10333,(0),null);
var ast__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10333,(1),null);
if(cljs.core.truth_((function (){var G__10339 = cljs.core.cst$kw$op.cljs$core$IFn$_invoke$arity$1(ast__$1);
var fexpr__10338 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns_STAR_,null,cljs.core.cst$kw$ns,null], null), null);
return (fexpr__10338.cljs$core$IFn$_invoke$arity$1 ? fexpr__10338.cljs$core$IFn$_invoke$arity$1(G__10339) : fexpr__10338.call(null,G__10339));
})())){
sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10340_10354 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10341_10355 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_10340_10354,_STAR_print_fn_STAR_10341_10355,sb__4448__auto__,ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(_STAR_print_newline_STAR_10340_10354,_STAR_print_fn_STAR_10341_10355,sb__4448__auto__,ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;

try{cljs.compiler.emitln.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([["goog.provide(\"",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.compiler.munge.cljs$core$IFn$_invoke$arity$1(cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1))),"\");"].join('')], 0));
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10341_10355;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10340_10354;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());

var G__10343 = true;
var G__10344 = bound_vars__$1;
var G__10345 = aenv__$1;
var G__10346 = ast__$1;
var G__10347 = opts;
var G__10348 = ((function (G__10343,G__10344,G__10345,G__10346,G__10347,ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (res__$2){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$2))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$2) : cb__$1.call(null,res__$2));
} else {
var ns_name = cljs.core.cst$kw$name.cljs$core$IFn$_invoke$arity$1(ast__$1);
if((node_deps == null)){
} else {
cljs.js.node_side_effects(bound_vars__$1,sb,node_deps,ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));
}

cljs.js.global_exports_side_effects(bound_vars__$1,sb,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.analyzer.dep_has_global_exports_QMARK_,cljs.core.cst$kw$deps.cljs$core$IFn$_invoke$arity$1(ast__$1)),ns_name,cljs.core.cst$kw$def_DASH_emits_DASH_var.cljs$core$IFn$_invoke$arity$1(opts));

return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(cljs$js$eval_str_STAR__$_compile_loop,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ns_SINGLEQUOTE_], 0));
}
});})(G__10343,G__10344,G__10345,G__10346,G__10347,ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;
var fexpr__10342 = cljs.js.trampoline_safe(cljs.js.ns_side_effects);
return (fexpr__10342.cljs$core$IFn$_invoke$arity$6 ? fexpr__10342.cljs$core$IFn$_invoke$arity$6(G__10343,G__10344,G__10345,G__10346,G__10347,G__10348) : fexpr__10342.call(null,G__10343,G__10344,G__10345,G__10346,G__10347,G__10348));
} else {
var env__5779__auto___10356 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.deref(cljs.core.cst$kw$_STAR_compiler_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1)),cljs.core.cst$kw$options,opts);
var env__5779__auto___10357__$1 = ((cljs.core.map_QMARK_(env__5779__auto___10356))?cljs.core.atom.cljs$core$IFn$_invoke$arity$1(env__5779__auto___10356):(((((env__5779__auto___10356 instanceof cljs.core.Atom)) && (cljs.core.map_QMARK_(cljs.core.deref(env__5779__auto___10356)))))?env__5779__auto___10356:(function(){throw (new Error(["Compiler environment must be a map or atom containing a map, not ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type(env__5779__auto___10356))].join('')))})()
));
var _STAR_compiler_STAR_10349_10358 = cljs.env._STAR_compiler_STAR_;
cljs.env._STAR_compiler_STAR_ = env__5779__auto___10357__$1;

try{sb.append((function (){var sb__4448__auto__ = (new goog.string.StringBuffer());
var _STAR_print_newline_STAR_10350_10359 = cljs.core._STAR_print_newline_STAR_;
var _STAR_print_fn_STAR_10351_10360 = cljs.core._STAR_print_fn_STAR_;
cljs.core._STAR_print_newline_STAR_ = true;

cljs.core._STAR_print_fn_STAR_ = ((function (_STAR_print_newline_STAR_10350_10359,_STAR_print_fn_STAR_10351_10360,sb__4448__auto__,_STAR_compiler_STAR_10349_10358,env__5779__auto___10356,env__5779__auto___10357__$1,ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (x__4449__auto__){
return sb__4448__auto__.append(x__4449__auto__);
});})(_STAR_print_newline_STAR_10350_10359,_STAR_print_fn_STAR_10351_10360,sb__4448__auto__,_STAR_compiler_STAR_10349_10358,env__5779__auto___10356,env__5779__auto___10357__$1,ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;

try{cljs.compiler.emit(ast__$1);
}finally {cljs.core._STAR_print_fn_STAR_ = _STAR_print_fn_STAR_10351_10360;

cljs.core._STAR_print_newline_STAR_ = _STAR_print_newline_STAR_10350_10359;
}
return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb__4448__auto__)].join('');
})());
}finally {cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_10349_10358;
}
return ((function (ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (){
return cljs$js$eval_str_STAR__$_compile_loop(ns_SINGLEQUOTE_);
});
;})(ast,ns_SINGLEQUOTE_,vec__10333,node_deps,ast__$1,aenv__$1,res__$1,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname))
}
}
} else {
if(cljs.core.truth_(cljs.core.cst$kw$source_DASH_map.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.append_source_map(cljs.env._STAR_compiler_STAR_,aname,source,sb,cljs.core.deref(cljs.compiler._STAR_source_map_data_STAR_),opts);
} else {
}

if((aname instanceof cljs.core.Symbol)){
cljs.analyzer.dump_specs(aname);
} else {
}

var js_source = sb.toString();
var evalm = new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$lang,cljs.core.cst$kw$clj,cljs.core.cst$kw$name,name,cljs.core.cst$kw$path,cljs.js.ns__GT_relpath(name),cljs.core.cst$kw$source,js_source,cljs.core.cst$kw$cache,cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.env._STAR_compiler_STAR_),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$kw$cljs$analyzer_SLASH_namespaces,aname], null))], null);
var complete = ((function (js_source,evalm,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname){
return (function (res__$1){
if(cljs.core.truth_(cljs.core.cst$kw$error.cljs$core$IFn$_invoke$arity$1(res__$1))){
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$1) : cb__$1.call(null,res__$1));
} else {
if(cljs.core.truth_(cljs.core.cst$kw$verbose.cljs$core$IFn$_invoke$arity$1(opts))){
cljs.js.debug_prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([js_source], 0));
} else {
}

var res__$2 = (function (){try{return new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$ns,ns,cljs.core.cst$kw$value,(cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.js._STAR_eval_fn_STAR_.cljs$core$IFn$_invoke$arity$1(evalm) : cljs.js._STAR_eval_fn_STAR_.call(null,evalm))], null);
}catch (e10352){var cause = e10352;
return cljs.js.wrap_error(cljs.analyzer.error.cljs$core$IFn$_invoke$arity$3(aenv,"ERROR",cause));
}})();
return (cb__$1.cljs$core$IFn$_invoke$arity$1 ? cb__$1.cljs$core$IFn$_invoke$arity$1(res__$2) : cb__$1.call(null,res__$2));
}
});})(js_source,evalm,form,res,_STAR_compiler_STAR_10318,_STAR_eval_fn_STAR_10319,_STAR_cljs_ns_STAR_10320,_STAR_checked_arrays_STAR_10321,_STAR_cljs_static_fns_STAR_10322,_STAR_fn_invoke_direct_STAR_10323,_STAR_ns_STAR_10324,_STAR_alias_map_STAR_10325,_STAR_data_readers_STAR_10326,resolve_symbol10327,_STAR_source_map_data_STAR_10328,_STAR_cljs_file_STAR_10329,rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname))
;
var temp__5455__auto__ = cljs.core.cst$kw$cache_DASH_source.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(temp__5455__auto__)){
var f = temp__5455__auto__;
var fexpr__10353 = cljs.js.trampoline_safe(f);
return (fexpr__10353.cljs$core$IFn$_invoke$arity$2 ? fexpr__10353.cljs$core$IFn$_invoke$arity$2(evalm,complete) : fexpr__10353.call(null,evalm,complete));
} else {
return complete(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$value,null], null));
}
}
}
}finally {cljs.analyzer._STAR_cljs_file_STAR_ = _STAR_cljs_file_STAR_10329;

cljs.compiler._STAR_source_map_data_STAR_ = _STAR_source_map_data_STAR_10328;

cljs.tools.reader.resolve_symbol = resolve_symbol10327;

cljs.tools.reader._STAR_data_readers_STAR_ = _STAR_data_readers_STAR_10326;

cljs.tools.reader._STAR_alias_map_STAR_ = _STAR_alias_map_STAR_10325;

cljs.core._STAR_ns_STAR_ = _STAR_ns_STAR_10324;

cljs.analyzer._STAR_fn_invoke_direct_STAR_ = _STAR_fn_invoke_direct_STAR_10323;

cljs.analyzer._STAR_cljs_static_fns_STAR_ = _STAR_cljs_static_fns_STAR_10322;

cljs.analyzer._STAR_checked_arrays_STAR_ = _STAR_checked_arrays_STAR_10321;

cljs.analyzer._STAR_cljs_ns_STAR_ = _STAR_cljs_ns_STAR_10320;

cljs.js._STAR_eval_fn_STAR_ = _STAR_eval_fn_STAR_10319;

cljs.env._STAR_compiler_STAR_ = _STAR_compiler_STAR_10318;
}});})(rdr,cb__$1,eof,aenv,sb,the_ns,bound_vars__$1,aname))
,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.cst$kw$_STAR_cljs_DASH_ns_STAR_.cljs$core$IFn$_invoke$arity$1(bound_vars__$1)], 0));
});
/**
 * Evalute ClojureScript source given as a string. The parameters:
 * 
 *   state (atom)
 *  the compiler state
 * 
 *   source (string)
 *  the ClojureScript source
 * 
 *   name (symbol or string)
 *  optional, the name of the source - used as key in :source-maps
 * 
 *   opts (map)
 *  compilation options.
 * 
 *  :eval             - eval function to invoke, see *eval-fn*
 *  :load             - library resolution function, see *load-fn*
 *  :source-map       - set to true to generate inline source map information
 *  :cache-source     - optional, a function to run side-effects with the
 *                      compilation result prior to actual evalution. This function
 *                      takes two arguments, the first is the eval map, the source
 *                      will be under :source. The second argument is a callback of
 *                      one argument. If an error occurs an :error key should be
 *                      supplied.
 *  :def-emits-var    - sets whether def (and derived) forms return either a Var
 *                      (if set to true) or the def init value (if false). Default
 *                      is false.
 *  :checked-arrays   - if :warn or :error, checks inferred types and values passed
 *                      to aget/aset. Logs for incorrect values if :warn, throws if
 *                      :error. Defaults to false.
 *  :static-fns       - employ static dispatch to specific function arities in
 *                      emitted JavaScript, as opposed to making use of the
 *                      `call` construct. Defaults to false.
 *  :fn-invoke-direct - if `true`, does not generate `.call(null...)` calls for
 *                      unknown functions, but instead direct invokes via
 *                      `f(a0,a1...)`. Defaults to `false`.
 *  :target           - use `:nodejs` if targeting Node.js. Takes no other options
 *                      at the moment.
 *  :ns               - optional, the namespace in which to evaluate the source.
 *  :verbose          - optional, emit details from compiler activity. Defaults to
 *                      false.
 *  :context          - optional, sets the context for the source. Possible values
 *                   are `:expr`, `:statement` and `:return`. Defaults to
 *                    `:expr`.
 * 
 *   cb (function)
 *  callback, will be invoked with a map. If succesful the map will contain
 *  a :value key with the result of evaluation and :ns the current namespace.
 *  If unsuccessful will contain a :error key with an ex-info instance describing
 *  the cause of failure.
 */
cljs.js.eval_str = (function cljs$js$eval_str(var_args){
var G__10362 = arguments.length;
switch (G__10362) {
case 3:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

break;
case 4:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

break;
case 5:
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$3 = (function (state,source,cb){
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4(state,source,null,cb);
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$4 = (function (state,source,name,cb){
return cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5(state,source,name,null,cb);
});

cljs.js.eval_str.cljs$core$IFn$_invoke$arity$5 = (function (state,source,name,opts,cb){
if(cljs.core.truth_(cljs.js.atom_QMARK_(state))){
} else {
throw (new Error("Assert failed: (atom? state)"));
}

if(typeof source === 'string'){
} else {
throw (new Error("Assert failed: (string? source)"));
}

if(cljs.core.truth_(cljs.js.valid_name_QMARK_(name))){
} else {
throw (new Error("Assert failed: (valid-name? name)"));
}

if(cljs.core.truth_(cljs.js.valid_opts_QMARK_(opts))){
} else {
throw (new Error("Assert failed: (valid-opts? opts)"));
}

if(cljs.core.fn_QMARK_(cb)){
} else {
throw (new Error("Assert failed: (fn? cb)"));
}

return cljs.js.eval_str_STAR_(new cljs.core.PersistentArrayMap(null, 7, [cljs.core.cst$kw$_STAR_compiler_STAR_,state,cljs.core.cst$kw$_STAR_data_DASH_readers_STAR_,cljs.tagged_literals._STAR_cljs_data_readers_STAR_,cljs.core.cst$kw$_STAR_analyze_DASH_deps_STAR_,cljs.core.cst$kw$analyze_DASH_deps.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_cljs_DASH_dep_DASH_set_STAR_,cljs.analyzer._STAR_cljs_dep_set_STAR_,cljs.core.cst$kw$_STAR_load_DASH_macros_STAR_,cljs.core.cst$kw$load_DASH_macros.cljs$core$IFn$_invoke$arity$2(opts,true),cljs.core.cst$kw$_STAR_load_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$load.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_load_fn_STAR_;
}
})(),cljs.core.cst$kw$_STAR_eval_DASH_fn_STAR_,(function (){var or__3936__auto__ = cljs.core.cst$kw$eval.cljs$core$IFn$_invoke$arity$1(opts);
if(cljs.core.truth_(or__3936__auto__)){
return or__3936__auto__;
} else {
return cljs.js._STAR_eval_fn_STAR_;
}
})()], null),source,name,opts,cb);
});

cljs.js.eval_str.cljs$lang$maxFixedArity = 5;

if((typeof cljs !== 'undefined') && (typeof cljs.js !== 'undefined') && (typeof cljs.js.fn_index !== 'undefined')){
} else {
cljs.js.fn_index = cljs.core.volatile_BANG_((0));
}
if((typeof cljs !== 'undefined') && (typeof cljs.js !== 'undefined') && (typeof cljs.js.fn_refs !== 'undefined')){
} else {
cljs.js.fn_refs = cljs.core.volatile_BANG_(cljs.core.PersistentArrayMap.EMPTY);
}
/**
 * Clears saved functions.
 */
cljs.js.clear_fns_BANG_ = (function cljs$js$clear_fns_BANG_(){
return cljs.core.vreset_BANG_(cljs.js.fn_refs,cljs.core.PersistentArrayMap.EMPTY);
});
/**
 * Saves a function, returning a numeric representation.
 */
cljs.js.put_fn = (function cljs$js$put_fn(f){
var n = cljs.core._vreset_BANG_(cljs.js.fn_index,(cljs.core._deref(cljs.js.fn_index) + (1)));
cljs.core._vreset_BANG_(cljs.js.fn_refs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core._deref(cljs.js.fn_refs),n,f));

return n;
});
/**
 * Gets a function, given its numeric representation.
 */
cljs.js.get_fn = (function cljs$js$get_fn(n){
return cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(cljs.js.fn_refs),n);
});
cljs.js.emit_fn = (function cljs$js$emit_fn(f){
return cljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(["cljs.js.get_fn(",cljs.js.put_fn(f),")"], 0));
});
cljs.compiler.emit_constant.cljs$core$IMultiFn$_add_method$arity$3(null,Function,(function (f){
return cljs.js.emit_fn(f);
}));
cljs.compiler.emit_constant.cljs$core$IMultiFn$_add_method$arity$3(null,cljs.core.Var,(function (f){
return cljs.js.emit_fn(f);
}));
cljs.js.eval_impl = (function cljs$js$eval_impl(var_args){
var G__10365 = arguments.length;
switch (G__10365) {
case 1:
return cljs.js.eval_impl.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

break;
case 2:
return cljs.js.eval_impl.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

break;
default:
throw (new Error(["Invalid arity: ",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));

}
});

cljs.js.eval_impl.cljs$core$IFn$_invoke$arity$1 = (function (form){
return cljs.js.eval_impl.cljs$core$IFn$_invoke$arity$2(form,cljs.core._STAR_ns_STAR_.name);
});

cljs.js.eval_impl.cljs$core$IFn$_invoke$arity$2 = (function (form,ns){
var result = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);
var st_10370 = cljs.env._STAR_compiler_STAR_;
cljs.js.eval.cljs$core$IFn$_invoke$arity$4(st_10370,form,new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$ns,ns,cljs.core.cst$kw$context,cljs.core.cst$kw$expr,cljs.core.cst$kw$def_DASH_emits_DASH_var,true], null),((function (st_10370,result){
return (function (p__10366){
var map__10367 = p__10366;
var map__10367__$1 = ((((!((map__10367 == null)))?(((((map__10367.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__10367.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__10367):map__10367);
var value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10367__$1,cljs.core.cst$kw$value);
var error = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10367__$1,cljs.core.cst$kw$error);
if(cljs.core.truth_(error)){
throw error;
} else {
return cljs.core.reset_BANG_(result,value);
}
});})(st_10370,result))
);

return cljs.core.deref(result);
});

cljs.js.eval_impl.cljs$lang$maxFixedArity = 2;

cljs.core._STAR_eval_STAR_ = cljs.js.eval_impl;
